{"posts": [{"title": "Spring Boot\u5e94\u7528\u76d1\u63a7", "date": "2020-06-05T00:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj26/", "text": "1.Actuator\u5165\u95e8\n\u5b98\u65b9\u6587\u6863\nActuator\u662fSpring Boot\u63d0\u4f9b\u7684\u4e00\u4e2a\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u66b4\u9732\u7aef\u70b9\u8def\u7531\uff0c\u7528\u6765\u8f93\u51fa\u5e94\u7528\u4e2d\u7684\u8bf8\u591a\u7aef\u70b9\u4fe1\u606f\u3002\n\u6bcf\u4e2a\u5355\u72ec\u7684\u7aef\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7HTTP\u6216JMX \u542f\u7528\u6216\u7981\u7528\u548c\u516c\u5f00\uff08\u53ef\u8fdc\u7a0b\u8bbf\u95ee\uff09\u3002\u542f\u7528\u548c\u516c\u5f00\u7aef\u70b9\u5747\u88ab\u89c6\u4e3a\u53ef\u7528\u3002\u5185\u7f6e\u7aef\u70b9\u53ea\u6709\u5728\u53ef\u7528\u65f6\u624d\u4f1a\u88ab\u81ea\u52a8\u914d\u7f6e\u3002\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u9009\u62e9\u901a\u8fc7HTTP\u516c\u5f00\uff0c\u5176\u4e2d\u7aef\u70b9\u7684ID\u548c\u524d\u7f00/actuator\u6620\u5c04\u5230URL\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0chealth\u7aef\u70b9\u6620\u5c04\u5230/actuator/health\u3002\n\u4f9d\u8d56\u5982\u4e0b\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u542f\u52a8Spring Boot\u5e94\u7528\u7a0b\u5e8f\u4e4b\u540e\uff0c\u53ea\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u7aef\u70b9\u4fe1\u606f\u5c31\u80fd\u83b7\u5f97\u5e94\u7528\u7684\u4e00\u4e9b\u72b6\u6001\u4fe1\u606f\u3002\n\n\nID\n\u63cf\u8ff0\n\n\n\n\nauditevents\n\u516c\u5f00\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba1\u6838\u4e8b\u4ef6\u4fe1\u606f\u3002\u9700\u8981\u4e00\u4e2aAuditEventRepositoryBean\u3002\n\n\nbeans\n\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709Spring Bean\u7684\u5b8c\u6574\u5217\u8868\u3002\n\n\ncaches\n\u516c\u5f00\u53ef\u7528\u7684\u7f13\u5b58\u3002\n\n\nconditions\n\u663e\u793a\u5728\u914d\u7f6e\u548c\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e0a\u8bc4\u4f30\u7684\u6761\u4ef6\u4ee5\u53ca\u5b83\u4eec\u5339\u914d\u6216\u4e0d\u5339\u914d\u7684\u539f\u56e0\u3002\n\n\nconfigprops\n\u663e\u793a\u6240\u6709\u7684\u6574\u7406\u5217\u8868@ConfigurationProperties\u3002\n\n\nenv\n\u516c\u5f00Spring\u7684\u5c5e\u6027ConfigurableEnvironment\u3002\n\n\nflyway\n\u663e\u793a\u5df2\u5e94\u7528\u7684\u6240\u6709Flyway\u6570\u636e\u5e93\u8fc1\u79fb\u3002\u9700\u8981\u4e00\u4e2a\u6216\u591a\u4e2aFlywayBean\u3002\n\n\nhealth\n\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u72b6\u51b5\u4fe1\u606f\u3002\n\n\nhttptrace\n\u663e\u793aHTTP\u8ddf\u8e2a\u4fe1\u606f\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6700\u8fd1100\u4e2aHTTP\u8bf7\u6c42-\u54cd\u5e94\u4ea4\u6362\uff09\u3002\u9700\u8981\u4e00\u4e2aHttpTraceRepositoryBean\u3002\n\n\ninfo\n\u663e\u793a\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u3002\n\n\nintegrationgraph\n\u663e\u793aSpring Integration\u56fe\u3002\u9700\u8981\u5bf9\u7684\u4f9d\u8d56spring-integration-core\u3002\n\n\nloggers\n\u663e\u793a\u548c\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bb0\u5f55\u5668\u7684\u914d\u7f6e\u3002\n\n\nliquibase\n\u663e\u793a\u5df2\u5e94\u7528\u7684\u6240\u6709Liquibase\u6570\u636e\u5e93\u8fc1\u79fb\u3002\u9700\u8981\u4e00\u4e2a\u6216\u591a\u4e2aLiquibaseBean\u3002\n\n\nmetrics\n\u663e\u793a\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u6307\u6807\u201d\u4fe1\u606f\u3002\n\n\nmappings\n\u663e\u793a\u6240\u6709@RequestMapping\u8def\u5f84\u7684\u6574\u7406\u5217\u8868\u3002\n\n\nscheduledtasks\n\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u5212\u4efb\u52a1\u3002\n\n\nsessions\n\u5141\u8bb8\u4eceSpring Session\u652f\u6301\u7684\u4f1a\u8bdd\u5b58\u50a8\u4e2d\u68c0\u7d22\u548c\u5220\u9664\u7528\u6237\u4f1a\u8bdd\u3002\u9700\u8981\u4f7f\u7528Spring Session\u7684\u57fa\u4e8eServlet\u7684Web\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nshutdown\n\u4f7f\u5e94\u7528\u7a0b\u5e8f\u6b63\u5e38\u5173\u95ed\u3002\u9ed8\u8ba4\u7981\u7528\u3002\n\n\nthreaddump\n\u6267\u884c\u7ebf\u7a0b\u8f6c\u50a8\u3002\n\n\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u662fWeb\u5e94\u7528\u7a0b\u5e8f\uff08Spring MVC\uff0cSpring WebFlux\u6216Jersey\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u9644\u52a0\u7aef\u70b9\uff1a\n\n\nID\n\u63cf\u8ff0\n\n\n\n\nheapdump\n\u8fd4\u56dehprof\u5806\u8f6c\u50a8\u6587\u4ef6\u3002\n\n\njolokia\n\u901a\u8fc7HTTP\u516c\u5f00JMX bean\uff08\u5f53Jolokia\u5728\u7c7b\u8def\u5f84\u4e0a\u65f6\uff0c\u4e0d\u9002\u7528\u4e8eWebFlux\uff09\u3002\u9700\u8981\u5bf9\u7684\u4f9d\u8d56jolokia-core\u3002\n\n\nlogfile\n\u8fd4\u56de\u65e5\u5fd7\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u5982\u679c\u5df2\u8bbe\u7f6elogging.file.name\u6216logging.file.path\u5c5e\u6027\uff09\u3002\u652f\u6301\u4f7f\u7528HTTP Range\u6807\u5934\u6765\u68c0\u7d22\u90e8\u5206\u65e5\u5fd7\u6587\u4ef6\u7684\u5185\u5bb9\u3002\n\n\nprometheus\n\u4ee5Prometheus\u670d\u52a1\u5668\u53ef\u4ee5\u6293\u53d6\u7684\u683c\u5f0f\u516c\u5f00\u6307\u6807\u3002\u9700\u8981\u5bf9\u7684\u4f9d\u8d56micrometer-registry-prometheus\u3002\n\n\n\n\u5e38\u7528\u7aef\u70b9\u5217\u4e3e\u5982\u4e0b\uff0c\u53ef\u4ee5\u4e00\u4e2a\u4e2a\u8be6\u7ec6\u8bd5\u4e00\u4e0b\uff1a\n\n/info           \u3000\u3000\u3000\u3000\u3000   \u5e94\u7528\u57fa\u672c\u4fe1\u606f\n/health       \u3000\u3000\u3000\u3000\u3000   \u5065\u5eb7\u5ea6\u4fe1\u606f\n/metrics     \u3000\u3000\u3000\u3000\u3000   \u8fd0\u884c\u6307\u6807\n/env           \u3000\u3000\u3000\u3000\u3000   \u73af\u5883\u53d8\u91cf\u4fe1\u606f\n/loggers    \u3000\u3000\u3000\u3000\u3000    \u65e5\u5fd7\u76f8\u5173\n/dump       \u3000\u3000\u3000\u3000\u3000\u3000\u7ebf\u7a0b\u76f8\u5173\u4fe1\u606f\n/trace      \u3000\u3000\u3000\u3000\u3000\u3000   \u8bf7\u6c42\u8c03\u7528\u8f68\u8ff9\n\n1.1.\u542f\u7528\u7aef\u70b9\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7aef\u70b9shutdown\u5747\u5904\u4e8e\u542f\u7528\u72b6\u6001\u3002\u8981\u914d\u7f6e\u7aef\u70b9\u7684\u542f\u7528\uff0c\u8bf7\u4f7f\u7528\u5176management.endpoint.&lt;id&gt;.enabled\u5c5e\u6027\u3002\u4ee5\u4e0b\u793a\u4f8b\u542f\u7528shutdown\u7aef\u70b9\uff1a\nmanagement.endpoint.shutdown.enabled=true\n\n\u5982\u679c\u60a8\u5e0c\u671b\u542f\u7528\u7aef\u70b9\u542f\u7528\u800c\u4e0d\u662f\u9000\u51fa\u542f\u7528\uff0c\u8bf7\u5c06\u8be5management.endpoints.enabled-by-default\u5c5e\u6027\u8bbe\u7f6e\u4e3a\uff0cfalse\u5e76\u4f7f\u7528\u5404\u4e2a\u7aef\u70b9enabled\u5c5e\u6027\u91cd\u65b0\u542f\u7528\u3002\u4ee5\u4e0b\u793a\u4f8b\u542f\u7528\u8be5info\u7aef\u70b9\u5e76\u7981\u7528\u6240\u6709\u5176\u4ed6\u7aef\u70b9\uff1a\nmanagement.endpoints.enabled-by-default=false\nmanagement.endpoint.info.enabled=true\n\n\u9ed8\u8ba4\u53ea\u6709shutdown\u7aef\u70b9\u662f\u7981\u7528\u7684\uff0c\u4f46\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u53ea\u80fd\u4f7f\u7528/health\u548c/info\u7aef\u70b9\uff0c\u56e0\u4e3a\u7aef\u53e3\u4e0d\u4ec5\u8981\u5f00\u542f\uff0c\u8fd8\u9700\u8981\u66b4\u9732\u3002\n1.2.\u66b4\u9732\u7aef\u70b9\n\u7531\u4e8e\u7aef\u70b9\u53ef\u80fd\u5305\u542b\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u6b64\u5e94\u8c28\u614e\u8003\u8651\u4f55\u65f6\u516c\u5f00\u5b83\u4eec\u3002\u4e0b\u8868\u663e\u793a\u4e86\u5185\u7f6e\u7aef\u70b9\u7684\u9ed8\u8ba4\u66b4\u9732\uff1a\n\n\nID\nJMX\n\u7f51\u9875\n\n\n\n\nauditevents\n\u662f\n\u6ca1\u6709\n\n\nbeans\n\u662f\n\u6ca1\u6709\n\n\ncaches\n\u662f\n\u6ca1\u6709\n\n\nconditions\n\u662f\n\u6ca1\u6709\n\n\nconfigprops\n\u662f\n\u6ca1\u6709\n\n\nenv\n\u662f\n\u6ca1\u6709\n\n\nflyway\n\u662f\n\u6ca1\u6709\n\n\nhealth\n\u662f\n\u662f\n\n\nheapdump\n\u4e0d\u9002\u7528\n\u6ca1\u6709\n\n\nhttptrace\n\u662f\n\u6ca1\u6709\n\n\ninfo\n\u662f\n\u662f\n\n\nintegrationgraph\n\u662f\n\u6ca1\u6709\n\n\njolokia\n\u4e0d\u9002\u7528\n\u6ca1\u6709\n\n\nlogfile\n\u4e0d\u9002\u7528\n\u6ca1\u6709\n\n\nloggers\n\u662f\n\u6ca1\u6709\n\n\nliquibase\n\u662f\n\u6ca1\u6709\n\n\nmetrics\n\u662f\n\u6ca1\u6709\n\n\nmappings\n\u662f\n\u6ca1\u6709\n\n\nprometheus\n\u4e0d\u9002\u7528\n\u6ca1\u6709\n\n\nscheduledtasks\n\u662f\n\u6ca1\u6709\n\n\nsessions\n\u662f\n\u6ca1\u6709\n\n\nshutdown\n\u662f\n\u6ca1\u6709\n\n\nthreaddump\n\u662f\n\u6ca1\u6709\n\n\n\n\u4e0b\u8868\u662f\u9ed8\u8ba4\u7684\u7aef\u70b9\u66b4\u9732\u60c5\u51b5:\n\n\n\u5c5e\u6027\n\u9ed8\u8ba4\n\n\n\n\nmanagement.endpoints.jmx.exposure.exclude\n\n\n\nmanagement.endpoints.jmx.exposure.include\n*\n\n\nmanagement.endpoints.web.exposure.exclude\n\n\n\nmanagement.endpoints.web.exposure.include\ninfo, health\n\n\n\n\u4f8b\u5982\uff0c\u8981\u901a\u8fc7HTTP\u66b4\u9732\u9664env\u548cbeans\u7aef\u70b9\u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a\nmanagement.endpoints.web.exposure.include=*\nmanagement.endpoints.web.exposure.exclude=env,beans\n\n\u6ce8\u610f\uff1a\u5728YAML\u4e2d\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u8981\u5305\u62ec\uff08\u6216\u6392\u9664\uff09\u6240\u6709\u7aef\u70b9\uff0c\u8bf7\u786e\u4fdd\u6dfb\u52a0\u5f15\u53f7\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n1.3.\u4fdd\u62a4HTTP\u7aef\u70b9\n\u5e94\u8be5\u50cf\u5bf9\u5f85\u5176\u4ed6\u4efb\u4f55\u654f\u611fURL\u4e00\u6837\uff0c\u5c0f\u5fc3\u4fdd\u62a4HTTP\u7aef\u70b9\u7684\u5b89\u5168\u3002\u5982\u679c\u5b58\u5728Spring Security\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528Spring Security\u7684\u5185\u5bb9\u534f\u5546\u7b56\u7565\u6765\u4fdd\u62a4\u7aef\u70b9\u5b89\u5168\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5e0c\u671b\u4e3aHTTP\u7aef\u70b9\u914d\u7f6e\u81ea\u5b9a\u4e49\u5b89\u5168\u6027\uff0c\u53ea\u5141\u8bb8\u5177\u6709\u7279\u5b9a\u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee\u5b83\u4eec\uff0cSpring Boot\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u4fbf\u7684RequestMatcher\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u53ef\u4ee5\u4e0eSpring Security\u7ed3\u5408\u4f7f\u7528\u3002\n\u5f15\u5165Spring Security\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u6dfb\u52a0\u914d\u7f6e\nspring.security.user.name=xuxx\nspring.security.user.password=123\nspring.security.user.roles=ENDPOINT_ADMIN\n\n\u5178\u578b\u7684Spring Security\u914d\u7f6e\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u793a\u4f8b\uff1a\n@Configuration(proxyBeanMethods = false)\npublic class ActuatorSecurity extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.requestMatcher(EndpointRequest.toAnyEndpoint())\n                .authorizeRequests()\n                .anyRequest()\n                .hasRole(&quot;ENDPOINT_ADMIN&quot;)\n                .and()\n                .httpBasic();\n    }\n\n}\n\n1.4.CORS\u652f\u6301\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCORS\u652f\u6301\u662f\u7981\u7528\u7684\uff0c\u5e76\u4e14\u4ec5management.endpoints.web.cors.allowed-origins\u5728\u8bbe\u7f6e\u5c5e\u6027\u540e\u624d\u542f\u7528\u3002\u4ee5\u4e0b\u914d\u7f6e\u5141\u8bb8GET\u548cPOST\u4eceexample.com\u57df\u8c03\u7528\uff1a\nmanagement.endpoints.web.cors.allowed-origins=https://xuxx.com\nmanagement.endpoints.web.cors.allowed-methods=GET,POST\n\n2.\u901a\u8fc7HTTP\u8fdb\u884c\u76d1\u89c6\u548c\u7ba1\u7406\n2.1.\u81ea\u5b9a\u4e49\u7ba1\u7406\u7aef\u70b9\u8def\u5f84\n\u6709\u65f6\uff0c\u81ea\u5b9a\u4e49\u7ba1\u7406\u7aef\u70b9\u7684\u524d\u7f00\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c/actuator\u5df2\u7ecf\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002\u53ef\u4ee5\u4f7f\u7528\u8be5management.endpoints.web.base-path\u5c5e\u6027\u6765\u66f4\u6539\u7ba1\u7406\u7aef\u70b9\u7684\u524d\u7f00\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a\nmanagement.endpoints.web.base-path=/manage\n\n\u8bbe\u7f6e\u5b8c\u91cd\u542f\u540e\uff0c\u518d\u6b21\u8bbf\u95ee\u5730\u5740\u5c31\u4f1a\u53d8\u6210/manage/*\n\u5982\u679c\u8981\u5c06\u7aef\u70b9\u6620\u5c04\u5230\u5176\u4ed6\u8def\u5f84\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5management.endpoints.web.path-mapping\u5c5e\u6027\u3002\n\u4ee5\u4e0b\u793a\u4f8b\u91cd\u65b0\u6620\u5c04/actuator/health\u5230/healthcheck\uff1a\napplication.properties\nmanagement.endpoints.web.base-path=/\nmanagement.endpoints.web.path-mapping.health=healthcheck\n\n2.2\u7981\u7528HTTP\u7aef\u70b9\n\u5982\u679c\u4e0d\u60f3\u901a\u8fc7HTTP\u516c\u5f00\u7aef\u70b9\uff0c\u5219\u53ef\u4ee5\u5c06\u7ba1\u7406\u7aef\u53e3\u8bbe\u7f6e\u4e3a-1\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a\nmanagement.server.port=-1\n\n\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8be5management.endpoints.web.exposure.exclude\u5c5e\u6027\u6765\u5b9e\u73b0\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a\nmanagement.endpoints.web.exposure.exclude=*\n\n2.3.\u81ea\u5b9a\u4e49\u7ba1\u7406\u670d\u52a1\u5668\u7aef\u53e3\u548c\u5730\u5740\n\u5bf9\u4e8e\u57fa\u4e8e\u4e91\u7684\u90e8\u7f72\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684HTTP\u7aef\u53e3\u516c\u5f00\u7ba1\u7406\u7aef\u70b9\u662f\u660e\u667a\u7684\u9009\u62e9\u3002\u4f46\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728\u81ea\u5df1\u7684\u6570\u636e\u4e2d\u5fc3\u5185\u8fd0\u884c\uff0c\u5219\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u5176\u4ed6HTTP\u7aef\u53e3\u516c\u5f00\u7aef\u70b9\u3002\n\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a\uff1a\nmanagement.server.port=8081\nmanagement.server.address=127.0.0.1\n\n3.\u5e38\u7528\u7aef\u70b9\n3.1.health\u7aef\u70b9\nhealth \u4e3b\u8981\u7528\u6765\u68c0\u67e5\u5e94\u7528\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u8fd9\u662f\u6211\u4eec\u4f7f\u7528\u6700\u9ad8\u9891\u7684\u4e00\u4e2a\u76d1\u63a7\u70b9\u3002\u901a\u5e38\u4f7f\u7528\u6b64\u63a5\u53e3\u63d0\u9192\u6211\u4eec\u5e94\u7528\u5b9e\u4f8b\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u4ee5\u53ca\u5e94\u7528\u4e0d\u201d\u5065\u5eb7\u201c\u7684\u539f\u56e0\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u8fde\u63a5\u3001\u78c1\u76d8\u7a7a\u95f4\u4e0d\u591f\u7b49\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b health \u7684\u72b6\u6001\u662f\u5f00\u653e\u7684\uff0c\u6dfb\u52a0\u4f9d\u8d56\u540e\u542f\u52a8\u9879\u76ee\uff0c\u8bbf\u95ee\uff1ahttp://localhost:8080/actuator/health\u5373\u53ef\u770b\u5230\u5e94\u7528\u7684\u72b6\u6001\u3002\n{\n    &quot;status&quot; : &quot;UP&quot;\n}\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684 Spring Boot \u5e94\u7528\u7684\u72b6\u6001\u662f\u7531 HealthAggregator(\u5065\u5eb7\u805a\u5408\u5668) \u6c47\u603b\u800c\u6210\u7684\uff0c\u6c47\u603b\u7684\u7b97\u6cd5\u662f\uff1a\n\n1 \u8bbe\u7f6e\u72b6\u6001\u7801\u987a\u5e8f\uff1asetStatusOrder(Status.DOWN, Status.OUT_OF_SERVICE, Status.UP, Status.UNKNOWN);\u3002\n2 \u8fc7\u6ee4\u6389\u4e0d\u80fd\u8bc6\u522b\u7684\u72b6\u6001\u7801\u3002\n3 \u5982\u679c\u65e0\u4efb\u4f55\u72b6\u6001\u7801\uff0c\u6574\u4e2a Spring Boot \u5e94\u7528\u7684\u72b6\u6001\u662f UNKNOWN\u3002\n4 \u5c06\u6240\u6709\u6536\u96c6\u5230\u7684\u72b6\u6001\u7801\u6309\u7167 1 \u4e2d\u7684\u987a\u5e8f\u6392\u5e8f\u3002\n5 \u8fd4\u56de\u6709\u5e8f\u72b6\u6001\u7801\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u72b6\u6001\u7801\uff0c\u4f5c\u4e3a\u6574\u4e2a Spring Boot \u5e94\u7528\u7684\u72b6\u6001\u3002\n\nhealth \u901a\u8fc7\u5408\u5e76\u51e0\u4e2a\u5065\u5eb7\u6307\u6570\u68c0\u67e5\u5e94\u7528\u7684\u5065\u5eb7\u60c5\u51b5\u3002Spring Boot Actuator \u6709\u51e0\u4e2a\u9884\u5b9a\u4e49\u7684\u5065\u5eb7\u6307\u6807\u6bd4\u5982DataSourceHealthIndicator, DiskSpaceHealthIndicator, MongoHealthIndicator, RedisHealthIndicator\u7b49\uff0c\u5b83\u4f7f\u7528\u8fd9\u4e9b\u5065\u5eb7\u6307\u6807\u4f5c\u4e3a\u5065\u5eb7\u68c0\u67e5\u7684\u4e00\u90e8\u5206\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u7684\u5e94\u7528\u4f7f\u7528\u4e86Redis\uff0cRedisHealthindicator \u5c06\u88ab\u5f53\u4f5c\u68c0\u67e5\u7684\u4e00\u90e8\u5206\uff1b\u5982\u679c\u4f7f\u7528\u4e86MongoDB\uff0c\u90a3\u4e48MongoHealthIndicator \u5c06\u88ab\u5f53\u4f5c\u68c0\u67e5\u7684\u4e00\u90e8\u5206\u3002\n\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5173\u95ed\u7279\u5b9a\u7684\u5065\u5eb7\u68c0\u67e5\u6307\u6807\uff0c\u6bd4\u5982\u5173\u95ed redis \u7684\u5065\u5eb7\u68c0\u67e5\uff1a\nmanagement.health.redise.enabled=false\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u5065\u5eb7\u6307\u6807\u90fd\u88ab\u5f53\u4f5c\u5065\u5eb7\u68c0\u67e5\u7684\u4e00\u90e8\u5206\u3002\n3.2.info\u7aef\u70b9\n1.\u81ea\u5b9a\u4e49\u4fe1\u606f\ninfo \u5c31\u662f\u6211\u4eec\u81ea\u5df1\u914d\u7f6e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4ee5 info \u5f00\u5934\u7684\u914d\u7f6e\u4fe1\u606f\uff08\u4e5f\u53ef\u4ee5\u4f7f\u7528java\u4ee3\u7801\u914d\u7f6e\uff0c\u61d2\u5f97\u5199\uff09\uff0c\u4f8b\u5982\uff1a\ninfo.app.encoding=@project.build.sourceEncoding@\ninfo.app.java.source=@java.version@\ninfo.author.name=xuxx\ninfo.author.phone=10086\n\n\u542f\u52a8\u9879\u76ee\uff0c\u8bbf\u95ee\uff1ahttp://localhost:8080/actuator/info\u8fd4\u56de\u4fe1\u606f\u5982\u4e0b\uff1a\n{\n  &quot;author&quot;: {\n    &quot;phone&quot;: &quot;10086&quot;,\n    &quot;name&quot;: &quot;xuxx&quot;\n  },\n  &quot;app&quot;: {\n    &quot;encoding&quot;: &quot;UTF-8&quot;,\n    &quot;java&quot;: {\n      &quot;source&quot;: &quot;1.8.0_221&quot;\n    }\n  }\n}\n\n2.git\u4fe1\u606f\n\u5f15\u5165\u63d2\u4ef6\uff0c\u8be5\u63d2\u4ef6\u7528\u6765\u4ea7\u751fgit\u7684\u7248\u672c\u4fe1\u606f\n&lt;plugin&gt;\n    &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;\n    &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;\n&lt;/plugin&gt;\n\n\u6267\u884c\u63d2\u4ef6\uff08\u672a\u4f7f\u7528git\u7684\u8bdd\u4f1a\u62a5\u9519\uff1a\u7f3a\u5c11.git\u6587\u4ef6\uff09\n\n\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5728target/classes\u76ee\u5f55\u4e0b\uff0c\u4ea7\u751f\u4e86\u4e00\u4e2agit.properties\u914d\u7f6e\u4fe1\u606f\uff1a\n\n\u8fd9\u4e2a\u6587\u4ef6\u5c31\u662f\u5f53\u524d\u9879\u76ee\u7684git\u4fe1\u606f\uff0c\u5b83\u7684\u5185\u5bb9\u5982\u4e0b\uff1a\n#Generated by Git-Commit-Id-Plugin\n#Fri Jun 05 04:07:54 CST 2020\ngit.branch=master\ngit.build.host=Xuxx3309\ngit.build.time=2020-06-05T04\\:07\\:54+0800\ngit.build.user.email=1820502487@qq.com\ngit.build.user.name=Xuxx\ngit.build.version=0.0.1-SNAPSHOT\ngit.closest.tag.commit.count=\ngit.closest.tag.name=\ngit.commit.id=35f45d9378511195e5ce3501278c5efa315a5070\ngit.commit.id.abbrev=35f45d9\ngit.commit.id.describe=35f45d9\ngit.commit.id.describe-short=35f45d9\ngit.commit.message.full=\u521d\u59cb\u5316\ngit.commit.message.short=\u521d\u59cb\u5316\ngit.commit.time=2020-06-05T04\\:07\\:48+0800\ngit.commit.user.email=1820502487@qq.com\ngit.commit.user.name=Xuxx\ngit.dirty=false\ngit.local.branch.ahead=NO_REMOTE\ngit.local.branch.behind=NO_REMOTE\ngit.remote.origin.url=Unknown\ngit.tags=\ngit.total.commit.count=1\n\n\u542f\u52a8\u6d4b\u8bd5(\u6ca1\u6709\u914d\u7f6egit\u4fe1\u606f\u7684\u5c55\u793a\u7b56\u7565)\uff0c\u8bbf\u95ee\uff1ahttp://localhost:8080/actuator/info\u8fd4\u56de\u4fe1\u606f\u5982\u4e0b\uff1a\n{\n  &quot;author&quot;: {\n    &quot;phone&quot;: &quot;10086&quot;,\n    &quot;name&quot;: &quot;xuxx&quot;\n  },\n  &quot;app&quot;: {\n    &quot;encoding&quot;: &quot;UTF-8&quot;,\n    &quot;java&quot;: {\n      &quot;source&quot;: &quot;1.8.0_221&quot;\n    }\n  },\n  &quot;git&quot;: {\n    &quot;commit&quot;: {\n      &quot;time&quot;: &quot;2020-06-04T20:07:48Z&quot;,\n      &quot;id&quot;: &quot;35f45d9&quot;\n    },\n    &quot;branch&quot;: &quot;master&quot;\n  }\n}\n\n\u5176\u4e2d\u5305\u542b\u4e86\u5173\u4e8ebranch\u548ccommit\u7684\u57fa\u7840\u4fe1\u606f\u3002\u800c\u8fd9\u4e2a\u4fe1\u606f\u683c\u5f0f\u662f\u6700\u7b80\u6a21\u5f0f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e0bgit\u4fe1\u606f\u7684\u5c55\u793a\u7b56\u7565\uff0c\u9ed8\u8ba4\u4e3asimple\nmanagement.info.git.mode=full\n\n\u91cd\u542f\u5e94\u7528\u540e\u518d\u8bbf\u95ee/info\u7aef\u70b9\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u4e3a\u8be6\u7ec6\u7684\u7248\u672c\u4fe1\u606f\u4e86\u3002\n3.build\u4fe1\u606f\n\u548cgit\u4fe1\u606f\u7c7b\u4f3c\uff0c\u5f15\u5165\u63d2\u4ef6\n&lt;plugin&gt;\n    &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;\n    &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;\n&lt;/plugin&gt;\n\n\u6267\u884c\u63d2\u4ef6:\n\n\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5728target/classes\u76ee\u5f55\u4e0b\uff0c\u4ea7\u751f\u4e86\u4e00\u4e2abuild-info.properties\u914d\u7f6e\u4fe1\u606f\uff1a\n\n\u8fd9\u4e2a\u6587\u4ef6\u5c31\u662f\u5f53\u524d\u9879\u76ee\u7684git\u4fe1\u606f\uff0c\u5b83\u7684\u5185\u5bb9\u5982\u4e0b\uff1a\nbuild.artifact=actuator\nbuild.group=com.xuxx\nbuild.name=actuator\nbuild.time=2020-06-04T20\\:39\\:03.874Z\nbuild.version=0.0.1-SNAPSHOT\n\n\u542f\u52a8\u6d4b\u8bd5,\u8bbf\u95ee\uff1ahttp://localhost:8080/actuator/info\u8fd4\u56de\u4fe1\u606f\u5982\u4e0b\uff1a\n{\n  &quot;author&quot;: {\n    &quot;phone&quot;: &quot;10086&quot;,\n    &quot;name&quot;: &quot;xuxx&quot;\n  },\n  &quot;app&quot;: {\n    &quot;encoding&quot;: &quot;UTF-8&quot;,\n    &quot;java&quot;: {\n      &quot;source&quot;: &quot;1.8.0_221&quot;\n    }\n  },\n  &quot;git&quot;: {\n    &quot;commit&quot;: {\n      &quot;time&quot;: &quot;2020-06-04T20:07:48Z&quot;,\n      &quot;id&quot;: &quot;35f45d9&quot;\n    },\n    &quot;branch&quot;: &quot;master&quot;\n  },\n  &quot;build&quot;: {\n    &quot;version&quot;: &quot;0.0.1-SNAPSHOT&quot;,\n    &quot;artifact&quot;: &quot;actuator&quot;,\n    &quot;name&quot;: &quot;actuator&quot;,\n    &quot;group&quot;: &quot;com.xuxx&quot;,\n    &quot;time&quot;: &quot;2020-06-04T20:39:03.874Z&quot;\n  }\n}\n\n4.Spring Boot Admin\u76d1\u63a7\u7cfb\u7edf\n1.\u4ec0\u4e48\u662f Spring Boot Admin?\nSpring Boot Admin \u662f\u4e00\u4e2a\u7ba1\u7406\u548c\u76d1\u63a7 Spring Boot \u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u6e90\u8f6f\u4ef6\u3002\u6bcf\u4e2a\u5e94\u7528\u90fd\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u901a\u8fc7 HTTP \u6216\u8005\u4f7f\u7528 Eureka \u6ce8\u518c\u5230 admin server \u4e2d\u8fdb\u884c\u5c55\u793a\uff0cSpring Boot Admin UI \u90e8\u5206\u4f7f\u7528 VueJs \u5c06\u6570\u636e\u5c55\u793a\u5728\u524d\u7aef\u3002\n2.\u7b80\u5355\u4f7f\u7528\n2.1.Admin Server \u7aef\n\u9996\u5148\u6765\u521b\u5efa\u4e00\u4e2aSpring Boot Admin Server\u5de5\u7a0b\u4f5c\u4e3a\u670d\u52a1\u7aef\n\u4f9d\u8d56\uff1a\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u7136\u540e\u5728\u5e94\u7528\u4e3b\u7c7b\u4e0a\u901a\u8fc7\u52a0@EnableAdminServer\u6ce8\u89e3\u6765\u542f\u7528Spring Boot Admin\u3002\n@EnableAdminServer\n@SpringBootApplication\npublic class AdminApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminApplication.class, args);\n    }\n\n}\n\n\u542f\u52a8\u7a0b\u5e8f\uff0c\u6d4f\u89c8\u5668\u6253\u5f00localhost:8080\u67e5\u770bSpring Boot Admin\u4e3b\u9875\u9762\uff1a\n\n\u6b64\u65f6Application\u4e00\u680f\u7a7a\u7a7a\u5982\u4e5f\uff0c\u7b49\u5f85\u5f85\u76d1\u63a7\u7684\u5e94\u7528\u52a0\u5165\n2.2.Admin Clent \u7aef\n\u521b\u5efa\u8981\u76d1\u63a7\u7684Spring Boot\u5e94\u7528\n\u4f9d\u8d56\uff1a\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u7b80\u5355\u914d\u7f6e\nserver.port=8081\n#\u914d\u7f6eactuator\nmanagement.endpoints.web.exposure.include=*\n#\u914d\u7f6eadmin\uff0c\u5c06\u5e94\u7528\u6ce8\u518c\u5230Admin\u670d\u52a1\u7aef\u53bb\nspring.boot.admin.client.url=http://127.0.0.1:8080\n\nClent \u7aef\u4e00\u542f\u52a8\uff0cAdmin \u670d\u52a1 \u7aef\u7acb\u9a6c\u63a8\u9001\u6765\u4e86\u6d88\u606f\uff0c\u544a\u8bc9\u4f60Admin Clent \u7aef\u4e0a\u7ebf\u4e86\uff1a\n\n\u6b64\u65f6\u518d\u53bb\u67e5\u770bAdmin\u4e3b\u754c\u9762\n\n\u8865\u5145\uff1a\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u5355\u4e2a Spring Boot \u5e94\u7528\uff0c\u5c31\u9700\u8981\u5728\u6bcf\u4e00\u4e2a\u88ab\u76d1\u63a7\u7684\u5e94\u7528\u4e2d\u914d\u7f6e Admin Server \u7684\u5730\u5740\u4fe1\u606f\uff1b\u5982\u679c\u5e94\u7528\u90fd\u6ce8\u518c\u5728 Eureka \u4e2d\u5c31\u4e0d\u9700\u8981\u518d\u5bf9\u6bcf\u4e2a\u5e94\u7528\u8fdb\u884c\u914d\u7f6e\uff0cSpring Boot Admin \u4f1a\u81ea\u52a8\u4ece\u6ce8\u518c\u4e2d\u5fc3\u6293\u53d6\u5e94\u7528\u7684\u76f8\u5173\u4fe1\u606f\u3002\n3. \u901a\u77e5\n3.1\u90ae\u4ef6\u901a\u77e5\n\u5728 Spring Boot Admin \u4e2d \u5f53\u6ce8\u518c\u7684\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u66f4\u6539\u4e3aDOWN\u3001UNKNOWN\u3001OFFLINE \u90fd\u53ef\u4ee5\u6307\u5b9a\u89e6\u53d1\u901a\u77e5\uff0c\u4e0b\u9762\u8bb2\u89e3\u914d\u7f6e\u90ae\u4ef6\u901a\u77e5\u3002\n\u5728Admin Server \u7aef\uff0c\u52a0\u4e0amail\u7684\u4f9d\u8d56\uff1a\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u6536\u53d1\u90ae\u4ef6\u7684\u914d\u7f6e\uff1a\nspring.mail.host=smtp.qq.com\nspring.mail.port=465\nspring.mail.username=1820502487@qq.com\n#\u6388\u6743\u7801\nspring.mail.password=zdbnotvgejxmbeji\nspring.mail.default-encoding=UTF-8\n#\u52a0\u5bc6\u8fde\u63a5\nspring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory\n#\u65e5\u5fd7\nspring.mail.properties.mail.debug=true\n#\u5c06\u90ae\u4ef6\u53d1\u9001\u7ed9\u8c01\nspring.boot.admin.notify.mail.to=1913312971@qq.com\n#\u4ece\u54ea\u513f\u53d1\u6765\u7684\nspring.boot.admin.notify.mail.from=1820502487@qq.com\n#\u5ffd\u7565\u72b6\u6001\u53d8\u5316\uff0c\u7559\u7a7a\u5c31\u662f\u6bcf\u4e00\u4e2a\u72b6\u6001\u53d8\u5316\u90fd\u4e0d\u5ffd\u7565\nspring.boot.admin.notify.mail.ignore-changes=\n\n\u91cd\u542fAdmin Server \u7aef\uff0c\u4e4b\u540e\u82e5\u51fa\u73b0\u6ce8\u518c\u7684\u5ba2\u6237\u7aef\u7684\u72b6\u6001\u4ece UP \u53d8\u4e3a OFFLINE \u6216\u5176\u4ed6\u72b6\u6001\uff0c\u670d\u52a1\u7aef\u5c31\u4f1a\u81ea\u52a8\u5c06\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u5230\u4e0a\u9762\u914d\u7f6e\u7684\u6536\u4ef6\u5730\u5740\u3002\n\u6ce8\u610f : \u914d\u7f6e\u4e86\u90ae\u4ef6\u901a\u77e5\u540e\uff0c\u4f1a\u51fa\u73b0 \u53cd\u590d\u901a\u77e5 service offline / up\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u56e0\u5728\u4e8e \u67e5\u8be2\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u548c\u4fe1\u606f\u8d85\u65f6\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\uff1a\n(Admin Clent \u7aef\u914d\u7f6e)\n#\u65b9\u6cd5\u4e00\uff1a\u914d\u7f6e\u8d85\u65f6\u65f6\u95f4\uff08\u5355\u4f4d:ms\uff09\n\nspring.boot.admin.monitor.read-timeout=20000\n\n#\u65b9\u6cd5\u4e8c\uff1a\u5173\u95ed\u672a\u4f7f\u7528\u6216\u4e0d\u91cd\u8981\u7684\u68c0\u67e5\u70b9\n\nmanagement.health.db.enabled=false\nmanagement.health.mail.enabled=false\nmanagement.health.redis.enabled=false\nmanagement.health.mongo.enabled=false\n\n3.2. \u81ea\u5b9a\u4e49\u901a\u77e5\n\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u5b9e\u73b0Notifier\u63a5\u53e3\u7684Spring Beans\u6765\u6dfb\u52a0\u60a8\u81ea\u5df1\u7684\u901a\u77e5\u7a0b\u5e8f\uff0c\u6700\u597d\u901a\u8fc7\u6269\u5c55 AbstractEventNotifier\u6216AbstractStatusChangeNotifier\u3002\u5728Admin Server \u7aef\u4e2d\u7f16\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u901a\u77e5\u5668\uff1a\n@Component\npublic class CustomNotifier  extends AbstractStatusChangeNotifier {\n    private static final Logger LOGGER = LoggerFactory.getLogger( LoggingNotifier.class);\n\n    public CustomNotifier(InstanceRepository repository) {\n        super(repository);\n    }\n\n    @Override\n    protected Mono&lt;Void&gt; doNotify(InstanceEvent event, Instance instance) {\n        return Mono.fromRunnable(() -&gt; {\n            if (event instanceof InstanceStatusChangedEvent) {\n                LOGGER.info(&quot;Instance {} ({}) is {}&quot;, instance.getRegistration().getName(), event.getInstance(),\n                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());\n\n                String status = ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus();\n\n                switch (status) {\n                    // \u5065\u5eb7\u68c0\u67e5\u6ca1\u901a\u8fc7\n                    case &quot;DOWN&quot;:\n                        System.out.println(&quot;\u53d1\u9001 \u5065\u5eb7\u68c0\u67e5\u6ca1\u901a\u8fc7 \u7684\u901a\u77e5\uff01&quot;);\n                        break;\n                    // \u670d\u52a1\u79bb\u7ebf\n                    case &quot;OFFLINE&quot;:\n                        System.out.println(&quot;\u53d1\u9001 \u670d\u52a1\u79bb\u7ebf \u7684\u901a\u77e5\uff01&quot;);\n                        break;\n                    //\u670d\u52a1\u4e0a\u7ebf\n                    case &quot;UP&quot;:\n                        System.out.println(&quot;\u53d1\u9001 \u670d\u52a1\u4e0a\u7ebf \u7684\u901a\u77e5\uff01&quot;);\n                        break;\n                    // \u670d\u52a1\u672a\u77e5\u5f02\u5e38\n                    case &quot;UNKNOWN&quot;:\n                        System.out.println(&quot;\u53d1\u9001 \u670d\u52a1\u672a\u77e5\u5f02\u5e38 \u7684\u901a\u77e5\uff01&quot;);\n                        break;\n                    default:\n                        break;\n                }\n\n            } else {\n                LOGGER.info(&quot;Instance {} ({}) {}&quot;, instance.getRegistration().getName(), event.getInstance(),\n                        event.getType());\n            }\n        });\n    }\n}\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring Boot\u53d1\u9001\u90ae\u4ef6", "date": "2020-06-03T23:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj25/", "text": "1.\u57fa\u7840\u77e5\u8bc6\n\n\u4ec0\u4e48\u662fSMTP\uff1f\n SMTP\u5168\u79f0\u4e3aSimple Mail Transfer Protocol\uff08\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff09\uff0c\u5b83\u662f\u4e00\u7ec4\u7528\u4e8e\u4ece\u6e90\u5730\u5740\u5230\u76ee\u7684\u5730\u5740\u4f20\u8f93\u90ae\u4ef6\u7684\u89c4\u8303\uff0c\u901a\u8fc7\u5b83\u6765\u63a7\u5236\u90ae\u4ef6\u7684\u4e2d\u8f6c\u65b9\u5f0f\u3002SMTP\u8ba4\u8bc1\u8981\u6c42\u5fc5\u987b\u63d0\u4f9b\u8d26\u53f7\u548c\u5bc6\u7801\u624d\u80fd\u767b\u9646\u670d\u52a1\u5668\uff0c\u5176\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u907f\u514d\u7528\u6237\u53d7\u5230\u5783\u573e\u90ae\u4ef6\u7684\u4fb5\u6270\u3002\n\u4ec0\u4e48\u662fIMAP\uff1f\n IMAP\u5168\u79f0\u4e3aInternet Message Access Protocol\uff08\u4e92\u8054\u7f51\u90ae\u4ef6\u8bbf\u95ee\u534f\u8bae\uff09\uff0cIMAP\u5141\u8bb8\u4ece\u90ae\u4ef6\u670d\u52a1\u5668\u4e0a\u83b7\u53d6\u90ae\u4ef6\u7684\u4fe1\u606f\u3001\u4e0b\u8f7d\u90ae\u4ef6\u7b49\u3002IMAP\u4e0ePOP\u7c7b\u4f3c\uff0c\u90fd\u662f\u4e00\u79cd\u90ae\u4ef6\u83b7\u53d6\u534f\u8bae\u3002\n\u4ec0\u4e48\u662fPOP3\uff1f\n POP3\u5168\u79f0\u4e3aPost Office Protocol 3\uff08\u90ae\u5c40\u534f\u8bae\uff09\uff0cPOP3\u652f\u6301\u5ba2\u6237\u7aef\u8fdc\u7a0b\u7ba1\u7406\u670d\u52a1\u5668\u7aef\u7684\u90ae\u4ef6\u3002POP3\u5e38\u7528\u4e8e\u201c\u79bb\u7ebf\u201d\u90ae\u4ef6\u5904\u7406\uff0c\u5373\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0b\u8f7d\u670d\u52a1\u5668\u90ae\u4ef6\uff0c\u7136\u540e\u670d\u52a1\u5668\u4e0a\u7684\u90ae\u4ef6\u5c06\u4f1a\u88ab\u5220\u9664\u3002\u76ee\u524d\u5f88\u591aPOP3\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u53ea\u63d0\u4f9b\u4e0b\u8f7d\u90ae\u4ef6\u529f\u80fd\uff0c\u670d\u52a1\u5668\u672c\u8eab\u5e76\u4e0d\u5220\u9664\u90ae\u4ef6\uff0c\u8fd9\u79cd\u5c5e\u4e8e\u6539\u8fdb\u7248\u7684POP3\u534f\u8bae\u3002\nIMAP\u548cPOP3\u534f\u8bae\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\n \u4e24\u8005\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\uff0cIMAP\u5141\u8bb8\u53cc\u5411\u901a\u4fe1\uff0c\u5373\u5728\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u4f1a\u53cd\u9988\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u4f8b\u5982\u5728\u5ba2\u6237\u7aef\u6536\u53d6\u90ae\u4ef6\u3001\u6807\u8bb0\u5df2\u8bfb\u7b49\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u4f1a\u8ddf\u7740\u540c\u6b65\u8fd9\u4e9b\u64cd\u4f5c\u3002\u800c\u5bf9\u4e8ePOP\u534f\u8bae\u867d\u7136\u4e5f\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0b\u8f7d\u670d\u52a1\u5668\u90ae\u4ef6\uff0c\u4f46\u662f\u5728\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u540c\u6b65\u5230\u670d\u52a1\u5668\u4e0a\u9762\u7684\uff0c\u4f8b\u5982\u5728\u5ba2\u6237\u7aef\u6536\u53d6\u6216\u6807\u8bb0\u5df2\u8bfb\u90ae\u4ef6\uff0c\u670d\u52a1\u5668\u4e0d\u4f1a\u540c\u6b65\u8fd9\u4e9b\u64cd\u4f5c\u3002\n\n2.\u8fdb\u9636\u77e5\u8bc6\n\n\u4ec0\u4e48\u662fJavaMailSender\u548cJavaMailSenderImpl\uff1f\nJavaMailSender\u548cJavaMailSenderImpl \u662fSpring\u5b98\u65b9\u63d0\u4f9b\u7684\u96c6\u6210\u90ae\u4ef6\u670d\u52a1\u7684\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\uff0c\u4ee5\u7b80\u5355\u9ad8\u6548\u7684\u8bbe\u8ba1\u8457\u79f0\uff0c\u76ee\u524d\u662fJava\u540e\u7aef\u53d1\u9001\u90ae\u4ef6\u548c\u96c6\u6210\u90ae\u4ef6\u670d\u52a1\u7684\u4e3b\u6d41\u5de5\u5177\u3002\n\n\u5982\u4f55\u901a\u8fc7JavaMailSenderImpl\u53d1\u9001\u90ae\u4ef6\uff1f\n\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u4e1a\u52a1\u7c7b\u6ce8\u5165JavaMailSenderImpl\u5e76\u8c03\u7528send\u65b9\u6cd5\u53d1\u9001\u90ae\u4ef6\u3002\u5176\u4e2d\u7b80\u5355\u90ae\u4ef6\u53ef\u4ee5\u901a\u8fc7SimpleMailMessage\u6765\u53d1\u9001\u90ae\u4ef6\uff0c\u800c\u590d\u6742\u7684\u90ae\u4ef6\uff08\u4f8b\u5982\u6dfb\u52a0\u9644\u4ef6\uff09\u53ef\u4ee5\u501f\u52a9MimeMessageHelper\u6765\u6784\u5efaMimeMessage\u53d1\u9001\u90ae\u4ef6\u3002\n\n\n3.\u4f7f\u7528\u6559\u7a0b\n1.\u5f00\u542f\u90ae\u4ef6\u670d\u52a1\n\u767b\u9646\u4f7f\u7528\u7684\u90ae\u7bb1\uff0c\u5728\u8bbe\u7f6e\u4e2d\u6253\u5f00\u5e76\u52fe\u9009POP3/SMTP/IMAP\u670d\u52a1\uff0c\u7136\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a\u6388\u6743\u7801\uff0c\u8fd9\u4e2a\u90ae\u7bb1\u548c\u6388\u6743\u7801\u5c06\u7528\u4f5c\u767b\u9646\u8ba4\u8bc1\u3002\n2.\u521b\u5efaSpring Boot\u9879\u76ee\uff0c\u5f15\u5165\u4f9d\u8d56\n\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\u914d\u7f6e\nspring.mail.host=smtp.qq.com\nspring.mail.port=465\nspring.mail.username=1820502...@qq.com\n#\u6388\u6743\u7801\nspring.mail.password=***...\nspring.mail.default-encoding=UTF-8\n#\u52a0\u5bc6\u8fde\u63a5\nspring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory\n#\u65e5\u5fd7\nspring.mail.properties.mail.debug=true\n\n3.\u53d1\u9001\u90ae\u4ef6\n3.1 \u53d1\u9001\u7b80\u5355\u90ae\u4ef6\n@SpringBootTest\nclass MailApplicationTests {\n\n    @Autowired\n    JavaMailSender javaMailSender;\n\n    @Test\n    void contextLoads() {\n        //\u5199\u90ae\u4ef6\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setSubject(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u4e3b\u9898&quot;);\n        message.setText(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u5185\u5bb9\uff1aHello Word&quot;);\n        message.setFrom(&quot;1820502...@qq.com&quot;);\n        message.setSentDate(new Date());\n        message.setTo(&quot;1913312...@qq.com&quot;);\n        //message.setCc();//\u6284\u9001\n        //message.setBcc();//\u5bc6\u6284\n\n        //\u53d1\u9001\u90ae\u4ef6\n        javaMailSender.send(message);\n    }\n}\n\n3.2 \u53d1\u9001\u5e26\u9644\u4ef6\u7684\u90ae\u4ef6\n@SpringBootTest\nclass MailApplicationTests {\n\n    @Autowired\n    JavaMailSender javaMailSender;\n\n    @Test\n    void test1() throws MessagingException {\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);\n\n        //\u5199\u90ae\u4ef6\n        messageHelper.setSubject(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u4e3b\u9898&quot;);\n        messageHelper.setText(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u5185\u5bb9\uff1aHello Word (\u5e26\u9644\u4ef6)&quot;);\n        //\u6dfb\u52a0\u9644\u4ef6\n        messageHelper.addAttachment(&quot;1.jpg&quot;, new File(&quot;D:\\\\UserData\\\\Pictures\\\\QQ\\\\1.jpg&quot;));\n        messageHelper.setFrom(&quot;1820502...@qq.com&quot;);\n        messageHelper.setSentDate(new Date());\n        messageHelper.setTo(&quot;1913312...@qq.com&quot;);\n\n        //\u53d1\u9001\u90ae\u4ef6\n        javaMailSender.send(message);\n    }\n}\n\n3.3\u53d1\u9001\u5e26\u56fe\u7247\u7684\u90ae\u4ef6\n@SpringBootTest\nclass MailApplicationTests {\n\n    @Autowired\n    JavaMailSender javaMailSender;\n\n    @Test\n    void test2() throws MessagingException {\n        MimeMessage message = javaMailSender.createMimeMessage();\n        MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);\n\n        //\u5199\u90ae\u4ef6\n        messageHelper.setSubject(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u4e3b\u9898&quot;);\n        messageHelper.setText(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u5185\u5bb9\uff1aHello Word(\u5e26\u56fe\u7247)\uff0c\u8fd9\u662f\u56fe1\uff1a&lt;img src=&#39;cid:p01&#39;/&gt;\uff0c\u8fd9\u662f\u56fe2\uff1a&lt;img src=&#39;cid:p02&#39;/&gt;&quot;, true);\n        messageHelper.addInline(&quot;p01&quot;, new FileSystemResource(new File(&quot;D:\\\\UserData\\\\Pictures\\\\QQ\\\\1.jpg&quot;)));\n        messageHelper.addInline(&quot;p02&quot;, new FileSystemResource(new File(&quot;D:\\\\UserData\\\\Pictures\\\\QQ\\\\1.jpg&quot;)));\n        messageHelper.setFrom(&quot;1820502...@qq.com&quot;);\n        messageHelper.setSentDate(new Date());\n        messageHelper.setTo(&quot;1913312...@qq.com&quot;);\n\n        //\u53d1\u9001\u90ae\u4ef6\n        javaMailSender.send(message);\n    }\n}\n\n4.\u4f7f\u7528\u6a21\u677f\n4.1\u4f7f\u7528Thymeleaf\n\u52a0\u5165\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\nmail.html\uff08\u653e\u5728templates\u76ee\u5f55\u4e0b\uff09\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;cn&quot; xmlns:th=&quot;http://www.thymeleaf.org/&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\u90ae\u4ef6&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n    Hello,&lt;span th:text=&quot;${name}&quot;/&gt;,\u6b22\u8fce\u52a0\u5165XXX\u5927\u5bb6\u5ead\n&lt;/div&gt;\n&lt;div&gt;\n    \u60a8\u7684\u5165\u804c\u4fe1\u606f\u5982\u4e0b:\n&lt;/div&gt;\n&lt;table border=&quot;1&quot;&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u804c\u4f4d&lt;/td&gt;\n        &lt;td&gt;&lt;span th:text=&quot;${position}&quot;/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u804c\u79f0&lt;/td&gt;\n        &lt;td&gt;&lt;span th:text=&quot;${jobtitle}&quot;/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u85aa\u8d44&lt;/td&gt;\n        &lt;td&gt;&lt;span th:text=&quot;${salary}&quot;/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u90e8\u95e8&lt;/td&gt;\n        &lt;td&gt;&lt;span th:text=&quot;${department}&quot;/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;div style=&quot;font-size: 24px&quot;&gt;\u5e0c\u671b\u5728\u672a\u6765\u7684\u65e5\u5b50\u91cc\uff0c\u643a\u624b\u5e76\u8fdb\uff01&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n@SpringBootTest\nclass MailApplicationTests {\n\n    @Autowired\n    JavaMailSender javaMailSender;\n\n    @Autowired\n    TemplateEngine templateEngine;//thymeleaf\u6a21\u677f\u5f15\u64ce\n\n    /*\u53d1\u9001\u90ae\u4ef6\u6a21\u677f thymeleaf*/\n    @Test\n    void test3() throws MessagingException {\n        MimeMessage message = javaMailSender.createMimeMessage();\n        MimeMessageHelper messageHelper = new MimeMessageHelper(message,\n        //\u5199\u90ae\u4ef6\n        messageHelper.setSubject(&quot;\u6d4b\u8bd5\u90ae\u4ef6-\u4e3b\u9898&quot;);\n        Context context = new Context();\n        context.setVariable(&quot;name&quot;, &quot;xuxx&quot;);\n        context.setVariable(&quot;position&quot;, &quot;Java\u5f00\u53d1&quot;);\n        context.setVariable(&quot;jobtitle&quot;, &quot;Java\u5f00\u53d1\u521d\u7ea7\u5de5\u7a0b\u5e08&quot;);\n        context.setVariable(&quot;salary&quot;, &quot;13*6k&quot;);\n        context.setVariable(&quot;department&quot;, &quot;\u4ea7\u54c1\u5f00\u53d1\u90e8&quot;);\n        String process = templateEngine.process(&quot;mail.html&quot;, context);\n        messageHelper.setText(process, true);\n        messageHelper.setFrom(&quot;1820502...@qq.com&quot;);\n        messageHelper.setSentDate(new Date());\n        messageHelper.setTo(&quot;1913312...@qq.com&quot;);\n        //\u53d1\u9001\u90ae\u4ef6\n        javaMailSender.send(message);\n    }\n}\n\n4.2\u4f7f\u7528Freemarker\n\u52a0\u5165\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\nmail.ftl\uff08\u653e\u5728templates\u76ee\u5f55\u4e0b\uff09\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;cn&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\u90ae\u4ef6&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n    Hello,${name},\u6b22\u8fce\u52a0\u5165XXX\u5927\u5bb6\u5ead\n&lt;/div&gt;\n&lt;div&gt;\n    \u60a8\u7684\u5165\u804c\u4fe1\u606f\u5982\u4e0b:\n&lt;/div&gt;\n&lt;table border=&quot;1&quot;&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u804c\u4f4d&lt;/td&gt;\n        &lt;td&gt;${position}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u804c\u79f0&lt;/td&gt;\n        &lt;td&gt;${jobtitle}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u85aa\u8d44&lt;/td&gt;\n        &lt;td&gt;${salary}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u90e8\u95e8&lt;/td&gt;\n        &lt;td&gt;${department}&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;div style=&quot;font-size: 24px&quot;&gt;\u5e0c\u671b\u5728\u672a\u6765\u7684\u65e5\u5b50\u91cc\uff0c\u643a\u624b\u5e76\u8fdb\uff01&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n@SpringBootTest\nclass MailApplicationTests {\n\n    @Autowired\n    JavaMailSender javaMailSender;\n\n    /*\u53d1\u9001\u90ae\u4ef6\u6a21\u677f freemarker*/\n    @Test\n    void test4() throws MessagingException, IOException, TemplateException {\n        MimeMessage message = javaMailSender.createMimeMessage();\n        MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);\n\n        //\u5199\u90ae\u4ef6\n        messageHelper.setSubject(\"\u6d4b\u8bd5\u90ae\u4ef6-\u4e3b\u9898\");\n        Configuration configuration = new Configuration(Configuration.VERSION_2_3_29);\n        configuration.setClassLoaderForTemplateLoading(this.getClass().getClassLoader(), \"templates\");\n        Template template = configuration.getTemplate(\"mail.ftl\");\n        Map&lt;String, Object&gt; map = new HashMap();\n        map.put(\"name\", \"xuxx\");\n        map.put(\"position\", \"Java\u5f00\u53d1\");\n        map.put(\"jobtitle\", \"Java\u5f00\u53d1\u521d\u7ea7\u5de5\u7a0b\u5e08\");\n        map.put(\"salary\", \"13*6k\");\n        map.put(\"department\", \"\u4ea7\u54c1\u5f00\u53d1\u90e8\");\n        StringWriter out = new StringWriter();\n        template.process(map, out);\n        messageHelper.setText(out.toString(), true);\n        messageHelper.setFrom(\"1820502...@qq.com\");\n        messageHelper.setSentDate(new Date());\n        messageHelper.setTo(\"1913312...@qq.com\");\n        //\u53d1\u9001\u90ae\u4ef6\n        javaMailSender.send(message);\n    }\n}\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "RibbitMQ\u5b9e\u6218\u6559\u7a0b", "date": "2020-05-31T22:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj24/", "text": "1.MQ\u5f15\u8a00\n1.1 \u4ec0\u4e48\u662fMQ\nMQ(Message Quene) :  \u7ffb\u8bd1\u4e3a \u6d88\u606f\u961f\u5217,\u901a\u8fc7\u5178\u578b\u7684 \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u6a21\u578b,\u751f\u4ea7\u8005\u4e0d\u65ad\u5411\u6d88\u606f\u961f\u5217\u4e2d\u751f\u4ea7\u6d88\u606f\uff0c\u6d88\u8d39\u8005\u4e0d\u65ad\u7684\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6d88\u606f\u3002\u56e0\u4e3a\u6d88\u606f\u7684\u751f\u4ea7\u548c\u6d88\u8d39\u90fd\u662f\u5f02\u6b65\u7684\uff0c\u800c\u4e14\u53ea\u5173\u5fc3\u6d88\u606f\u7684\u53d1\u9001\u548c\u63a5\u6536\uff0c\u6ca1\u6709\u4e1a\u52a1\u903b\u8f91\u7684\u4fb5\u5165,\u8f7b\u677e\u7684\u5b9e\u73b0\u7cfb\u7edf\u95f4\u89e3\u8026\u3002\u522b\u540d\u4e3a \u6d88\u606f\u4e2d\u95f4\u4ef6 \u901a\u8fc7\u5229\u7528\u9ad8\u6548\u53ef\u9760\u7684\u6d88\u606f\u4f20\u9012\u673a\u5236\u8fdb\u884c\u5e73\u53f0\u65e0\u5173\u7684\u6570\u636e\u4ea4\u6d41\uff0c\u5e76\u57fa\u4e8e\u6570\u636e\u901a\u4fe1\u6765\u8fdb\u884c\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u96c6\u6210\u3002\n1.2 MQ\u6709\u54ea\u4e9b\n\u5f53\u4eca\u5e02\u9762\u4e0a\u6709\u5f88\u591a\u4e3b\u6d41\u7684\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5982\u8001\u724c\u7684ActiveMQ\u3001RabbitMQ\uff0c\u7099\u624b\u53ef\u70ed\u7684Kafka\uff0c\u963f\u91cc\u5df4\u5df4\u81ea\u4e3b\u5f00\u53d1RocketMQ\u7b49\u3002\n1.3 \u4e0d\u540cMQ\u7279\u70b9\n\n# 1.ActiveMQ\n        ActiveMQ \u662fApache\u51fa\u54c1\uff0c\u6700\u6d41\u884c\u7684\uff0c\u80fd\u529b\u5f3a\u52b2\u7684\u5f00\u6e90\u6d88\u606f\u603b\u7ebf\u3002\u5b83\u662f\u4e00\u4e2a\u5b8c\u5168\u652f\u6301JMS\u89c4\u8303\u7684\u7684\u6d88\u606f\u4e2d\u95f4\u4ef6\u3002\u4e30\u5bcc\u7684API,\u591a\u79cd\u96c6\u7fa4\u67b6\u6784\u6a21\u5f0f\u8ba9ActiveMQ\u5728\u4e1a\u754c\u6210\u4e3a\u8001\u724c\u7684\u6d88\u606f\u4e2d\u95f4\u4ef6,\u5728\u4e2d\u5c0f\u578b\u4f01\u4e1a\u9887\u53d7\u6b22\u8fce!\n\n# 2.Kafka\n        Kafka\u662fLinkedIn\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u53d1\u5e03-\u8ba2\u9605\u6d88\u606f\u7cfb\u7edf\uff0c\u76ee\u524d\u5f52\u5c5e\u4e8eApache\u9876\u7ea7\u9879\u76ee\u3002Kafka\u4e3b\u8981\u7279\u70b9\u662f\u57fa\u4e8ePull\u7684\u6a21\u5f0f\u6765\u5904\u7406\u6d88\u606f\u6d88\u8d39\uff0c\n        \u8ffd\u6c42\u9ad8\u541e\u5410\u91cf\uff0c\u4e00\u5f00\u59cb\u7684\u76ee\u7684\u5c31\u662f\u7528\u4e8e\u65e5\u5fd7\u6536\u96c6\u548c\u4f20\u8f93\u30020.8\u7248\u672c\u5f00\u59cb\u652f\u6301\u590d\u5236\uff0c\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u5bf9\u6d88\u606f\u7684\u91cd\u590d\u3001\u4e22\u5931\u3001\u9519\u8bef\u6ca1\u6709\u4e25\u683c\u8981\u6c42\uff0c\n        \u9002\u5408\u4ea7\u751f\u5927\u91cf\u6570\u636e\u7684\u4e92\u8054\u7f51\u670d\u52a1\u7684\u6570\u636e\u6536\u96c6\u4e1a\u52a1\u3002\n\n# 3.RocketMQ\n        RocketMQ\u662f\u963f\u91cc\u5f00\u6e90\u7684\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5b83\u662f\u7eafJava\u5f00\u53d1\uff0c\u5177\u6709\u9ad8\u541e\u5410\u91cf\u3001\u9ad8\u53ef\u7528\u6027\u3001\u9002\u5408\u5927\u89c4\u6a21\u5206\u5e03\u5f0f\u7cfb\u7edf\u5e94\u7528\u7684\u7279\u70b9\u3002RocketMQ\u601d\u8def\u8d77\n        \u6e90\u4e8eKafka\uff0c\u4f46\u5e76\u4e0d\u662fKafka\u7684\u4e00\u4e2aCopy\uff0c\u5b83\u5bf9\u6d88\u606f\u7684\u53ef\u9760\u4f20\u8f93\u53ca\u4e8b\u52a1\u6027\u505a\u4e86\u4f18\u5316\uff0c\u76ee\u524d\u5728\u963f\u91cc\u96c6\u56e2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4ea4\u6613\u3001\u5145\u503c\u3001\u6d41\u8ba1\u7b97\u3001\u6d88\n        \u606f\u63a8\u9001\u3001\u65e5\u5fd7\u6d41\u5f0f\u5904\u7406\u3001binglog\u5206\u53d1\u7b49\u573a\u666f\u3002\n\n# 4.RabbitMQ\n        RabbitMQ\u662f\u4f7f\u7528Erlang\u8bed\u8a00\u5f00\u53d1\u7684\u5f00\u6e90\u6d88\u606f\u961f\u5217\u7cfb\u7edf\uff0c\u57fa\u4e8eAMQP\u534f\u8bae\u6765\u5b9e\u73b0\u3002AMQP\u7684\u4e3b\u8981\u7279\u5f81\u662f\u9762\u5411\u6d88\u606f\u3001\u961f\u5217\u3001\u8def\u7531\uff08\u5305\u62ec\u70b9\u5bf9\u70b9\u548c\n        \u53d1\u5e03/\u8ba2\u9605\uff09\u3001\u53ef\u9760\u6027\u3001\u5b89\u5168\u3002AMQP\u534f\u8bae\u66f4\u591a\u7528\u5728\u4f01\u4e1a\u7cfb\u7edf\u5185\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u3001\u7a33\u5b9a\u6027\u548c\u53ef\u9760\u6027\u8981\u6c42\u5f88\u9ad8\u7684\u573a\u666f\uff0c\u5bf9\u6027\u80fd\u548c\u541e\u5410\u91cf\u7684\u8981\u6c42\u8fd8\u5728\n        \u5176\u6b21\u3002\nRabbitMQ\u6bd4Kafka\u53ef\u9760\uff0cKafka\u66f4\u9002\u5408IO\u9ad8\u541e\u5410\u7684\u5904\u7406\uff0c\u4e00\u822c\u5e94\u7528\u5728\u5927\u6570\u636e\u65e5\u5fd7\u5904\u7406\u6216\u5bf9\u5b9e\u65f6\u6027\uff08\u5c11\u91cf\u5ef6\u8fdf\uff09\uff0c\u53ef\u9760\u6027\uff08\u5c11\u91cf\u4e22\u6570\u636e\uff09\u8981\u6c42\u7a0d\u4f4e\u7684\u573a\u666f\u4f7f\u7528\uff0c\u6bd4\u5982ELK\u65e5\u5fd7\u6536\u96c6\u3002\n\n\n2.RabbitMQ \u7684\u5f15\u8a00\n2.1 RabbitMQ\n\u57fa\u4e8eAMQP\u534f\u8bae\uff0cerlang\u8bed\u8a00\u5f00\u53d1\uff0c\u662f\u90e8\u7f72\u6700\u5e7f\u6cdb\u7684\u5f00\u6e90\u6d88\u606f\u4e2d\u95f4\u4ef6,\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5f00\u6e90\u6d88\u606f\u4e2d\u95f4\u4ef6\u4e4b\u4e00\u3002\n\nimage-20190925215603036\n\u5b98\u7f51: https://www.rabbitmq.com/\n\u5b98\u65b9\u6559\u7a0b: https://www.rabbitmq.com/#getstarted\n\n # AMQP \u534f\u8bae\n        AMQP\uff08advanced message queuing protocol\uff09`\u57282003\u5e74\u65f6\u88ab\u63d0\u51fa\uff0c\u6700\u65e9\u7528\u4e8e\u89e3\u51b3\u91d1\u878d\u9886\u4e0d\u540c\u5e73\u53f0\u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u4ea4\u4e92\u95ee\u9898\u3002\u987e\u540d\u601d\u4e49\uff0cAMQP\u662f\u4e00\u79cd\u534f\u8bae\uff0c\u66f4\u51c6\u786e\u7684\u8bf4\u662f\u4e00\u79cdbinary wire-level protocol\uff08\u94fe\u63a5\u534f\u8bae\uff09\u3002\u8fd9\u662f\u5176\u548cJMS\u7684\u672c\u8d28\u5dee\u522b\uff0cAMQP\u4e0d\u4eceAPI\u5c42\u8fdb\u884c\u9650\u5b9a\uff0c\u800c\u662f\u76f4\u63a5\u5b9a\u4e49\u7f51\u7edc\u4ea4\u6362\u7684\u6570\u636e\u683c\u5f0f\u3002\u8fd9\u4f7f\u5f97\u5b9e\u73b0\u4e86AMQP\u7684provider\u5929\u7136\u6027\u5c31\u662f\u8de8\u5e73\u53f0\u7684\u3002\u4ee5\u4e0b\u662fAMQP\u534f\u8bae\u6a21\u578b:\n\n2.2 RabbitMQ \u7684\u5b89\u88c5\n2.2.1 \u4e0b\u8f7d\n\u5b98\u7f51\u4e0b\u8f7d\u5730\u5740: https://www.rabbitmq.com/download.html![image-20190925220115235](..\\static\\\u7b14\u8bb0\u56fe\u7247\\RibbitMQ\\image-20190925220115235.png)\n\u6700\u65b0\u7248\u672c: 3.7.18\n\n2.2.2 \u4e0b\u8f7d\u7684\u5b89\u88c5\u5305image-20190925220343521\n\u6ce8\u610f:\u8fd9\u91cc\u7684\u5b89\u88c5\u5305\u662fcentos7\u5b89\u88c5\u7684\u5305\n\n2.2.3 \u5b89\u88c5\u6b65\u9aa4\n\n# 1.\u5c06rabbitmq\u5b89\u88c5\u5305\u4e0a\u4f20\u5230linux\u7cfb\u7edf\u4e2d\n    erlang-22.0.7-1.el7.x86_64.rpm\n    rabbitmq-server-3.7.18-1.el7.noarch.rpm\n\n# 2.\u5b89\u88c5Erlang\u4f9d\u8d56\u5305\n    rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm\n\n# 3.\u5b89\u88c5RabbitMQ\u5b89\u88c5\u5305(\u9700\u8981\u8054\u7f51)\n    yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm\n        \u6ce8\u610f:\u9ed8\u8ba4\u5b89\u88c5\u5b8c\u6210\u540e\u914d\u7f6e\u6587\u4ef6\u6a21\u677f\u5728:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example\u76ee\u5f55\u4e2d,\u9700\u8981   \n                \u5c06\u914d\u7f6e\u6587\u4ef6\u590d\u5236\u5230/etc/rabbitmq/\u76ee\u5f55\u4e2d,\u5e76\u4fee\u6539\u540d\u79f0\u4e3arabbitmq.config\n# 4.\u590d\u5236\u914d\u7f6e\u6587\u4ef6\n    cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config\n\n# 5.\u67e5\u770b\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\n    ls /etc/rabbitmq/rabbitmq.config\n\n# 6.\u4fee\u6539\u914d\u7f6e\u6587\u4ef6(\u53c2\u89c1\u4e0b\u56fe:)\n    vim /etc/rabbitmq/rabbitmq.config\nimage-20190925222230260\n\u5c06\u4e0a\u56fe\u4e2d\u914d\u7f6e\u6587\u4ef6\u4e2d\u7ea2\u8272\u90e8\u5206\u53bb\u6389%%,\u4ee5\u53ca\u6700\u540e\u7684,\u9017\u53f7 \u4fee\u6539\u4e3a\u4e0b\u56fe:\nimage-20190925222329200\n\n# 7.\u6267\u884c\u5982\u4e0b\u547d\u4ee4,\u542f\u52a8rabbitmq\u4e2d\u7684\u63d2\u4ef6\u7ba1\u7406\n    rabbitmq-plugins enable rabbitmq_management\n\n    \u51fa\u73b0\u5982\u4e0b\u8bf4\u660e:\n        Enabling plugins on node rabbit@localhost:\n    rabbitmq_management\n    The following plugins have been configured:\n      rabbitmq_management\n      rabbitmq_management_agent\n      rabbitmq_web_dispatch\n    Applying plugin configuration to rabbit@localhost...\n    The following plugins have been enabled:\n      rabbitmq_management\n      rabbitmq_management_agent\n      rabbitmq_web_dispatch\n\n    set 3 plugins.\n    Offline change; changes will take effect at broker restart.\n\n# 8.\u542f\u52a8RabbitMQ\u7684\u670d\u52a1\n    systemctl start rabbitmq-server\n    systemctl restart rabbitmq-server\n    systemctl stop rabbitmq-server\n\n\n# 9.\u67e5\u770b\u670d\u52a1\u72b6\u6001(\u89c1\u4e0b\u56fe:)\n    systemctl status rabbitmq-server\n  \u25cf rabbitmq-server.service - RabbitMQ broker\n     Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)\n     Active: active (running) since \u4e09 2019-09-25 22:26:35 CST; 7s ago\n   Main PID: 2904 (beam.smp)\n     Status: \"Initialized\"\n     CGroup: /system.slice/rabbitmq-server.service\n             \u251c\u25002904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -\n             MBlmbcs...\n             \u251c\u25003220 erl_child_setup 32768\n             \u251c\u25003243 inet_gethost 4\n             \u2514\u25003244 inet_gethost 4\n      .........\nimage-20190925222743776\n\n# 10.\u5173\u95ed\u9632\u706b\u5899\u670d\u52a1\n    systemctl disable firewalld\n    Removed syamlink /etc/systemd/system/multi-user.target.wants/firewalld.service.\n    Removed syamlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.\n    systemctl stop firewalld   \n\n# 11.\u8bbf\u95eeweb\u7ba1\u7406\u754c\u9762\n    http://10.15.0.8:15672/\nimage-20190926194738708\n\n# 12.\u767b\u5f55\u7ba1\u7406\u754c\u9762\n    username:  guest\n    password:  guest\nimage-20190926194954822\n\n3. RabiitMQ \u914d\u7f6e\n3.1RabbitMQ \u7ba1\u7406\u547d\u4ee4\u884c\n\n# 1.\u670d\u52a1\u542f\u52a8\u76f8\u5173\n    systemctl start|restart|stop|status rabbitmq-server\n\n# 2.\u7ba1\u7406\u547d\u4ee4\u884c  \u7528\u6765\u5728\u4e0d\u4f7f\u7528web\u7ba1\u7406\u754c\u9762\u60c5\u51b5\u4e0b\u547d\u4ee4\u64cd\u4f5cRabbitMQ\n    rabbitmqctl  help  \u53ef\u4ee5\u67e5\u770b\u66f4\u591a\u547d\u4ee4\n\n# 3.\u63d2\u4ef6\u7ba1\u7406\u547d\u4ee4\u884c\n    rabbitmq-plugins enable|list|disable\n3.2 web\u7ba1\u7406\u754c\u9762\u4ecb\u7ecd\n3.2.1 overview\u6982\u89c8\nimage-20191126162026720\n\nconnections\uff1a\u65e0\u8bba\u751f\u4ea7\u8005\u8fd8\u662f\u6d88\u8d39\u8005\uff0c\u90fd\u9700\u8981\u4e0eRabbitMQ\u5efa\u7acb\u8fde\u63a5\u540e\u624d\u53ef\u4ee5\u5b8c\u6210\u6d88\u606f\u7684\u751f\u4ea7\u548c\u6d88\u8d39\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u67e5\u770b\u8fde\u63a5\u60c5\u51b5\n\nchannels\uff1a\u901a\u9053\uff0c\u5efa\u7acb\u8fde\u63a5\u540e\uff0c\u4f1a\u5f62\u6210\u901a\u9053\uff0c\u6d88\u606f\u7684\u6295\u9012\u83b7\u53d6\u4f9d\u8d56\u901a\u9053\u3002\n\nExchanges\uff1a\u4ea4\u6362\u673a\uff0c\u7528\u6765\u5b9e\u73b0\u6d88\u606f\u7684\u8def\u7531\n\nQueues\uff1a\u961f\u5217\uff0c\u5373\u6d88\u606f\u961f\u5217\uff0c\u6d88\u606f\u5b58\u653e\u5728\u961f\u5217\u4e2d\uff0c\u7b49\u5f85\u6d88\u8d39\uff0c\u6d88\u8d39\u540e\u88ab\u79fb\u9664\u961f\u5217\u3002\n\n\n3.2.2 Admin\u7528\u6237\u548c\u865a\u62df\u4e3b\u673a\u7ba1\u7406\n1. \u6dfb\u52a0\u7528\u6237\nimage-20191126162617280\n\u4e0a\u9762\u7684Tags\u9009\u9879\uff0c\u5176\u5b9e\u662f\u6307\u5b9a\u7528\u6237\u7684\u89d2\u8272\uff0c\u53ef\u9009\u7684\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a\n\n\u8d85\u7ea7\u7ba1\u7406\u5458(administrator)\n\u53ef\u767b\u9646\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u53ef\u67e5\u770b\u6240\u6709\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u7528\u6237\uff0c\u7b56\u7565(policy)\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u76d1\u63a7\u8005(monitoring)\n\u53ef\u767b\u9646\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u540c\u65f6\u53ef\u4ee5\u67e5\u770brabbitmq\u8282\u70b9\u7684\u76f8\u5173\u4fe1\u606f(\u8fdb\u7a0b\u6570\uff0c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\u7b49)\n\n\u7b56\u7565\u5236\u5b9a\u8005(policymaker)\n\u53ef\u767b\u9646\u7ba1\u7406\u63a7\u5236\u53f0, \u540c\u65f6\u53ef\u4ee5\u5bf9policy\u8fdb\u884c\u7ba1\u7406\u3002\u4f46\u65e0\u6cd5\u67e5\u770b\u8282\u70b9\u7684\u76f8\u5173\u4fe1\u606f(\u4e0a\u56fe\u7ea2\u6846\u6807\u8bc6\u7684\u90e8\u5206)\u3002\n\n\u666e\u901a\u7ba1\u7406\u8005(management)\n\u4ec5\u53ef\u767b\u9646\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u65e0\u6cd5\u770b\u5230\u8282\u70b9\u4fe1\u606f\uff0c\u4e5f\u65e0\u6cd5\u5bf9\u7b56\u7565\u8fdb\u884c\u7ba1\u7406\u3002\n\n\u5176\u4ed6\n\u65e0\u6cd5\u767b\u9646\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u901a\u5e38\u5c31\u662f\u666e\u901a\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u3002\n\n\n2. \u521b\u5efa\u865a\u62df\u4e3b\u673a\n\n# \u865a\u62df\u4e3b\u673a\n    \u4e3a\u4e86\u8ba9\u5404\u4e2a\u7528\u6237\u53ef\u4ee5\u4e92\u4e0d\u5e72\u6270\u7684\u5de5\u4f5c\uff0cRabbitMQ\u6dfb\u52a0\u4e86\u865a\u62df\u4e3b\u673a\uff08Virtual Hosts\uff09\u7684\u6982\u5ff5\u3002\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8bbf\u95ee\u8def\u5f84\uff0c\u4e0d\u540c\u7528\u6237\u4f7f\u7528\u4e0d\u540c\u8def\u5f84\uff0c\u5404\u81ea\u6709\u81ea\u5df1\u7684\u961f\u5217\u3001\u4ea4\u6362\u673a\uff0c\u4e92\u76f8\u4e0d\u4f1a\u5f71\u54cd\u3002\nimage-20191126163023153\n3. \u7ed1\u5b9a\u865a\u62df\u4e3b\u673a\u548c\u7528\u6237\n\u521b\u5efa\u597d\u865a\u62df\u4e3b\u673a\uff0c\u6211\u4eec\u8fd8\u8981\u7ed9\u7528\u6237\u6dfb\u52a0\u8bbf\u95ee\u6743\u9650\uff1a\n\u70b9\u51fb\u6dfb\u52a0\u597d\u7684\u865a\u62df\u4e3b\u673a\uff1a\nimage-20191126163506795\n\u8fdb\u5165\u865a\u62df\u673a\u8bbe\u7f6e\u754c\u9762:\nimage-20191126163631889\n\n4.RabbitMQ \u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\n4.0 AMQP\u534f\u8bae\u7684\u56de\u987e\nimage-20200312140114784\n4.1 RabbitMQ\u652f\u6301\u7684\u6d88\u606f\u6a21\u578b\nimage-20191126165434784\nimage-20191126165459282\n4.2 \u5f15\u5165\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;\n    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;\n    &lt;version&gt;5.7.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n4.3 \u7b2c\u4e00\u79cd\u6a21\u578b(\u76f4\u8fde)\n\n\u5728\u4e0a\u56fe\u7684\u6a21\u578b\u4e2d\uff0c\u6709\u4ee5\u4e0b\u6982\u5ff5\uff1a\n\nP\uff1a\u751f\u4ea7\u8005\uff0c\u4e5f\u5c31\u662f\u8981\u53d1\u9001\u6d88\u606f\u7684\u7a0b\u5e8f\nC\uff1a\u6d88\u8d39\u8005\uff1a\u6d88\u606f\u7684\u63a5\u53d7\u8005\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85\u6d88\u606f\u5230\u6765\u3002\nqueue\uff1a\u6d88\u606f\u961f\u5217\uff0c\u56fe\u4e2d\u7ea2\u8272\u90e8\u5206\u3002\u7c7b\u4f3c\u4e00\u4e2a\u90ae\u7bb1\uff0c\u53ef\u4ee5\u7f13\u5b58\u6d88\u606f\uff1b\u751f\u4ea7\u8005\u5411\u5176\u4e2d\u6295\u9012\u6d88\u606f\uff0c\u6d88\u8d39\u8005\u4ece\u5176\u4e2d\u53d6\u51fa\u6d88\u606f\u3002\n\n1. \u5f00\u53d1\u751f\u4ea7\u8005\n//\u521b\u5efa\u8fde\u63a5\u5de5\u5382\n  ConnectionFactory connectionFactory = new ConnectionFactory();\n  //\u8bbe\u7f6e\u8fde\u63a5rabbitmq\u4e3b\u673a\n  connectionFactory.setHost(&quot;192.168.123.128&quot;);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7aef\u53e3\u53f7\n  connectionFactory.setPort(5672);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7684\u865a\u62df\u4e3b\u673a(\u81ea\u5df1\u521b\u5efa\u7684)\n  connectionFactory.setUsername(&quot;ems&quot;);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7684\u865a\u62df\u4e3b\u673a\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\n  connectionFactory.setPassword(&quot;123&quot;);\n  connectionFactory.setVirtualHost(&quot;/ems&quot;);\n  //\u521b\u5efa\u8fde\u63a5\u5bf9\u8c61\n  Connection connection = connectionFactory.newConnection();\n  //\u521b\u5efa\u901a\u9053\n  Channel channel = connection.createChannel();\n  //\u5c06\u901a\u9053\u7ed1\u5b9a\u5230\u961f\u5217\u4e0a\n  //\u53c2\u65701 queue:\u961f\u5217\u540d\u79f0(\u5982\u679c\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa) \u53c2\u65702 durable:\u6301\u4e45\u5316\u961f\u5217\uff0c\u5219\u4e3atrue\u3002\u53c2\u65703 exclusive:\u72ec\u5360\u961f\u5217\uff0c\u5219\u4e3atrue\u3002\u53c2\u65704 autoDelete:\u662f\u5426\u5728\u6d88\u8d39\u5b8c\u6210\u540e\u81ea\u52a8\u5220\u9664\u961f\u5217\uff0c\u662f\u5219\u4e3atrue\u3002\u53c2\u65705 arguments:\u961f\u5217\u7684\u5176\u4ed6\u9644\u4ef6\u53c2\u6570\n  channel.queueDeclare(&quot;hello&quot;,true,false,false,null);\n  //\u53d1\u5e03\u6d88\u606f(\u6b64\u65f6\u6ca1\u6709\u4f7f\u7528\u4ea4\u6362\u673a)\n  //\u53c2\u65701: \u4ea4\u6362\u673a\u540d\u79f0 \u53c2\u65702:\u961f\u5217\u540d\u79f0 \u53c2\u65703 :\u4f20\u9012\u6d88\u606f\u989d\u5916\u8bbe\u7f6e \u53c2\u65704 :\u6d88\u606f\u7684\u5177\u4f53\u5185\u5bb9\n  channel.basicPublish(&quot;&quot;,&quot;hello&quot;, null,&quot;hello rabbitmq&quot;.getBytes());\n  channel.close();\n  connection.close();\n\n2. \u5f00\u53d1\u6d88\u8d39\u8005\n//\u521b\u5efa\u8fde\u63a5\u5de5\u5382\n  ConnectionFactory connectionFactory = new ConnectionFactory();\n  //\u8bbe\u7f6e\u8fde\u63a5rabbitmq\u4e3b\u673a\n  connectionFactory.setHost(&quot;192.168.123.128&quot;);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7aef\u53e3\u53f7\n  connectionFactory.setPort(5672);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7684\u865a\u62df\u4e3b\u673a(\u81ea\u5df1\u521b\u5efa\u7684)\n  connectionFactory.setUsername(&quot;ems&quot;);\n  //\u8bbe\u7f6e\u8fde\u63a5\u7684\u865a\u62df\u4e3b\u673a\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\n  connectionFactory.setPassword(&quot;123&quot;);\n  connectionFactory.setVirtualHost(&quot;/ems&quot;);\n  //\u521b\u5efa\u8fde\u63a5\u5bf9\u8c61\n  Connection connection = connectionFactory.newConnection();\n  //\u521b\u5efa\u901a\u9053\n  Channel channel = connection.createChannel();\n  //\u5c06\u901a\u9053\u7ed1\u5b9a\u5230\u961f\u5217\u4e0a\n  channel.queueDeclare(&quot;hello&quot;, true, false, false, null);\n  //\u6d88\u8d39\u6d88\u606f\n  //\u53c2\u65701:queue\u2014\u961f\u5217\u7684\u540d\u79f0\n  //\u53c2\u65702:autoAck\u2014\u5f00\u542f\u6d88\u606f\u7684\u81ea\u52a8\u786e\u8ba4\u673a\u5236\n  //\u53c2\u65703:callback\u2014\u6d88\u8d39\u65f6\u56de\u8c03\u63a5\u53e3\n  channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel){\n    @Override\n    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n      System.out.println(new String(body));\n    }\n  });\n\n3. \u53c2\u6570\u8bf4\u660e\nchannel.queueDeclare(&quot;hello&quot;,true,false,false,null);\n  &#39;\u53c2\u65701&#39;:\u7528\u6765\u58f0\u660e\u901a\u9053\u5bf9\u5e94\u7684\u961f\u5217(\u5982\u679c\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa)\n  &#39;\u53c2\u65702&#39;:\u7528\u6765\u6307\u5b9a\u662f\u5426\u6301\u4e45\u5316\u961f\u5217\n  &#39;\u53c2\u65703&#39;:\u7528\u6765\u6307\u5b9a\u662f\u5426\u72ec\u5360\u961f\u5217\n  &#39;\u53c2\u65704&#39;:\u7528\u6765\u6307\u5b9a\u662f\u5426\u81ea\u52a8\u5220\u9664\u961f\u5217\n  &#39;\u53c2\u65705&#39;:\u5bf9\u961f\u5217\u7684\u989d\u5916\u914d\u7f6e\n  //\u6d88\u8d39\u8005\u9700\u8981\u548c\u751f\u4ea7\u8005\u7ed1\u5b9a\u4e00\u6837\u7684\u961f\u5217\u4e0a\u624d\u80fd\u8fdb\u884c\n\n\n4.4 \u7b2c\u4e8c\u79cd\u6a21\u578b(work quene)\nWork queues\uff0c\u4e5f\u88ab\u79f0\u4e3a\uff08Task queues\uff09\uff0c\u4efb\u52a1\u6a21\u578b\u3002\u5f53\u6d88\u606f\u5904\u7406\u6bd4\u8f83\u8017\u65f6\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u751f\u4ea7\u6d88\u606f\u7684\u901f\u5ea6\u4f1a\u8fdc\u8fdc\u5927\u4e8e\u6d88\u606f\u7684\u6d88\u8d39\u901f\u5ea6\u3002\u957f\u6b64\u4ee5\u5f80\uff0c\u6d88\u606f\u5c31\u4f1a\u5806\u79ef\u8d8a\u6765\u8d8a\u591a\uff0c\u65e0\u6cd5\u53ca\u65f6\u5904\u7406\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528work \u6a21\u578b\uff1a\u8ba9\u591a\u4e2a\u6d88\u8d39\u8005\u7ed1\u5b9a\u5230\u4e00\u4e2a\u961f\u5217\uff0c\u5171\u540c\u6d88\u8d39\u961f\u5217\u4e2d\u7684\u6d88\u606f\u3002\u961f\u5217\u4e2d\u7684\u6d88\u606f\u4e00\u65e6\u6d88\u8d39\uff0c\u5c31\u4f1a\u6d88\u5931\uff0c\u56e0\u6b64\u4efb\u52a1\u662f\u4e0d\u4f1a\u88ab\u91cd\u590d\u6267\u884c\u7684\u3002\nimage-20200314221002008\n\u89d2\u8272\uff1a\n\nP\uff1a\u751f\u4ea7\u8005\uff1a\u4efb\u52a1\u7684\u53d1\u5e03\u8005\nC1\uff1a\u6d88\u8d39\u8005-1\uff0c\u9886\u53d6\u4efb\u52a1\u5e76\u5b8c\u6210\u4efb\u52a1\uff0c\u5047\u8bbe\u5b8c\u6210\u901f\u5ea6\u8f83\u6162\nC2\uff1a\u6d88\u8d39\u8005-2\uff1a\u9886\u53d6\u4efb\u52a1\u5e76\u5b8c\u6210\u4efb\u52a1\uff0c\u5047\u8bbe\u5b8c\u6210\u901f\u5ea6\u8f83\u5feb\n\n1. \u5f00\u53d1\u751f\u4ea7\u8005\nchannel.queueDeclare(&quot;hello&quot;, true, false, false, null);\nfor (int i = 0; i &lt; 10; i++) {\n  channel.basicPublish(&quot;&quot;, &quot;hello&quot;, null, (i+&quot;====&gt;:\u6211\u662f\u6d88\u606f&quot;).getBytes());\n}\n\n2.\u5f00\u53d1\u6d88\u8d39\u8005-1\nchannel.queueDeclare(&quot;hello&quot;,true,false,false,null);\nchannel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80051: &quot;+new String(body));\n  }\n});\n\n3.\u5f00\u53d1\u6d88\u8d39\u8005-2\nchannel.queueDeclare(&quot;hello&quot;,true,false,false,null);\nchannel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    try {\n      Thread.sleep(1000);   //\u5904\u7406\u6d88\u606f\u6bd4\u8f83\u6162 \u4e00\u79d2\u5904\u7406\u4e00\u4e2a\u6d88\u606f\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    System.out.println(&quot;\u6d88\u8d39\u80052: &quot;+new String(body));  \n  }\n});\n\n4.\u6d4b\u8bd5\u7ed3\u679c\nimage-20200314223242058\nimage-20200314223302207\n\u603b\u7ed3:\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRabbitMQ\u5c06\u6309\u987a\u5e8f\u5c06\u6bcf\u4e2a\u6d88\u606f\u53d1\u9001\u7ed9\u4e0b\u4e00\u4e2a\u4f7f\u7528\u8005\u3002\u5e73\u5747\u800c\u8a00\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u90fd\u4f1a\u6536\u5230\u76f8\u540c\u6570\u91cf\u7684\u6d88\u606f\u3002\u8fd9\u79cd\u5206\u53d1\u6d88\u606f\u7684\u65b9\u5f0f\u79f0\u4e3a\u5faa\u73af\u3002\u5b98\u65b9\u6587\u6863\n\n5.\u6d88\u606f\u81ea\u52a8\u786e\u8ba4\u673a\u5236\nDoing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion. In this case, if you kill a worker we will lose the message it was just processing. We'll also lose all the messages that were dispatched to this particular worker but were not yet handled.\nBut we don't want to lose any tasks. If a worker dies, we'd like the task to be delivered to another worker.\n\nchannel.basicQos(1);//\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u6761\u672a\u786e\u8ba4\u7684\u6d88\u606f\n//\u53c2\u65702:\u5173\u95ed\u81ea\u52a8\u786e\u8ba4\u6d88\u606f\nchannel.basicConsume(&quot;hello&quot;,false,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80051: &quot;+new String(body));\n    channel.basicAck(envelope.getDeliveryTag(),false);//\u624b\u52a8\u786e\u8ba4\u6d88\u606f\n  }\n});\n\n\n\u8bbe\u7f6e\u901a\u9053\u4e00\u6b21\u53ea\u80fd\u6d88\u8d39\u4e00\u4e2a\u6d88\u606f\n\n\u5173\u95ed\u6d88\u606f\u7684\u81ea\u52a8\u786e\u8ba4,\u5f00\u542f\u624b\u52a8\u786e\u8ba4\u6d88\u606f\nimage-20200314230412178\nimage-20200314230423280\n\n\n\n4.5 \u7b2c\u4e09\u79cd\u6a21\u578b(fanout)\nfanout \u6247\u51fa \u4e5f\u79f0\u4e3a\u5e7f\u64ad\nimage-20191126213115873\n\u5728\u5e7f\u64ad\u6a21\u5f0f\u4e0b\uff0c\u6d88\u606f\u53d1\u9001\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\n\n\u53ef\u4ee5\u6709\u591a\u4e2a\u6d88\u8d39\u8005\n\u6bcf\u4e2a\u6d88\u8d39\u8005\u6709\u81ea\u5df1\u7684queue\uff08\u961f\u5217\uff09\n\u6bcf\u4e2a\u961f\u5217\u90fd\u8981\u7ed1\u5b9a\u5230Exchange\uff08\u4ea4\u6362\u673a\uff09\n\u751f\u4ea7\u8005\u53d1\u9001\u7684\u6d88\u606f\uff0c\u53ea\u80fd\u53d1\u9001\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u6765\u51b3\u5b9a\u8981\u53d1\u7ed9\u54ea\u4e2a\u961f\u5217\uff0c\u751f\u4ea7\u8005\u65e0\u6cd5\u51b3\u5b9a\u3002\n\u4ea4\u6362\u673a\u628a\u6d88\u606f\u53d1\u9001\u7ed9\u7ed1\u5b9a\u8fc7\u7684\u6240\u6709\u961f\u5217\n\u961f\u5217\u7684\u6d88\u8d39\u8005\u90fd\u80fd\u62ff\u5230\u6d88\u606f\u3002\u5b9e\u73b0\u4e00\u6761\u6d88\u606f\u88ab\u591a\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\n\n1. \u5f00\u53d1\u751f\u4ea7\u8005\n//\u58f0\u660e\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);//\u5e7f\u64ad \u4e00\u6761\u6d88\u606f\u591a\u4e2a\u6d88\u8d39\u8005\u540c\u65f6\u6d88\u8d39\n//\u53d1\u5e03\u6d88\u606f\nchannel.basicPublish(&quot;logs&quot;,&quot;&quot;,null,&quot;hello&quot;.getBytes());\n\n2. \u5f00\u53d1\u6d88\u8d39\u8005-1\n//\u7ed1\u5b9a\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u5c06\u4e34\u65f6\u961f\u5217\u7ed1\u5b9aexchange\nchannel.queueBind(queue,&quot;logs&quot;,&quot;&quot;);\n//\u5904\u7406\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80051: &quot;+new String(body));\n  }\n});\n\n3. \u5f00\u53d1\u6d88\u8d39\u8005-2\n//\u7ed1\u5b9a\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u5c06\u4e34\u65f6\u961f\u5217\u7ed1\u5b9aexchange\nchannel.queueBind(queue,&quot;logs&quot;,&quot;&quot;);\n//\u5904\u7406\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80052: &quot;+new String(body));\n  }\n});\n\n4.\u5f00\u53d1\u6d88\u8d39\u8005-3\n//\u7ed1\u5b9a\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u5c06\u4e34\u65f6\u961f\u5217\u7ed1\u5b9aexchange\nchannel.queueBind(queue,&quot;logs&quot;,&quot;&quot;);\n//\u5904\u7406\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80053: &quot;+new String(body));\n  }\n});\n\n5. \u6d4b\u8bd5\u7ed3\u679c\nimage-20200315180653207\nimage-20200315180708489\nimage-20200315180728035\n\n4.6 \u7b2c\u56db\u79cd\u6a21\u578b(Routing)\n4.6.1 Routing \u4e4b\u8ba2\u9605\u6a21\u578b-Direct(\u76f4\u8fde)\n\u5728Fanout\u6a21\u5f0f\u4e2d\uff0c\u4e00\u6761\u6d88\u606f\uff0c\u4f1a\u88ab\u6240\u6709\u8ba2\u9605\u7684\u961f\u5217\u90fd\u6d88\u8d39\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4e0d\u540c\u7684\u6d88\u606f\u88ab\u4e0d\u540c\u7684\u961f\u5217\u6d88\u8d39\u3002\u8fd9\u65f6\u5c31\u8981\u7528\u5230Direct\u7c7b\u578b\u7684Exchange\u3002\n\u5728Direct\u6a21\u578b\u4e0b\uff1a\n\n\u961f\u5217\u4e0e\u4ea4\u6362\u673a\u7684\u7ed1\u5b9a\uff0c\u4e0d\u80fd\u662f\u4efb\u610f\u7ed1\u5b9a\u4e86\uff0c\u800c\u662f\u8981\u6307\u5b9a\u4e00\u4e2aRoutingKey\uff08\u8def\u7531key\uff09\n\u6d88\u606f\u7684\u53d1\u9001\u65b9\u5728 \u5411 Exchange\u53d1\u9001\u6d88\u606f\u65f6\uff0c\u4e5f\u5fc5\u987b\u6307\u5b9a\u6d88\u606f\u7684 RoutingKey\u3002\nExchange\u4e0d\u518d\u628a\u6d88\u606f\u4ea4\u7ed9\u6bcf\u4e00\u4e2a\u7ed1\u5b9a\u7684\u961f\u5217\uff0c\u800c\u662f\u6839\u636e\u6d88\u606f\u7684Routing Key\u8fdb\u884c\u5224\u65ad\uff0c\u53ea\u6709\u961f\u5217\u7684Routingkey\u4e0e\u6d88\u606f\u7684 Routing key\u5b8c\u5168\u4e00\u81f4\uff0c\u624d\u4f1a\u63a5\u6536\u5230\u6d88\u606f\n\n\u6d41\u7a0b:\nimage-20191126220145375\n\u56fe\u89e3\uff1a\n\nP\uff1a\u751f\u4ea7\u8005\uff0c\u5411Exchange\u53d1\u9001\u6d88\u606f\uff0c\u53d1\u9001\u6d88\u606f\u65f6\uff0c\u4f1a\u6307\u5b9a\u4e00\u4e2arouting key\u3002\nX\uff1aExchange\uff08\u4ea4\u6362\u673a\uff09\uff0c\u63a5\u6536\u751f\u4ea7\u8005\u7684\u6d88\u606f\uff0c\u7136\u540e\u628a\u6d88\u606f\u9012\u4ea4\u7ed9 \u4e0erouting key\u5b8c\u5168\u5339\u914d\u7684\u961f\u5217\nC1\uff1a\u6d88\u8d39\u8005\uff0c\u5176\u6240\u5728\u961f\u5217\u6307\u5b9a\u4e86\u9700\u8981routing key \u4e3a error \u7684\u6d88\u606f\nC2\uff1a\u6d88\u8d39\u8005\uff0c\u5176\u6240\u5728\u961f\u5217\u6307\u5b9a\u4e86\u9700\u8981routing key \u4e3a info\u3001error\u3001warning \u7684\u6d88\u606f\n\n1. \u5f00\u53d1\u751f\u4ea7\u8005\n//\u58f0\u660e\u4ea4\u6362\u673a  \u53c2\u65701:\u4ea4\u6362\u673a\u540d\u79f0 \u53c2\u65702:\u4ea4\u6362\u673a\u7c7b\u578b \u57fa\u4e8e\u6307\u4ee4\u7684Routing key\u8f6c\u53d1\nchannel.exchangeDeclare(&quot;logs_direct&quot;,&quot;direct&quot;);\nString key = &quot;&quot;;\n//\u53d1\u5e03\u6d88\u606f\nchannel.basicPublish(&quot;logs_direct&quot;,key,null,(&quot;\u6307\u5b9a\u7684route key&quot;+key+&quot;\u7684\u6d88\u606f&quot;).getBytes());\n\n2.\u5f00\u53d1\u6d88\u8d39\u8005-1\n//\u58f0\u660e\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs_direct&quot;,&quot;direct&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u7ed1\u5b9a\u961f\u5217\u548c\u4ea4\u6362\u673a\nchannel.queueBind(queue,&quot;logs_direct&quot;,&quot;error&quot;);\nchannel.queueBind(queue,&quot;logs_direct&quot;,&quot;info&quot;);\nchannel.queueBind(queue,&quot;logs_direct&quot;,&quot;warn&quot;);\n\n//\u6d88\u8d39\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80051: &quot;+new String(body));\n  }\n});\n\n3.\u5f00\u53d1\u6d88\u8d39\u8005-2\n//\u58f0\u660e\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;logs_direct&quot;,&quot;direct&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u7ed1\u5b9a\u961f\u5217\u548c\u4ea4\u6362\u673a\nchannel.queueBind(queue,&quot;logs_direct&quot;,&quot;error&quot;);\n//\u6d88\u8d39\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80052: &quot;+new String(body));\n  }\n});\n\n4.\u6d4b\u8bd5\u751f\u4ea7\u8005\u53d1\u9001Route key\u4e3aerror\u7684\u6d88\u606f\u65f6\nimage-20200316102613933\nimage-20200316102627912\n5.\u6d4b\u8bd5\u751f\u4ea7\u8005\u53d1\u9001Route key\u4e3ainfo\u7684\u6d88\u606f\u65f6\nimage-20200316102925740\nimage-20200316102947326\n\n4.6.2 Routing \u4e4b\u8ba2\u9605\u6a21\u578b-Topic\nTopic\u7c7b\u578b\u7684Exchange\u4e0eDirect\u76f8\u6bd4\uff0c\u90fd\u662f\u53ef\u4ee5\u6839\u636eRoutingKey\u628a\u6d88\u606f\u8def\u7531\u5230\u4e0d\u540c\u7684\u961f\u5217\u3002\u53ea\u4e0d\u8fc7Topic\u7c7b\u578bExchange\u53ef\u4ee5\u8ba9\u961f\u5217\u5728\u7ed1\u5b9aRouting key \u7684\u65f6\u5019\u4f7f\u7528\u901a\u914d\u7b26\uff01\u8fd9\u79cd\u6a21\u578bRoutingkey \u4e00\u822c\u90fd\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u591a\u4e2a\u5355\u8bcd\u4e4b\u95f4\u4ee5\u201d.\u201d\u5206\u5272\uff0c\u4f8b\u5982\uff1a item.insert\nimage-20191127121900255\n```\u00a0\n\u7edf\u914d\u7b26\n\n    * (star) can substitute for exactly one word.    \u5339\u914d\u4e0d\u591a\u4e0d\u5c11\u6070\u597d1\u4e2a\u8bcd\n    # (hash) can substitute for zero or more words.  \u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u8bcd\n\n\u5982:\n\n    audit.#    \u5339\u914daudit.irs.corporate\u6216\u8005 audit.irs \u7b49\naudit.*   \u53ea\u80fd\u5339\u914d audit.irs\n\n\n\n##### 1.\u5f00\u53d1\u751f\u4ea7\u8005\n\n```java\n//\u751f\u547d\u4ea4\u6362\u673a\u548c\u4ea4\u6362\u673a\u7c7b\u578b topic \u4f7f\u7528\u52a8\u6001\u8def\u7531(\u901a\u914d\u7b26\u65b9\u5f0f)\nchannel.exchangeDeclare(\"topics\",\"topic\");\nString routekey = \"user.save\";//\u52a8\u6001\u8def\u7531key\n//\u53d1\u5e03\u6d88\u606f\nchannel.basicPublish(\"topics\",routekey,null,(\"\u8fd9\u662f\u8def\u7531\u4e2d\u7684\u52a8\u6001\u8ba2\u9605\u6a21\u578b,route key: [\"+routekey+\"]\").getBytes());\n2.\u5f00\u53d1\u6d88\u8d39\u8005-1\nRouting Key\u4e2d\u4f7f\u7528*\u901a\u914d\u7b26\u65b9\u5f0f\n//\u58f0\u660e\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;topics&quot;,&quot;topic&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u7ed1\u5b9a\u961f\u5217\u4e0e\u4ea4\u6362\u673a\u5e76\u8bbe\u7f6e\u83b7\u53d6\u4ea4\u6362\u673a\u4e2d\u52a8\u6001\u8def\u7531\nchannel.queueBind(queue,&quot;topics&quot;,&quot;user.*&quot;);\n\n//\u6d88\u8d39\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80051: &quot;+new String(body));\n  }\n});\n\n3.\u5f00\u53d1\u6d88\u8d39\u8005-2\nRouting Key\u4e2d\u4f7f\u7528#\u901a\u914d\u7b26\u65b9\u5f0f\n//\u58f0\u660e\u4ea4\u6362\u673a\nchannel.exchangeDeclare(&quot;topics&quot;,&quot;topic&quot;);\n//\u521b\u5efa\u4e34\u65f6\u961f\u5217\nString queue = channel.queueDeclare().getQueue();\n//\u7ed1\u5b9a\u961f\u5217\u4e0e\u4ea4\u6362\u673a\u5e76\u8bbe\u7f6e\u83b7\u53d6\u4ea4\u6362\u673a\u4e2d\u52a8\u6001\u8def\u7531\nchannel.queueBind(queue,&quot;topics&quot;,&quot;user.#&quot;);\n\n//\u6d88\u8d39\u6d88\u606f\nchannel.basicConsume(queue,true,new DefaultConsumer(channel){\n  @Override\n  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n    System.out.println(&quot;\u6d88\u8d39\u80052: &quot;+new String(body));\n  }\n});\n\n4.\u6d4b\u8bd5\u7ed3\u679c\nimage-20200316113935785\nimage-20200316114000459\n5. SpringBoot\u4e2d\u4f7f\u7528RabbitMQ\n5.0 \u642d\u5efa\u521d\u59cb\u73af\u5883\n1. \u5f15\u5165\u4f9d\u8d56\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n2. \u914d\u7f6e\u914d\u7f6e\u6587\u4ef6\nspring:\n  application:\n    name: springboot_rabbitmq\n  rabbitmq:\n    host: 192.168.123.128\n    port: 5672\n    username: ems\n    password: 123\n    virtual-host: /ems\n\nRabbitTemplate  \u7528\u6765\u7b80\u5316\u64cd\u4f5c     \u4f7f\u7528\u65f6\u5019\u76f4\u63a5\u5728\u9879\u76ee\u4e2d\u6ce8\u5165\u5373\u53ef\u4f7f\u7528\n5.1 \u7b2c\u4e00\u79cdhello world\u6a21\u578b\u4f7f\u7528\n\n##### \u5f00\u53d1\u751f\u4ea7\u8005\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n@Test\npublic void testHello(){\n     //\u53c2\u65701:\u961f\u5217\u540d \u53c2\u65702:\u6d88\u606f\u5bf9\u8c61\n rabbitTemplate.convertAndSend(&quot;hello&quot;, &quot;hello word&quot;);\n}\n\n\n##### \u5f00\u53d1\u6d88\u8d39\u8005\n/**\n * @author Xuxx3309\n * @Description hello word\u6a21\u5f0f\n * Queue\u6ce8\u89e3:\u53ef\u4ee5\u914d\u7f6e\u961f\u5217\u540d\u79f0\uff0c\u662f\u5426\u6301\u4e45\u5316\uff0c\u662f\u5426\u72ec\u5360,\u662f\u5426\u81ea\u52a8\u5220\u9664...\n * @create 2020-06-03 2:02\n */\n@Component(&quot;helloCustomer&quot;)\n//\u8ba9\u5f53\u524d\u6d88\u8d39\u8005\u76d1\u542c&quot;hello&quot;\u961f\u5217\n@@RabbitListener(queuesToDeclare = @Queue(name = &quot;hello&quot;, durable = &quot;true&quot;, autoDelete = &quot;false&quot;))\npublic class Customer {\n    //\u5c06\u65b9\u6cd5\u6807\u8bb0\u4e3a\u88abRabbitListener\u6ce8\u91ca\u7684\u7c7b\u4e2d\u7684Rabbit\u6d88\u606f\u4fa6\u542c\u5668\u7684\u76ee\u6807\uff0c\u65b9\u6cd5\u81ea\u5b9a\u4e49\n    @RabbitHandler\n    public void receivel(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u8005\uff1a&quot; + message);\n    }\n}\n\n\n\n5.2 \u7b2c\u4e8c\u79cdwork\u6a21\u578b\u4f7f\u7528\n\n##### \u5f00\u53d1\u751f\u4ea7\u8005\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n/**\n* Work\u6a21\u5f0f\n*/\n@Test\npublic void testWork(){\n  for (int i = 0; i &lt; 10; i++) {\n    rabbitTemplate.convertAndSend(&quot;work&quot;,&quot;hello work!&quot;);\n  }\n}\n\n\n##### \u5f00\u53d1\u6d88\u8d39\u8005\n/**\n * @author Xuxx3309\n * @Description Work\u6a21\u5f0f\n * @create 2020-06-03 2:19\n */\n@Component(&quot;workCustomer&quot;)\npublic class Customer {\n\n    //@RabbitListener\u53ef\u4ee5\u76f4\u63a5\u52a0\u5728\u65b9\u6cd5\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\n    @RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))\n    public void receivel1(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80051:&quot; + message);\n    }\n\n    //\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\n    @RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))\n    public void receivel2(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80052:&quot; + message);\n    }\n}\n\n\u8bf4\u660e:\u9ed8\u8ba4\u5728Spring AMQP\u5b9e\u73b0\u4e2dWork\u8fd9\u79cd\u65b9\u5f0f\u5c31\u662f\u516c\u5e73\u8c03\u5ea6,\u5982\u679c\u9700\u8981\u5b9e\u73b0\u80fd\u8005\u591a\u52b3\u9700\u8981\u989d\u5916\u914d\u7f6e\n\n\n\n5.3 Fanout \u5e7f\u64ad\u6a21\u578b\n\n##### \u5f00\u53d1\u751f\u4ea7\u8005\n@Autowired\nRabbitTemplate rabbitTemplate;\n\n/**\n* Fanout \u5e7f\u64ad\u6a21\u5f0f\n*/\n@Test\npublic void testFanout() {\n //\u6b64\u65f6routingKey\u8fd8\u6ca1\u7528\n    rabbitTemplate.convertAndSend(&quot;logs&quot;, &quot;&quot;, &quot;\u5e7f\u64ad\u6a21\u5f0f&quot;);\n}\n\n\n\n\n##### \u5f00\u53d1\u6d88\u8d39\u8005\n/**\n * @author Xuxx3309\n * @Description \u5e7f\u64ad\u6a21\u5f0f, \u9700\u8981\u4ea4\u6362\u673a\n * @create 2020-06-03 2:43\n */\n@Component(&quot;fanoutCustomer&quot;)\npublic class Customer {\n    @RabbitListener(bindings = {\n            @QueueBinding(value = @Queue//\u6b64\u65f6\u6ca1\u914d\u7f6e\u961f\u5217\u540d\u79f0\uff0c\u662f\u4e34\u65f6\u961f\u5217\n                    , exchange = @Exchange(name = &quot;logs&quot;, type = &quot;fanout&quot;))//\u7ed1\u5b9a \u4ea4\u6362\u673a\n    })\n    public void receivel1(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80051:&quot; + message);\n    }\n\n    @RabbitListener(bindings = {\n            @QueueBinding(value = @Queue\n                    , exchange = @Exchange(name = &quot;logs&quot;, type = &quot;fanout&quot;))\n    })\n    public void receivel2(String message) {\n     System.out.println(&quot;\u6d88\u8d39\u80052:&quot; + message);\n    }\n}\n\n\n\n5.4 Route \u8def\u7531\u6a21\u578b\n\n##### \u5f00\u53d1\u751f\u4ea7\u8005\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n/**\n* Route-directs \u8def\u7531\u6a21\u5f0f\n*/\n@Test\npublic void testRoute() {\n    rabbitTemplate.convertAndSend(&quot;directs&quot;, &quot;info&quot;, &quot;info\u7684\u8def\u7531\u4fe1\u606f&quot;);\n    rabbitTemplate.convertAndSend(&quot;directs&quot;, &quot;error&quot;, &quot;error\u7684\u8def\u7531\u4fe1\u606f&quot;);\n}\n\n\n##### \u5f00\u53d1\u6d88\u8d39\u8005\n/**\n * @author Xuxx3309\n * @Description \u8def\u7531 directs\u6a21\u5f0f\n * @create 2020-06-03 2:59\n */\n@Component(&quot;directsCustomer&quot;)\npublic class Customer {\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue//\u521b\u5efa\u4e34\u65f6\u961f\u5217\n                    , exchange = @Exchange(name = &quot;directs&quot;, type = &quot;direct&quot;)//\u7ed1\u5b9a\u4ea4\u6362\u673a\n                    , key = {&quot;info&quot;, &quot;error&quot;}\n            )\n    })\n    public void receivel1(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80051\uff1a&quot; + message);\n    }\n\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue//\u521b\u5efa\u4e34\u65f6\u961f\u5217\n                    , exchange = @Exchange(name = &quot;directs&quot;, type = &quot;direct&quot;)//\u7ed1\u5b9a\u4ea4\u6362\u673a\n                    , key = {&quot;error&quot;}\n            )\n    })\n    public void receivel2(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80052\uff1a&quot; + message);\n    }\n}\n\n\n\n5.5 Topic \u8ba2\u9605\u6a21\u578b(\u52a8\u6001\u8def\u7531\u6a21\u578b)\n\n##### \u5f00\u53d1\u751f\u4ea7\u8005\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n/**\n * Route-Topic \u52a8\u6001\u8def\u7531\u6a21\u5f0f\n */\n@Test\npublic void testTopic(){\n  rabbitTemplate.convertAndSend(&quot;topics&quot;, &quot;user.save&quot;, &quot;user.save\u7684\u8def\u7531\u4fe1\u606f&quot;);\n  rabbitTemplate.convertAndSend(&quot;topics&quot;, &quot;order.save.error&quot;, &quot;order.save.error\u7684\u8def\u7531\u4fe1\u606f&quot;);\n}\n\n\n\n\n##### \u5f00\u53d1\u6d88\u8d39\u8005\n/**\n * @author Xuxx3309\n * @Description \u52a8\u6001\u8def\u7531 topic\u6a21\u5f0f\n * &#39;#&#39; \u5339\u914d\u4e00\u4e2a\u83b7\u591a\u4e2a\n * &#39;*&#39; \u5339\u914d\u4e00\u4e2a\n * @create 2020-06-03 3:09\n */\n@Component(&quot;topicCustomer&quot;)\npublic class Customer {\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue//\u521b\u5efa\u4e34\u65f6\u961f\u5217\n                    , exchange = @Exchange(name = &quot;topics&quot;, type = &quot;topic&quot;)//\u7ed1\u5b9a\u4ea4\u6362\u673a\n                    , key = {&quot;user.save&quot;,&quot;user.#&quot;}\n            )\n    })\n    public void receivel1(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80051\uff1a&quot; + message);\n    }\n\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue//\u521b\u5efa\u4e34\u65f6\u961f\u5217\n                    , exchange = @Exchange(name = &quot;topics&quot;, type = &quot;topic&quot;)//\u7ed1\u5b9a\u4ea4\u6362\u673a\n                    , key = {&quot;order.#&quot;,&quot;user.*&quot;}\n         )\n    })\n    public void receivel2(String message) {\n        System.out.println(&quot;\u6d88\u8d39\u80052\uff1a&quot; + message);\n    }\n}\n\n\n\n\n6. MQ\u7684\u5e94\u7528\u573a\u666f\n6.1 \u5f02\u6b65\u5904\u7406\n\u573a\u666f\u8bf4\u660e\uff1a\u7528\u6237\u6ce8\u518c\u540e\uff0c\u9700\u8981\u53d1\u6ce8\u518c\u90ae\u4ef6\u548c\u6ce8\u518c\u77ed\u4fe1,\u4f20\u7edf\u7684\u505a\u6cd5\u6709\u4e24\u79cd 1.\u4e32\u884c\u7684\u65b9\u5f0f 2.\u5e76\u884c\u7684\u65b9\u5f0f\n\n\u4e32\u884c\u65b9\u5f0f: \u5c06\u6ce8\u518c\u4fe1\u606f\u5199\u5165\u6570\u636e\u5e93\u540e,\u53d1\u9001\u6ce8\u518c\u90ae\u4ef6,\u518d\u53d1\u9001\u6ce8\u518c\u77ed\u4fe1,\u4ee5\u4e0a\u4e09\u4e2a\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\u540e\u624d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u8fd9\u6709\u4e00\u4e2a\u95ee\u9898\u662f,\u90ae\u4ef6,\u77ed\u4fe1\u5e76\u4e0d\u662f\u5fc5\u987b\u7684,\u5b83\u53ea\u662f\u4e00\u4e2a\u901a\u77e5,\u800c\u8fd9\u79cd\u505a\u6cd5\u8ba9\u5ba2\u6237\u7aef\u7b49\u5f85\u6ca1\u6709\u5fc5\u8981\u7b49\u5f85\u7684\u4e1c\u897f.\n\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0\n\n\u5e76\u884c\u65b9\u5f0f:\u5c06\u6ce8\u518c\u4fe1\u606f\u5199\u5165\u6570\u636e\u5e93\u540e,\u53d1\u9001\u90ae\u4ef6\u7684\u540c\u65f6,\u53d1\u9001\u77ed\u4fe1,\u4ee5\u4e0a\u4e09\u4e2a\u4efb\u52a1\u5b8c\u6210\u540e,\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef,\u5e76\u884c\u7684\u65b9\u5f0f\u80fd\u63d0\u9ad8\u5904\u7406\u7684\u65f6\u95f4\u3002\n\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0\n\n\u6d88\u606f\u961f\u5217:\u5047\u8bbe\u4e09\u4e2a\u4e1a\u52a1\u8282\u70b9\u5206\u522b\u4f7f\u752850ms,\u4e32\u884c\u65b9\u5f0f\u4f7f\u7528\u65f6\u95f4150ms,\u5e76\u884c\u4f7f\u7528\u65f6\u95f4100ms\u3002\u867d\u7136\u5e76\u884c\u5df2\u7ecf\u63d0\u9ad8\u7684\u5904\u7406\u65f6\u95f4,\u4f46\u662f,\u524d\u9762\u8bf4\u8fc7,\u90ae\u4ef6\u548c\u77ed\u4fe1\u5bf9\u6211\u6b63\u5e38\u7684\u4f7f\u7528\u7f51\u7ad9\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5ba2\u6237\u7aef\u6ca1\u6709\u5fc5\u8981\u7b49\u7740\u5176\u53d1\u9001\u5b8c\u6210\u624d\u663e\u793a\u6ce8\u518c\u6210\u529f,\u5e94\u8be5\u662f\u5199\u5165\u6570\u636e\u5e93\u540e\u5c31\u8fd4\u56de.  \u6d88\u606f\u961f\u5217: \u5f15\u5165\u6d88\u606f\u961f\u5217\u540e\uff0c\u628a\u53d1\u9001\u90ae\u4ef6,\u77ed\u4fe1\u4e0d\u662f\u5fc5\u987b\u7684\u4e1a\u52a1\u903b\u8f91\u5f02\u6b65\u5904\u7406\nimg\n\n\n\u7531\u6b64\u53ef\u4ee5\u770b\u51fa,\u5f15\u5165\u6d88\u606f\u961f\u5217\u540e\uff0c\u7528\u6237\u7684\u54cd\u5e94\u65f6\u95f4\u5c31\u7b49\u4e8e\u5199\u5165\u6570\u636e\u5e93\u7684\u65f6\u95f4+\u5199\u5165\u6d88\u606f\u961f\u5217\u7684\u65f6\u95f4(\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1),\u5f15\u5165\u6d88\u606f\u961f\u5217\u540e\u5904\u7406\u540e,\u54cd\u5e94\u65f6\u95f4\u662f\u4e32\u884c\u76843\u500d,\u662f\u5e76\u884c\u76842\u500d\u3002\n6.2 \u5e94\u7528\u89e3\u8026\n\u573a\u666f\uff1a\u53cc11\u662f\u8d2d\u7269\u72c2\u8282,\u7528\u6237\u4e0b\u5355\u540e,\u8ba2\u5355\u7cfb\u7edf\u9700\u8981\u901a\u77e5\u5e93\u5b58\u7cfb\u7edf,\u4f20\u7edf\u7684\u505a\u6cd5\u5c31\u662f\u8ba2\u5355\u7cfb\u7edf\u8c03\u7528\u5e93\u5b58\u7cfb\u7edf\u7684\u63a5\u53e3.\n\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0\n\u8fd9\u79cd\u505a\u6cd5\u6709\u4e00\u4e2a\u7f3a\u70b9:\n\u5f53\u5e93\u5b58\u7cfb\u7edf\u51fa\u73b0\u6545\u969c\u65f6,\u8ba2\u5355\u5c31\u4f1a\u5931\u8d25\u3002 \u8ba2\u5355\u7cfb\u7edf\u548c\u5e93\u5b58\u7cfb\u7edf\u9ad8\u8026\u5408.  \u5f15\u5165\u6d88\u606f\u961f\u5217\n\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0\n\n\u8ba2\u5355\u7cfb\u7edf:\u7528\u6237\u4e0b\u5355\u540e,\u8ba2\u5355\u7cfb\u7edf\u5b8c\u6210\u6301\u4e45\u5316\u5904\u7406,\u5c06\u6d88\u606f\u5199\u5165\u6d88\u606f\u961f\u5217,\u8fd4\u56de\u7528\u6237\u8ba2\u5355\u4e0b\u5355\u6210\u529f\u3002\n\n\u5e93\u5b58\u7cfb\u7edf:\u8ba2\u9605\u4e0b\u5355\u7684\u6d88\u606f,\u83b7\u53d6\u4e0b\u5355\u6d88\u606f,\u8fdb\u884c\u5e93\u64cd\u4f5c\u3002  \u5c31\u7b97\u5e93\u5b58\u7cfb\u7edf\u51fa\u73b0\u6545\u969c,\u6d88\u606f\u961f\u5217\u4e5f\u80fd\u4fdd\u8bc1\u6d88\u606f\u7684\u53ef\u9760\u6295\u9012,\u4e0d\u4f1a\u5bfc\u81f4\u6d88\u606f\u4e22\u5931.\n\n\n6.3 \u6d41\u91cf\u524a\u5cf0\n\u573a\u666f: \u79d2\u6740\u6d3b\u52a8\uff0c\u4e00\u822c\u4f1a\u56e0\u4e3a\u6d41\u91cf\u8fc7\u5927\uff0c\u5bfc\u81f4\u5e94\u7528\u6302\u6389,\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u822c\u5728\u5e94\u7528\u524d\u7aef\u52a0\u5165\u6d88\u606f\u961f\u5217\u3002\n\u4f5c\u7528:\n\u200b           1.\u53ef\u4ee5\u63a7\u5236\u6d3b\u52a8\u4eba\u6570\uff0c\u8d85\u8fc7\u6b64\u4e00\u5b9a\u9600\u503c\u7684\u8ba2\u5355\u76f4\u63a5\u4e22\u5f03(\u6211\u4e3a\u4ec0\u4e48\u79d2\u6740\u4e00\u6b21\u90fd\u6ca1\u6709\u6210\u529f\u8fc7\u5462^^)\n\u200b           2.\u53ef\u4ee5\u7f13\u89e3\u77ed\u65f6\u95f4\u7684\u9ad8\u6d41\u91cf\u538b\u57ae\u5e94\u7528(\u5e94\u7528\u7a0b\u5e8f\u6309\u81ea\u5df1\u7684\u6700\u5927\u5904\u7406\u80fd\u529b\u83b7\u53d6\u8ba2\u5355)\n\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0\n1.\u7528\u6237\u7684\u8bf7\u6c42,\u670d\u52a1\u5668\u6536\u5230\u4e4b\u540e,\u9996\u5148\u5199\u5165\u6d88\u606f\u961f\u5217,\u52a0\u5165\u6d88\u606f\u961f\u5217\u957f\u5ea6\u8d85\u8fc7\u6700\u5927\u503c,\u5219\u76f4\u63a5\u629b\u5f03\u7528\u6237\u8bf7\u6c42\u6216\u8df3\u8f6c\u5230\u9519\u8bef\u9875\u9762.\n2.\u79d2\u6740\u4e1a\u52a1\u6839\u636e\u6d88\u606f\u961f\u5217\u4e2d\u7684\u8bf7\u6c42\u4fe1\u606f\uff0c\u518d\u505a\u540e\u7eed\u5904\u7406.\n\n7. RabbitMQ\u7684\u96c6\u7fa4\n7.1 \u96c6\u7fa4\u67b6\u6784\n7.1.1 \u666e\u901a\u96c6\u7fa4(\u526f\u672c\u96c6\u7fa4)\nAll data/state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   --\u6458\u81ea\u5b98\u7f51\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b:RabbitMQ\u4ee3\u7406\u64cd\u4f5c\u6240\u9700\u7684\u6240\u6709\u6570\u636e/\u72b6\u6001\u90fd\u5c06\u8de8\u6240\u6709\u8282\u70b9\u590d\u5236\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5916\u662f\u6d88\u606f\u961f\u5217\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u961f\u5217\u4f4d\u4e8e\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u5c3d\u7ba1\u5b83\u4eec\u53ef\u4ee5\u4ece\u6240\u6709\u8282\u70b9\u770b\u5230\u548c\u8bbf\u95ee\n\n##### \u67b6\u6784\u56fe\n\nimage-20200320094147471\n\u200b   \u6838\u5fc3\u89e3\u51b3\u95ee\u9898:  \u5f53\u96c6\u7fa4\u4e2d\u67d0\u4e00\u65f6\u523bmaster\u8282\u70b9\u5b95\u673a,\u53ef\u4ee5\u5bf9Quene\u4e2d\u4fe1\u606f,\u8fdb\u884c\u5907\u4efd\n\n##### \u96c6\u7fa4\u642d\u5efa\n\n# 0.\u96c6\u7fa4\u89c4\u5212\n node1: 10.15.0.3  mq1  master \u4e3b\u8282\u70b9\n node2: 10.15.0.4  mq2  repl1  \u526f\u672c\u8282\u70b9\n node3: 10.15.0.5  mq3  repl2  \u526f\u672c\u8282\u70b9\n\n# 1.\u514b\u9686\u4e09\u53f0\u673a\u5668\u4e3b\u673a\u540d\u548cip\u6620\u5c04\n vim /etc/hosts\u52a0\u5165:\n      10.15.0.3 mq1\n     10.15.0.4 mq2\n     10.15.0.5 mq3\n node1: vim /etc/hostname \u52a0\u5165:  mq1\n node2: vim /etc/hostname \u52a0\u5165:  mq2\n node3: vim /etc/hostname \u52a0\u5165:  mq3\n\n# 2.\u4e09\u4e2a\u673a\u5668\u5b89\u88c5rabbitmq,\u5e76\u540c\u6b65cookie\u6587\u4ef6,\u5728node1\u4e0a\u6267\u884c:\n scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/\n scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/\n\n# 3.\u67e5\u770bcookie\u662f\u5426\u4e00\u81f4:\n node1: cat /var/lib/rabbitmq/.erlang.cookie \n node2: cat /var/lib/rabbitmq/.erlang.cookie \n node3: cat /var/lib/rabbitmq/.erlang.cookie \n\n# 4.\u540e\u53f0\u542f\u52a8rabbitmq\u6240\u6709\u8282\u70b9\u6267\u884c\u5982\u4e0b\u547d\u4ee4,\u542f\u52a8\u6210\u529f\u8bbf\u95ee\u7ba1\u7406\u754c\u9762:\n rabbitmq-server -detached \n\n# 5.\u5728node2\u548cnode3\u6267\u884c\u52a0\u5165\u96c6\u7fa4\u547d\u4ee4:\n 1.\u5173\u95ed       rabbitmqctl stop_app\n 2.\u52a0\u5165\u96c6\u7fa4    rabbitmqctl join_cluster rabbit@mq1\n 3.\u542f\u52a8\u670d\u52a1    rabbitmqctl start_app\n\n# 6.\u67e5\u770b\u96c6\u7fa4\u72b6\u6001,\u4efb\u610f\u8282\u70b9\u6267\u884c:\n rabbitmqctl cluster_status\n\n# 7.\u5982\u679c\u51fa\u73b0\u5982\u4e0b\u663e\u793a,\u96c6\u7fa4\u642d\u5efa\u6210\u529f:\n Cluster status of node rabbit@mq3 ...\n [{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]},\n {running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]},\n {cluster_name,&lt;&lt;\"rabbit@mq1\"&gt;&gt;},\n {partitions,[]},\n {alarms,[{rabbit@mq1,[]},{rabbit@mq2,[]},{rabbit@mq3,[]}]}]\n\n# 8.\u767b\u5f55\u7ba1\u7406\u754c\u9762,\u5c55\u793a\u5982\u4e0b\u72b6\u6001:\nimage-20200320095613586\n\n# 9.\u6d4b\u8bd5\u96c6\u7fa4\u5728node1\u4e0a,\u521b\u5efa\u961f\u5217\nimage-20200320095743935\n\n# 10.\u67e5\u770bnode2\u548cnode3\u8282\u70b9:\nimage-20200320095827688\nimage-20200320095843370\n\n# 11.\u5173\u95ednode1\u8282\u70b9,\u6267\u884c\u5982\u4e0b\u547d\u4ee4,\u67e5\u770bnode2\u548cnode3:\n rabbitmqctl stop_app\nimage-20200320100000347\nimage-20200320100010968\n\n\n\n7.1.2 \u955c\u50cf\u96c6\u7fa4\nThis guide covers mirroring (queue contents replication) of classic queues  --\u6458\u81ea\u5b98\u7f51\nBy default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made mirrored across multiple nodes. --\u6458\u81ea\u5b98\u7f51\n\n\u955c\u50cf\u961f\u5217\u673a\u5236\u5c31\u662f\u5c06\u961f\u5217\u5728\u4e09\u4e2a\u8282\u70b9\u4e4b\u95f4\u8bbe\u7f6e\u4e3b\u4ece\u5173\u7cfb\uff0c\u6d88\u606f\u4f1a\u5728\u4e09\u4e2a\u8282\u70b9\u4e4b\u95f4\u8fdb\u884c\u81ea\u52a8\u540c\u6b65\uff0c\u4e14\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u4e0d\u53ef\u7528\uff0c\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u6216\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u60c5\u51b5\uff0c\u63d0\u5347MQ\u96c6\u7fa4\u7684\u6574\u4f53\u9ad8\u53ef\u7528\u6027\u3002\n\n##### \u96c6\u7fa4\u67b6\u6784\u56fe\nimage-20200320113423235\n\n\n\n##### \u914d\u7f6e\u96c6\u7fa4\u67b6\u6784\n```\n# 0.\u7b56\u7565\u8bf4\u660e\n rabbitmqctl set_policy [-p ] [--priority ] [--apply-to ]    \n -p Vhost\uff1a \u53ef\u9009\u53c2\u6570\uff0c\u9488\u5bf9\u6307\u5b9avhost\u4e0b\u7684queue\u8fdb\u884c\u8bbe\u7f6e\n Name:     policy\u7684\u540d\u79f0\n Pattern: queue\u7684\u5339\u914d\u6a21\u5f0f(\u6b63\u5219\u8868\u8fbe\u5f0f)\n Definition\uff1a\u955c\u50cf\u5b9a\u4e49\uff0c\u5305\u62ec\u4e09\u4e2a\u90e8\u5206ha-mode, ha-params, ha-sync-mode\n\n             ha-mode:\u6307\u660e\u955c\u50cf\u961f\u5217\u7684\u6a21\u5f0f\uff0c\u6709\u6548\u503c\u4e3a all/exactly/nodes\n                     all\uff1a\u8868\u793a\u5728\u96c6\u7fa4\u4e2d\u6240\u6709\u7684\u8282\u70b9\u4e0a\u8fdb\u884c\u955c\u50cf\n                     exactly\uff1a\u8868\u793a\u5728\u6307\u5b9a\u4e2a\u6570\u7684\u8282\u70b9\u4e0a\u8fdb\u884c\u955c\u50cf\uff0c\u8282\u70b9\u7684\u4e2a\u6570\u7531ha-params\u6307\u5b9a\n                     nodes\uff1a\u8868\u793a\u5728\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u8fdb\u884c\u955c\u50cf\uff0c\u8282\u70b9\u540d\u79f0\u901a\u8fc7ha-params\u6307\u5b9a\n          ha-params\uff1aha-mode\u6a21\u5f0f\u9700\u8981\u7528\u5230\u7684\u53c2\u6570\n          ha-sync-mode\uff1a\u8fdb\u884c\u961f\u5217\u4e2d\u6d88\u606f\u7684\u540c\u6b65\u65b9\u5f0f\uff0c\u6709\u6548\u503c\u4e3aautomatic\u548cmanual\n          priority\uff1a\u53ef\u9009\u53c2\u6570\uff0cpolicy\u7684\u4f18\u5148\u7ea7\n\n\n1.\u67e5\u770b\u5f53\u524d\u7b56\u7565\n\nrabbitmqctl list_policies\n\n\n2.\u6dfb\u52a0\u7b56\u7565\n\nrabbitmqctl set_policy ha-all '^hello' '{\"ha-mode\":\"all\",\"ha-sync-mode\":\"automatic\"}' \n\u8bf4\u660e:\u7b56\u7565\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a \u201c^\u201d \u8868\u793a\u6240\u6709\u5339\u914d\u6240\u6709\u961f\u5217\u540d\u79f0  ^hello:\u5339\u914dhello\u5f00\u5934\u961f\u5217\n\n\n3.\u5220\u9664\u7b56\u7565\n\nrabbitmqctl clear_policy ha-all\n\n\n4.\u6d4b\u8bd5\u96c6\u7fa4\n```\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}, {"name": "RibbitMQ", "slug": "RibbitMQ", "permalink": "/Xuxx_Blogs/tag/RibbitMQ/"}]}, {"title": "Spring Boot\u6574\u5408Swagger", "date": "2020-05-27T23:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj23/", "text": "1. Swagger\u7b80\u4ecb\n\u524d\u540e\u7aef\u5206\u79bb\n\n\u524d\u7aef -&gt; \u524d\u7aef\u63a7\u5236\u5c42\u3001\u89c6\u56fe\u5c42\n\u540e\u7aef -&gt; \u540e\u7aef\u63a7\u5236\u5c42\u3001\u670d\u52a1\u5c42\u3001\u6570\u636e\u8bbf\u95ee\u5c42\n\u524d\u540e\u7aef\u901a\u8fc7API\u8fdb\u884c\u4ea4\u4e92\n\u524d\u540e\u7aef\u76f8\u5bf9\u72ec\u7acb\u4e14\u677e\u8026\u5408\n\n\u4ea7\u751f\u7684\u95ee\u9898\n\n\u524d\u540e\u7aef\u96c6\u6210\uff0c\u524d\u7aef\u6216\u8005\u540e\u7aef\u65e0\u6cd5\u505a\u5230\u201c\u53ca\u65f6\u534f\u5546\uff0c\u5c3d\u65e9\u89e3\u51b3\u201d\uff0c\u6700\u7ec8\u5bfc\u81f4\u95ee\u9898\u96c6\u4e2d\u7206\u53d1\n\n\u89e3\u51b3\u65b9\u6848\n\n\u9996\u5148\u5b9a\u4e49schema [ \u8ba1\u5212\u7684\u63d0\u7eb2 ]\uff0c\u5e76\u5b9e\u65f6\u8ddf\u8e2a\u6700\u65b0\u7684API\uff0c\u964d\u4f4e\u96c6\u6210\u98ce\u9669\n\nSwagger\n\n\u53f7\u79f0\u4e16\u754c\u4e0a\u6700\u6d41\u884c\u7684API\u6846\u67b6\nRestful Api \u6587\u6863\u5728\u7ebf\u81ea\u52a8\u751f\u6210\u5668 =&gt; API \u6587\u6863 \u4e0eAPI \u5b9a\u4e49\u540c\u6b65\u66f4\u65b0\n\u76f4\u63a5\u8fd0\u884c\uff0c\u5728\u7ebf\u6d4b\u8bd5API\n\u652f\u6301\u591a\u79cd\u8bed\u8a00 \uff08\u5982\uff1aJava\uff0cPHP\u7b49\uff09\n\u5b98\u7f51\uff1ahttps://swagger.io/\n\n2. Spring Boot\u96c6\u6210Swagger\nSpring Boot\u96c6\u6210Swagger -&gt; springfox\uff0c\u4e24\u4e2ajar\u5305\n\nSpringfox-swagger2\nswagger-springmvc\n\n\u4f7f\u7528Swagger\n\u8981\u6c42\uff1ajdk 1.8 + \u5426\u5219swagger2\u65e0\u6cd5\u8fd0\u884c\n\u6b65\u9aa4\uff1a\n1\u3001\u65b0\u5efa\u4e00\u4e2aSpring Boot-web\u9879\u76ee\n2\u3001\u6dfb\u52a0Maven\u4f9d\u8d56\n&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n3\u3001\u7f16\u5199HelloController\uff0c\u6d4b\u8bd5\u786e\u4fdd\u8fd0\u884c\u6210\u529f\uff01\n4\u3001\u8981\u4f7f\u7528Swagger\uff0c\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u914d\u7f6e\u7c7b-SwaggerConfig\u6765\u914d\u7f6e Swagger\n@Configuration\n@EnableSwagger2// \u5f00\u542fSwagger2\npublic class SwaggerConfig {  }\n\n5\u3001\u8bbf\u95ee\u6d4b\u8bd5 \uff1ahttp://localhost:8080/swagger-ui.html \uff0c\u53ef\u4ee5\u770b\u5230swagger\u7684\u754c\u9762\uff1b\n\n3. \u914d\u7f6eSwagger\n1\u3001Swagger\u5b9e\u4f8bBean\u662fDocket\uff0c\u6240\u4ee5\u901a\u8fc7\u914d\u7f6eDocket\u5b9e\u4f8b\u6765\u914d\u7f6eSwaggger\u3002\n@Bean //\u914d\u7f6edocket\u4ee5\u914d\u7f6eSwagger\u5177\u4f53\u53c2\u6570\npublic Docket docket() {   \n    return new Docket(DocumentationType.SWAGGER_2);\n}\n\n2\u3001\u53ef\u4ee5\u901a\u8fc7apiInfo()\u5c5e\u6027\u914d\u7f6e\u6587\u6863\u4fe1\u606f\n//\u914d\u7f6eAPI\u63cf\u8ff0\u4fe1\u606f&gt;&gt;&gt;ApiInfo\n    private ApiInfo apiInfo() {\n        //\u4f5c\u8005\u4fe1\u606f\n        Contact contact = new Contact(&quot;Xuxx&quot;, &quot;\u6682\u65e0&quot;, &quot;xuxx3319@gmail.com&quot;);\n        return new ApiInfo(\n                &quot;API\u4fe1\u606f&quot;,\n                &quot;ApI\u63cf\u8ff0&quot;,\n                &quot;v1.0&quot;,\n                &quot;\u670d\u52a1\u6761\u6b3e\u7f51\u5740&quot;,\n                contact,\n                &quot;Apache 2.0&quot;,\n                &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;,\n                new ArrayList&lt;VendorExtension&gt;());\n    }\n\n3\u3001Docket \u5b9e\u4f8b\u5173\u8054\u4e0a apiInfo()\n//\u914d\u7f6eSwagger\u7684Docket\n@Bean\npublic Docket docket() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo());\n}\n\n4\u3001\u91cd\u542f\u9879\u76ee\uff0c\u8bbf\u95ee\u6d4b\u8bd5 http://localhost:8080/swagger-ui.html  \u770b\u4e0b\u6548\u679c\uff1b\n\n4. \u914d\u7f6e\u626b\u63cf\u63a5\u53e3\n1\u3001\u6784\u5efaDocket\u65f6\u901a\u8fc7select()\u65b9\u6cd5\u914d\u7f6e\u600e\u4e48\u626b\u63cf\u63a5\u53e3\u3002\n//\u914d\u7f6eSwagger\u7684Docket\n    @Bean\n    public Docket docket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                //RequestHandlerSelectors \u914d\u7f6e\u8981\u626b\u63cf\u7684\u63a5\u53e3\n                .apis(RequestHandlerSelectors.basePackage(&quot;com.xuxx.swagger.controller&quot;))\n                .build();\n    }\n\n2\u3001\u91cd\u542f\u9879\u76ee\u6d4b\u8bd5\uff0c\u7531\u4e8e\u914d\u7f6e\u6839\u636e\u5305\u7684\u8def\u5f84\u626b\u63cf\u63a5\u53e3\uff0c\u6240\u4ee5\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u7c7b\n3\u3001\u9664\u4e86\u901a\u8fc7\u5305\u8def\u5f84\u914d\u7f6e\u626b\u63cf\u63a5\u53e3\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u5176\u4ed6\u65b9\u5f0f\u626b\u63cf\u63a5\u53e3\uff0c\u8fd9\u91cc\u6ce8\u91ca\u4e00\u4e0b\u6240\u6709\u7684\u914d\u7f6e\u65b9\u5f0f\uff1a\n//any:\u626b\u63cf\u5168\u90e8\n//none:\u5168\u90e8\u4e0d\u626b\u63cf\n//basePackage:\u6307\u5b9a\u8981\u626b\u63cf\u7684\u5305 \n//withMethodAnnotation:\u626b\u63cf\u5e26\u6ce8\u89e3\u7684\u65b9\u6cd5,\u4f8b:withMethodAnnotation(GetMapping.class)\n//withClassAnnotation:\u626b\u63cf\u5e26\u6ce8\u89e3\u7684\u7c7b,\u4f8b:withClassAnnotation(RestController.class)\n\n4\u3001\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u914d\u7f6e\u63a5\u53e3\u626b\u63cf\u8fc7\u6ee4\uff1a\n@Bean\npublic Docket docket() {   \nreturn new Docket(DocumentationType.SWAGGER_2)\n    .apiInfo(apiInfo())\n    .select()// select():\u914d\u7f6e\u626b\u63cf\u63a5\u53e3, RequestHandlerSelectors:\u914d\u7f6e\u5982\u4f55\u626b\u63cf\u63a5\u53e3\n    .apis(RequestHandlerSelectors.basePackage(&quot;com.xuxx.swagger.controller&quot;))\n    //\u914d\u7f6e\u5982\u4f55\u901a\u8fc7path\u8fc7\u6ee4,\u5373\u8fd9\u91cc\u53ea\u626b\u63cf\u8bf7\u6c42\u4ee5&#39;/api/&#39;\u4e3a\u524d\u7f00\u7684\u63a5\u53e3\n    .paths(PathSelectors.ant(&quot;/api/**&quot;))\n    .build();\n}\n\n5\u3001\u8fd9\u91cc\u7684\u53ef\u9009\u503c\u8fd8\u6709\nany() //\u4efb\u4f55\u8bf7\u6c42\u90fd\u626b\u63cf\nnone() //\u4efb\u4f55\u8bf7\u6c42\u90fd\u4e0d\u626b\u63cf\nregex(final String pathRegex) //\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u63a7\u5236\nant(final String antPattern) //\u901a\u8fc7ant()\u5339\u914d\n\n5. \u914d\u7f6eSwagger\u5f00\u5173\n1\u3001\u901a\u8fc7enable()\u65b9\u6cd5\u914d\u7f6e\u662f\u5426\u542f\u7528swagger\uff0c\u5982\u679c\u4e3afalse\uff0c\u5219\u4e0d\u80fd\u8bbf\u95eeswagger\n@Bean\npublic Docket docket() {\n   return new Docket(DocumentationType.SWAGGER_2)\n      .apiInfo(apiInfo())\n      .enable(false) //\u914d\u7f6e\u662f\u5426\u542f\u7528swagger\uff0c\u5982\u679c\u662ffalse\uff0c\u5219\u4e0d\u80fd\u8bbf\u95eeswagger\n      .select()// select():\u914d\u7f6e\u626b\u63cf\u63a5\u53e3, RequestHandlerSelectors:\u914d\u7f6e\u5982\u4f55\u626b\u63cf\u63a5\u53e3\n      .apis(RequestHandlerSelectors.basePackage(&quot;com.xuxx.swagger.controller&quot;))\n      //\u914d\u7f6e\u5982\u4f55\u901a\u8fc7path\u8fc7\u6ee4,\u5373\u8fd9\u91cc\u53ea\u626b\u63cf\u8bf7\u6c42\u4ee5&#39;/api/&#39;\u4e3a\u524d\u7f00\u7684\u63a5\u53e3\n    .paths(PathSelectors.ant(&quot;/api/**&quot;))\n      .build();\n}\n\n2\u3001\u5982\u4f55\u52a8\u6001\u914d\u7f6e\u5f53\u9879\u76ee\u5904\u4e8edev\u3001test\u73af\u5883\u65f6\u4f7f\u7528swagger\uff0c\u5904\u4e8eprod\u65f6\u4e0d\u663e\u793a\uff1f\n@Bean\n//environment:\u8868\u793a\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u7684\u63a5\u53e3\u3002\npublic Docket docket(Environment environment) {\n\n    //\u914d\u7f6e\u8981\u4f7f\u7528swagger\u7684\u73af\u5883\n    Profiles profiles = Profiles.of(&quot;dev&quot;, &quot;test&quot;);\n    //\u5224\u65ad\u5f53\u524d\u662f\u5426\u5904\u4e8e\u8be5\u73af\u5883\n    //\u901a\u8fc7enable()\u63a5\u6536\u6b64\u53c2\u6570\u5224\u65ad\u662f\u5426\u4f7f\u7528swagger\n    boolean flag = environment.acceptsProfiles(profiles);\n\n   return new Docket(DocumentationType.SWAGGER_2)\n      .apiInfo(apiInfo())\n      .enable(flag) //\u914d\u7f6e\u662f\u5426\u542f\u7528swagger\uff0c\u5982\u679c\u662ffalse\uff0c\u5728\u6d4f\u89c8\u5668\u5c06\u65e0\u6cd5\u8bbf\u95ee\n      .select()// \u901a\u8fc7.select()\u65b9\u6cd5\uff0c\u53bb\u914d\u7f6e\u626b\u63cf\u63a5\u53e3,RequestHandlerSelectors\u914d\u7f6e\u5982\u4f55\u626b\u63cf\u63a5\u53e3\n      .apis(RequestHandlerSelectors.basePackage(&quot;com.xuxx.swagger.controller&quot;))\n       //\u914d\u7f6e\u5982\u4f55\u901a\u8fc7path\u8fc7\u6ee4,\u5373\u8fd9\u91cc\u53ea\u626b\u63cf\u8bf7\u6c42\u4ee5&#39;/api/&#39;\u4e3a\u524d\u7f00\u7684\u63a5\u53e3\n      .paths(PathSelectors.ant(&quot;/api/**&quot;))\n      .build();\n}\n\n3\u3001\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u589e\u52a0\u4e00\u4e2adev\u7684\u914d\u7f6e\u6587\u4ef6\u67e5\u770b\u6548\u679c\uff01\napplication.properties\nspring.profiles.active=dev\n\napplication-dev.properties\nserver.port=8081\n\n\n\u5982\u679c\u73af\u5883\u4e0d\u662fdev\u6216\u8005test,swagger\u4fbf\u5173\u95ed\u3002\n6. \u914d\u7f6eAPI\u5206\u7ec4\n1\u3001\u5982\u679c\u6ca1\u6709\u914d\u7f6e\u5206\u7ec4\uff0c\u9ed8\u8ba4\u662fdefault\u3002\u901a\u8fc7groupName()\u65b9\u6cd5\u5373\u53ef\u914d\u7f6e\u5206\u7ec4\uff1a\n@Bean\npublic Docket docket(Environment environment) {\n   return new Docket(DocumentationType.SWAGGER_2)\n       .apiInfo(apiInfo())\n      .groupName(&quot;A&quot;) // \u914d\u7f6e\u5206\u7ec4\n       // \u7701\u7565....\n}\n\n2\u3001\u91cd\u542f\u9879\u76ee\u67e5\u770b\u5206\u7ec4\n3\u3001\u5982\u4f55\u914d\u7f6e\u591a\u4e2a\u5206\u7ec4\uff1f\u914d\u7f6e\u591a\u4e2a\u5206\u7ec4\u53ea\u9700\u8981\u914d\u7f6e\u591a\u4e2adocket\u5373\u53ef\uff1a\n@Bean\npublic Docket docket1(){\n   return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;);\n}\n@Bean\npublic Docket docket2(){\n   return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;B&quot;);\n}\n\n4\u3001\u91cd\u542f\u9879\u76ee\u67e5\u770b\u5373\u53ef\n\n7. \u5b9e\u4f53\u914d\u7f6e\n1\u3001\u65b0\u5efa\u4e00\u4e2a\u5b9e\u4f53\u7c7b\n@ApiModel(&quot;\u7528\u6237\u5b9e\u4f53\u7c7b-user&quot;)\npublic class User {\n    @ApiModelProperty(&quot;\u7528\u6237\u540d&quot;)\n    public String username;\n    @ApiModelProperty(&quot;\u5bc6\u7801&quot;)\n    public String password;\n}\n\n2\u3001\u53ea\u8981\u8fd9\u4e2a\u5b9e\u4f53\u5728\u8bf7\u6c42\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u4e0a\uff08\u5373\u4f7f\u662f\u6cdb\u578b\uff09\uff0c\u90fd\u80fd\u6620\u5c04\u5230\u5b9e\u4f53\u9879\u4e2d\uff1a\n@GetMapping(&quot;/getUser&quot;)\npublic User getUser(){\n   return new User();\n}\n\n3\u3001\u91cd\u542f\u67e5\u770b\u6d4b\u8bd5\n\n\u6ce8\uff1a\u5e76\u4e0d\u662f\u56e0\u4e3a@ApiModel\u8fd9\u4e2a\u6ce8\u89e3\u8ba9\u5b9e\u4f53\u663e\u793a\u5728\u8fd9\u91cc\u4e86\uff0c\u800c\u662f\u53ea\u8981\u51fa\u73b0\u5728\u63a5\u53e3\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e0a\u7684\u5b9e\u4f53\u90fd\u4f1a\u663e\u793a\u5728\u8fd9\u91cc\uff0c\u800c@ApiModel\u548c@ApiModelProperty\u8fd9\u4e24\u4e2a\u6ce8\u89e3\u53ea\u662f\u4e3a\u5b9e\u4f53\u6dfb\u52a0\u6ce8\u91ca\u7684\u3002\n\n@ApiModel\u4e3a\u7c7b\u6dfb\u52a0\u6ce8\u91ca\n\n\n@ApiModelProperty\u4e3a\u7c7b\u5c5e\u6027\u6dfb\u52a0\u6ce8\u91ca\n\n8. \u5e38\u7528\u6ce8\u89e3\nSwagger\u7684\u6240\u6709\u6ce8\u89e3\u5b9a\u4e49\u5728io.swagger.annotations\u5305\u4e0b\n\u4e0b\u9762\u5217\u4e00\u4e9b\u7ecf\u5e38\u7528\u5230\u7684\uff0c\u672a\u5217\u4e3e\u51fa\u6765\u7684\u53ef\u4ee5\u53e6\u884c\u67e5\u9605\u8bf4\u660e\uff1a\n\n\nSwagger\u6ce8\u89e3\n\u7b80\u5355\u8bf4\u660e\n\n\n\n\n@Api(tags = \"xxx\u6a21\u5757\u8bf4\u660e\")\n\u4f5c\u7528\u5728\u6a21\u5757\u7c7b\u4e0a,\u4e3a\u63a5\u53e3\u6dfb\u52a0\u6807\u7b7e\n\n\n@ApiOperation(vale=\"xxx\u63a5\u53e3\u8bf4\u660e\"\uff0ctags=\"xxx\"\uff0cnotes=\"\u63a5\u53e3\u7684\u8be6\u7ec6\u63cf\u8ff0\")\n\u4f5c\u7528\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a,vale:\u6dfb\u52a0\u8bf4\u660e,tage:\u6dfb\u52a0\u6807\u7b7e\n\n\n@ApiModel(\"xxxPOJO\u8bf4\u660e\")\n\u4f5c\u7528\u5728\u6a21\u578b\u7c7b\u4e0a\uff1a\u5982VO\u3001BO\n\n\n@ApiModelProperty(value = \"xxx\u5c5e\u6027\u8bf4\u660e\",hidden = true)\n\u4f5c\u7528\u5728\u7c7b\u65b9\u6cd5\u548c\u5c5e\u6027\u4e0a\uff0chidden\u8bbe\u7f6e\u4e3atrue\u53ef\u4ee5\u9690\u85cf\u8be5\u5c5e\u6027\n\n\n@ApiParam(\"xxx\u53c2\u6570\u8bf4\u660e\")\n\u4f5c\u7528\u5728\u53c2\u6570\u3001\u65b9\u6cd5\u548c\u5b57\u6bb5\u4e0a\uff0c\u7c7b\u4f3c@ApiModelProperty\n\n\n\n\u4e5f\u53ef\u4ee5\u7ed9\u8bf7\u6c42\u7684\u63a5\u53e3\u914d\u7f6e\u4e00\u4e9b\u6ce8\u91ca\n@ApiOperation(value = &quot;api\u63a5\u53e3-getUsername&quot;,tags =&quot;\u5c5e\u4e8exxx\u7684\u63a5\u53e3&quot;,notes = &quot;\u63a5\u53e3\u7684\u8be6\u7ec6\u63cf\u8ff0&quot;)\n@PostMapping(&quot;/getUsername&quot;)\n@ResponseBody\npublic String getUsername(@ApiParam(&quot;\u8fd9\u4e2ausername\u4f1a\u88ab\u8fd4\u56de&quot;)String username){\n   return username;\n}\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ed9\u4e00\u4e9b\u6bd4\u8f83\u96be\u7406\u89e3\u7684\u5c5e\u6027\u6216\u8005\u63a5\u53e3\uff0c\u589e\u52a0\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\uff0c\u8ba9\u4eba\u66f4\u5bb9\u6613\u9605\u8bfb\uff01\n\u76f8\u8f83\u4e8e\u4f20\u7edf\u7684Postman\u6216Curl\u65b9\u5f0f\u6d4b\u8bd5\u63a5\u53e3\uff0c\u4f7f\u7528swagger\u7b80\u76f4\u5c31\u662f\u50bb\u74dc\u5f0f\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u989d\u5916\u8bf4\u660e\u6587\u6863(\u5199\u5f97\u597d\u672c\u8eab\u5c31\u662f\u6587\u6863)\u800c\u4e14\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\uff0c\u53ea\u9700\u8981\u5f55\u5165\u6570\u636e\u7136\u540e\u70b9\u51fbExecute\uff0c\u5982\u679c\u518d\u914d\u5408\u81ea\u52a8\u5316\u6846\u67b6\uff0c\u53ef\u4ee5\u8bf4\u57fa\u672c\u5c31\u4e0d\u9700\u8981\u4eba\u4e3a\u64cd\u4f5c\u4e86\u3002\nSwagger\u662f\u4e2a\u4f18\u79c0\u7684\u5de5\u5177\uff0c\u73b0\u5728\u56fd\u5185\u5df2\u7ecf\u6709\u5f88\u591a\u7684\u4e2d\u5c0f\u578b\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5728\u4f7f\u7528\u5b83\uff0c\u76f8\u8f83\u4e8e\u4f20\u7edf\u7684\u8981\u5148\u51faWord\u63a5\u53e3\u6587\u6863\u518d\u6d4b\u8bd5\u7684\u65b9\u5f0f\uff0c\u663e\u7136\u8fd9\u6837\u4e5f\u66f4\u7b26\u5408\u73b0\u5728\u7684\u5feb\u901f\u8fed\u4ee3\u5f00\u53d1\u884c\u60c5\u3002\u5f53\u7136\u4e86\uff0c\u63d0\u9192\u4e0b\u5927\u5bb6\u5728\u6b63\u5f0f\u73af\u5883\u8981\u8bb0\u5f97\u5173\u95edSwagger\uff0c\u4e00\u6765\u51fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u4e8c\u6765\u4e5f\u53ef\u4ee5\u8282\u7701\u8fd0\u884c\u65f6\u5185\u5b58\u3002\n\u62d3\u5c55\uff1a\u5176\u4ed6\u76ae\u80a4\n\u53ef\u4ee5\u5bfc\u5165\u4e0d\u540c\u7684\u5305\u5b9e\u73b0\u4e0d\u540c\u7684\u76ae\u80a4\u5b9a\u4e49\uff1a\n1\u3001\u9ed8\u8ba4\u7684   \u8bbf\u95ee http://localhost:8080/swagger-ui.html\n&lt;dependency&gt;   \n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;   \n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;   \n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n2\u3001bootstrap-ui  \u8bbf\u95ee http://localhost:8080/doc.html\n&lt;!-- \u5f15\u5165swagger-bootstrap-ui\u5305 /doc.html--&gt;\n&lt;dependency&gt;   \n    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;   \n    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;   \n    &lt;version&gt;1.9.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n3\u3001Layui-ui   \u8bbf\u95ee http://localhost:8080/docs.html\n&lt;!-- \u5f15\u5165swagger-ui-layer\u5305 /docs.html--&gt;\n&lt;dependency&gt;   \n    &lt;groupId&gt;com.github.caspar-chen&lt;/groupId&gt;   \n    &lt;artifactId&gt;swagger-ui-layer&lt;/artifactId&gt;   \n    &lt;version&gt;1.1.3&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n4\u3001mg-ui   \u8bbf\u95ee http://localhost:8080/document.html\n&lt;!-- \u5f15\u5165swagger-ui-layer\u5305 /document.html--&gt;\n&lt;dependency&gt;   \n    &lt;groupId&gt;com.zyplayer&lt;/groupId&gt;   \n    &lt;artifactId&gt;swagger-mg-ui&lt;/artifactId&gt;   \n    &lt;version&gt;1.0.6&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}, {"name": "Swagger", "slug": "Swagger", "permalink": "/Xuxx_Blogs/tag/Swagger/"}]}, {"title": "Spring Boot\u6574\u5408Security", "date": "2020-05-18T15:10:00-00.00", "path": "/Xuxx_Blogs/archives/bj22/", "text": "1.Spring Security\u5165\u95e8\n1.Spring Security\u521d\u4f53\u9a8c\n1.\u5f15\u5165\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n2.Controller\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;hello&quot;)\n    public String hello() {\n        return &quot;Hello Security!&quot;;\n    }\n}\n\n3.\u6d4b\u8bd5\n\u6b64\u65f6\u542f\u52a8\u9879\u76ee\uff0c\u8bbf\u95eehttp://localhost:8080/hello\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\uff0c\u4f1a\u81ea\u52a8\u91cd\u5b9a\u5411\u5230http://localhost:8080/login,\u4e5f\u5c31\u662f\u8bf4hello\u63a5\u53e3\u88abSecurity\u4fdd\u62a4\u8d77\u6765\u4e86\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u4e86\u3002\n\n\n\u8f93\u5165\u7528\u6237\u540d\uff08user\uff09\u548c\u5bc6\u7801\uff08\u6bcf\u6b21\u751f\u6210\u7684\u5bc6\u7801\u90fd\u4e0d\u4e00\u6837\uff09\uff08\u5b9e\u9645\u4e0a\u5c31\u662fUUID\uff09\uff0c\u767b\u5f55\u540e\u4fbf\u80fd\u8bbf\u95ee\u63a5\u53e3\u4e86\u3002\n2.\u624b\u52a8\u914d\u7f6eSecurity\u7528\u6237\u548c\u5bc6\u7801\n1.\u7b2c\u4e00\u79cd\uff1a\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\nspring.security.user.name=xuxx\nspring.security.user.password=123\nspring.security.user.roles=admin\n\n\u914d\u7f6e\u540e\uff0cSecurity\u4fbf\u4e0d\u4f1a\u518d\u751f\u6210\u5bc6\u7801\u4e86\uff0c\u5f53\u7136\u4e5f\u4e0d\u4f1a\u5728\u63a7\u5236\u53f0\u6253\u5370\u4e86\uff0c\u6240\u4ee5\u6b64\u65f6\u518d\u767b\u5f55\u4fbf\u53ea\u80fd\u4f7f\u7528\u914d\u7f6e\u7684\u7528\u6237\uff08xuxx\uff09\u548c\u5bc6\u7801(123)\u4e86\u3002\n2.\u7b2c\u4e8c\u79cd\uff1a\u7f16\u5199\u914d\u7f6e\u7c7b\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    /*\n    Spring Security 5\u4e4b\u540e\u5bc6\u7801\u5fc5\u987b\u8981\u52a0\u5bc6\uff0c\u6240\u4ee5\u8981\u914d\u7f6ePasswordEncoder\n    */\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        //\u5bc6\u7801\u7f16\u7801\u5668\uff0c\u5bc6\u7801\u4e0d\u52a0\u5bc6\uff0cNoOpPasswordEncoder\u5df2\u8fc7\u671f\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        //\u57fa\u4e8e\u5185\u5b58\u7684\u8ba4\u8bc1\n        auth.inMemoryAuthentication()\n                .withUser(&quot;xuxx&quot;).password(&quot;123&quot;).roles(&quot;admin&quot;)\n                .and()\n                .withUser(&quot;test&quot;).password(&quot;123&quot;).roles(&quot;user&quot;);\n    }\n}\n\n\u7531\u4e8e Spring Security \u652f\u6301\u591a\u79cd\u6570\u636e\u6e90\uff0c\u4f8b\u5982\u5185\u5b58\u3001\u6570\u636e\u5e93\u3001LDAP \u7b49\uff0c\u8fd9\u4e9b\u4e0d\u540c\u6765\u6e90\u7684\u6570\u636e\u88ab\u5171\u540c\u5c01\u88c5\u6210\u4e86\u4e00\u4e2a UserDetailService \u63a5\u53e3\uff0c\u4efb\u4f55\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8ba4\u8bc1\u6570\u636e\u6e90\u3002\n\u56e0\u6b64\u8fd8\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 WebSecurityConfigurerAdapter \u4e2d\u7684 userDetailsService \u65b9\u6cd5\u6765\u63d0\u4f9b\u4e00\u4e2a UserDetailService \u5b9e\u4f8b\u8fdb\u800c\u914d\u7f6e\u591a\u4e2a\u7528\u6237\uff1a\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    //\u4e0e\u4e0a\u9762\u4e00\u6837\uff0c\u4e5f\u662f\u57fa\u4e8e\u5185\u5b58\u7684\u5b9a\u4e49\u7528\u6237\u7684\u65b9\u6cd5\n    @Bean\n    protected UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(&quot;xuxx&quot;).password(&quot;123&quot;).roles(&quot;admin&quot;).build());\n        manager.createUser(User.withUsername(&quot;test&quot;).password(&quot;123&quot;).roles(&quot;user&quot;).build());\n        return manager;\n    }\n}\n\n\u4e24\u79cd\u57fa\u4e8e\u5185\u5b58\u5b9a\u4e49\u7528\u6237\u7684\u65b9\u6cd5\uff0c\u4efb\u9009\u4e00\u4e2a\u5373\u53ef\u3002\n2.Spring Security\u5165\u95e8\n\u770b\u770b Spring Security \u767b\u5f55\u6d41\u7a0b\n1.HttpSecurity\u7684\u914d\u7f6e\n\u8fd8\u662f\u5728\u4e4b\u524d\u7684\u914d\u7f6e\u7c7b\u4e2d\u8fdb\u884c\u914d\u7f6e\npackage com.xuxx.security.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /*\n    Spring5\u4e4b\u540e\u5bc6\u7801\u5fc5\u987b\u8981\u52a0\u5bc6\uff0c\u6240\u4ee5\u5fc5\u987b\u914d\u7f6ePasswordEncoder\n    */\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        //\u5bc6\u7801\u7f16\u7801\u5668\uff0c\u5bc6\u7801\u4e0d\u52a0\u5bc6\uff0cNoOpPasswordEncoder\u4ee5\u8fc7\u671f.\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        //\u57fa\u4e8e\u5185\u5b58\u7684\u8ba4\u8bc1\n        auth.inMemoryAuthentication()\n                .withUser(&quot;xuxx&quot;).password(&quot;123&quot;).roles(&quot;admin&quot;)\n                .and()\n                .withUser(&quot;test&quot;).password(&quot;123&quot;).roles(&quot;users&quot;);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()//\u5f00\u542f\u6388\u6743\u8bf7\u6c42\u914d\u7f6e\n                .antMatchers(&quot;/admin/**&quot;)//\u8981\u62e6\u622a\u7684\u8bf7\u6c42\u8def\u5f84\n                .hasRole(&quot;admin&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u4e00\u4e2a)\n                .antMatchers(&quot;/users/**&quot;)\n                .hasAnyRole(&quot;admin&quot;, &quot;users&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u5176\u4e2d\u4e00\u4e2a)\n               //.antMatchers().access(&quot;hasAnyRole(&#39;admin&#39;,&#39;user&#39;)&quot;)//\u548c\u4e0a\u9762\u6548\u679c\u4e00\u6837\n                .anyRequest()//\u5269\u4e0b\u7684\u5176\u4ed6\u7684\u8bf7\u6c42\n                .authenticated()//\u8ba4\u8bc1\u540e\u8bbf\u95ee\n                .and()\n                .formLogin()//\u8868\u5355\u767b\u5f55\n                .loginProcessingUrl(&quot;/doLogin&quot;)//\u8fdb\u884c\u767b\u5f55\u5904\u7406\u7684Url\n                .permitAll()//\u5141\u8bb8\u767b\u5f55\u76f8\u5173\u7684\u6240\u6709\u8bf7\u6c42\n                .and()\n                .csrf()\n                .disable();//\u65b9\u4fbf\u6d4b\u8bd5\uff0c\u5173\u95edcsrf(\u8de8\u57df)\u4fdd\u62a4\n    }\n}\n\n\u5728Controller\u4e2d\u6dfb\u52a0\u4e24\u4e2a\u63a5\u53e3\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;hello&quot;)\n    public String hello() {\n        return &quot;Hello Security!&quot;;\n    }\n\n    @GetMapping(&quot;admin/hello&quot;)\n    public String admin() {\n        return &quot;Hello admin\u7528\u6237&quot;;\n    }\n\n    @GetMapping(&quot;user/hello&quot;)\n    public String users() {\n        return &quot;Hello user\u7528\u6237&quot;;\n    }\n\n\u6d4b\u8bd5\u7ed3\u679c:\n\u4f7f\u7528xuxx\u767b\u5f55\u65f6\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5b9a\u4e49\u7684\u4e09\u4e2a\u63a5\u53e3\n\u4f7f\u7528test\u767b\u5f55\u65f6\uff0c\u53ea\u53ef\u4ee5\u8bbf\u95eehello\u548cuser/hello,\u8bbf\u95eeadmin/hello\u65f6\u62a5\u9519403(\u6743\u9650\u4e0d\u8db3)\n\n\u6b64\u65f6\u53d1\u73b0\u914d\u7f6e\u7684loginProcessingUrl(\"/doLogin\")\u8fd8\u6ca1\u7528\u4e0a\uff0c\u90a3\u4e48\u5c31\u7528\u4e00\u7528\uff0c\u6253\u5f00Insomnia\n\u4f7f\u7528POST\u65b9\u5f0f\u8bbf\u95eehttp://localhost:8080/doLogin?username=xuxx&amp;password=123\n\n\u867d\u7136\u62a5\u4e86404,\u5f53\u65f6\u5176\u5b9e\u5df2\u7ecf\u767b\u5f55\u6210\u529f\u4e86\uff0c404\u53ea\u662f\u56e0\u4e3aSecurity\u767b\u5f55\u6210\u529f\u540e\u5f80http://localhost:8080/\u8df3\u8f6c\uff0c\u4f46\u662f\u8fd9\u4e2a\u8def\u5f84\u4e0b\u6ca1\u6709\u4e1c\u897f\uff0c\u6240\u4ee5404\u4e86\uff0c\u4e0d\u4fe1\u7684\u8bdd\u518d\u8bbf\u95ee\u4e00\u4e0b\u914d\u7f6e\u7684\u63a5\u53e3\uff0c\u6210\u529f\u4e86\u3002\n\n2.\u767b\u5f55\u7684\u8be6\u7ec6\u914d\u7f6e\n\u5c5e\u4e8eHttpSecurity\u4e2d\u7684\u914d\u7f6e\npackage com.xuxx.security.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /*\n    Spring 5\u4e4b\u540e\u5bc6\u7801\u5fc5\u987b\u8981\u52a0\u5bc6\uff0c\u6240\u4ee5\u5fc5\u987b\u914d\u7f6ePasswordEncoder\n    */\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        //\u5bc6\u7801\u7f16\u7801\u5668\uff0c\u5bc6\u7801\u4e0d\u52a0\u5bc6\uff0cNoOpPasswordEncoder\u4ee5\u8fc7\u671f.\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        //\u57fa\u4e8e\u5185\u5b58\u7684\u8ba4\u8bc1\n        auth.inMemoryAuthentication()\n                .withUser(&quot;xuxx&quot;).password(&quot;123&quot;).roles(&quot;admin&quot;)\n                .and()\n                .withUser(&quot;test&quot;).password(&quot;123&quot;).roles(&quot;user&quot;);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()//\u5f00\u542f\u6388\u6743\u8bf7\u6c42\u914d\u7f6e\n                .antMatchers(&quot;/admin/**&quot;)//\u8981\u62e6\u622a\u7684\u8bf7\u6c42\u8def\u5f84\n                .hasRole(&quot;admin&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u4e00\u4e2a)\n                .antMatchers(&quot;/user/**&quot;)\n                .hasAnyRole(&quot;admin&quot;, &quot;user&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u5176\u4e2d\u4e00\u4e2a)\n//                .antMatchers(&quot;/user/**&quot;).access(&quot;hasAnyRole(&#39;admin&#39;,&#39;user&#39;)&quot;)//\u548c\u4e0a\u9762\u4e24\u884c\u6548\u679c\u4e00\u6837\n                .anyRequest()//\u5269\u4e0b\u7684\u5176\u4ed6\u8bf7\u6c42\n                .authenticated()//\u8ba4\u8bc1\u540e\u8bbf\u95ee\n                .and()\n                .formLogin()//\u8868\u5355\u767b\u5f55\n                .loginProcessingUrl(&quot;/doLogin&quot;)//\u8fdb\u884c\u767b\u5f55\u5904\u7406\u7684Url\n//                .loginPage(&quot;/login&quot;)//\u767b\u5f55\u9875\u9762\u7684Url\uff0c\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u767b\u5f55\u9875\u9762\n//                .usernameParameter(&quot;uname&quot;)//\u7528\u6237\u540d\u7684key\uff0c\u9ed8\u8ba4username\n//                .passwordParameter(&quot;pass&quot;)//\u5bc6\u7801\u7684key\uff0c\u9ed8\u8ba4password\n//                .successForwardUrl(&quot;/index&quot;)//\u767b\u5f55\u6210\u529f\u81ea\u52a8\u8df3\u8f6c\uff0c\u4e00\u822c\u7528\u4e8e\u524d\u540e\u7aef\u4e0d\u5206\n                //\u767b\u5f55\u6210\u529f\u7684\u5904\u7406\uff0c\u4e00\u822c\u7528\u4e8e\u524d\u540e\u7aef\u5206\u79bb\n                .successHandler(new AuthenticationSuccessHandler() {\n                    //authentication\u4e2d\u4fdd\u5b58\u4e86\u767b\u5f55\u6210\u529f\u7684\u7528\u6237\u4fe1\u606f\n                    @Override\n                    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n                                                        Authentication authentication) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 200);\n                        map.put(&quot;msg&quot;, authentication.getPrincipal());\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n//                .failureForwardUrl(&quot;/login_error&quot;)//\u767b\u5f55\u5931\u8d25\u81ea\u52a8\u8df3\u8f6c\n                //\u767b\u5f55\u5931\u8d25\u7684\u5904\u7406\n                .failureHandler(new AuthenticationFailureHandler() {\n                    @Override\n                    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 401);\n                        //\u6839\u636e\u5f02\u5e38\u7c7b\u578b\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u76f8\u5173\u5f02\u5e38\u53ef\u4ee5\u67e5\u770bAuthenticationException\u7684\u5b50\u7c7b\n                        if (exception instanceof LockedException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u88ab\u9501\u5b9a\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                            //Security\u5c4f\u853d\u4e86UsernameNotFoundException\uff0c\u629b\u51faUsernameNotFoundException\u4e5f\u4f1a\u53d8\u6210BadCredentialsException\uff0c\u9632\u6b62\u649e\u5e93\n                        } else if (exception instanceof BadCredentialsException) {\n                            map.put(&quot;msg&quot;, &quot;\u7528\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof DisabledException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u88ab\u7981\u7528\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof AccountExpiredException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u4ee5\u8fc7\u671f\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof CredentialsExpiredException) {\n                            map.put(&quot;msg&quot;, &quot;\u5bc6\u7801\u4ee5\u8fc7\u671f\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else {\n                            map.put(&quot;msg&quot;, &quot;\u56e0\u672a\u77e5\u539f\u56e0\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        }\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n                .permitAll()//\u5141\u8bb8\u767b\u5f55\u76f8\u5173\u7684\u6240\u6709\u8bf7\u6c42\n                .and()\n                .logout()//\u6ce8\u9500\u767b\u5f55\n                .logoutUrl(&quot;/logout&quot;)\n                //.logoutSuccessUrl(&quot;/login&quot;)//\u6ce8\u9500\u6210\u529f\u540e\u81ea\u52a8\u8df3\u8f6c\n                .logoutSuccessHandler(new LogoutSuccessHandler() {//\u6ce8\u9500\u6210\u529f\u7684\u56de\u8c03\n                    @Override\n                    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 200);\n                        map.put(&quot;msg&quot;, &quot;\u6ce8\u9500\u6210\u529f&quot;);\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n                .and()\n                .csrf()\n                .disable()//\u4e3a\u4e86\u65b9\u4fbf\u6d4b\u8bd5\uff0c\u5148\u5173\u95edcsrf(\u8de8\u57df)\u4fdd\u62a4\n                //\u672a\u8ba4\u8bc1\u5904\u7406\u65b9\u6848\uff0c\u8fd9\u91cc\u662f\u7ed9\u524d\u7aef\u4e00\u4e2a\u5c1a\u672a\u767b\u5f55\u7684\u63d0\u793a\uff0c\u524d\u7aef\u6839\u636e\u63d0\u793a\u4fe1\u606f\uff0c\u518d\u51b3\u5b9a\u9875\u9762\u8df3\u8f6c\u3002\n                .exceptionHandling()\n                .authenticationEntryPoint(new AuthenticationEntryPoint() {\n                    @Override\n                    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        out.write(&quot;\u5c1a\u672a\u767b\u5f55\uff0c\u8bf7\u5148\u767b\u5f55&quot;);\n                        out.flush();\n                        out.close();\n                    }\n                });\n    }\n}\n\n\u6d4b\u8bd5\uff1a\n\n\n\n3.\u6ce8\u9500\u767b\u5f55\u914d\u7f6e\n\u4e0e\u767b\u5f55\u8868\u5355\u914d\u7f6e\u4e00\u6837\uff0c\u8fd8\u662f\u5c5e\u4e8eHttpSecurity\u4e2d\u7684\u914d\u7f6e\npackage com.xuxx.security.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /*\n    Spring5\u4e4b\u540e\u5bc6\u7801\u5fc5\u987b\u8981\u52a0\u5bc6\uff0c\u6240\u4ee5\u5fc5\u987b\u914d\u7f6ePasswordEncoder\n    */\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        //\u5bc6\u7801\u7f16\u7801\u5668\uff0c\u5bc6\u7801\u4e0d\u52a0\u5bc6\uff0cNoOpPasswordEncoder\u4ee5\u8fc7\u671f.\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        //\u57fa\u4e8e\u5185\u5b58\u7684\u8ba4\u8bc1\n        auth.inMemoryAuthentication()\n                .withUser(&quot;xuxx&quot;).password(&quot;123&quot;).roles(&quot;admin&quot;)\n                .and()\n                .withUser(&quot;test&quot;).password(&quot;123&quot;).roles(&quot;user&quot;);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()//\u5f00\u542f\u6388\u6743\u8bf7\u6c42\u914d\u7f6e\n                .antMatchers(&quot;/admin/**&quot;)//\u8981\u62e6\u622a\u7684\u8bf7\u6c42\u8def\u5f84\n                .hasRole(&quot;admin&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u4e00\u4e2a)\n                .antMatchers(&quot;/user/**&quot;)\n                .hasAnyRole(&quot;admin&quot;, &quot;user&quot;)//\u6240\u9700\u8981\u7684\u89d2\u8272(\u5176\u4e2d\u4e00\u4e2a)\n//                .antMatchers().access(&quot;hasAnyRole(&#39;admin&#39;,&#39;user&#39;)&quot;)//\u548c\u4e0a\u9762\u6548\u679c\u4e00\u6837\n                .anyRequest()//\u5269\u4e0b\u7684\u5176\u4ed6\u8bf7\u6c42\n                .authenticated()//\u8ba4\u8bc1\u540e\u8bbf\u95ee\n                .and()\n                .formLogin()//\u8868\u5355\u767b\u5f55\n                .loginProcessingUrl(&quot;/doLogin&quot;)//\u8fdb\u884c\u767b\u5f55\u5904\u7406\u7684Url\n//                .loginPage(&quot;/login&quot;)//\u767b\u5f55\u9875\u9762\u7684Url\uff0c\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u767b\u5f55\u9875\u9762\n//                .usernameParameter(&quot;uname&quot;)//\u7528\u6237\u540d\u7684key\uff0c\u9ed8\u8ba4username\n//                .passwordParameter(&quot;pass&quot;)//\u5bc6\u7801\u7684key\uff0c\u9ed8\u8ba4password\n//                .successForwardUrl(&quot;/index&quot;)//\u767b\u5f55\u6210\u529f\u81ea\u52a8\u8df3\u8f6c\uff0c\u4e00\u822c\u7528\u4e8e\u524d\u540e\u7aef\u4e0d\u5206\n                .successHandler(new AuthenticationSuccessHandler() {//\u767b\u5f55\u6210\u529f\u7684\u5904\u7406\uff0c\u4e00\u822c\u7528\u4e8e\u524d\u540e\u7aef\u5206\u79bb\n                    //authentication\u4e2d\u4fdd\u5b58\u4e86\u767b\u5f55\u6210\u529f\u7684\u7528\u6237\u4fe1\u606f\n                    @Override\n                    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n                                                        Authentication authentication) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 200);\n                        map.put(&quot;msg&quot;, authentication.getPrincipal());\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n//                .failureForwardUrl(&quot;/login_error&quot;)//\u767b\u5f55\u5931\u8d25\u81ea\u52a8\u8df3\u8f6c\n                .failureHandler(new AuthenticationFailureHandler() {//\u767b\u5f55\u5931\u8d25\u7684\u5904\u7406\n                    @Override\n                    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 401);\n                        //\u6839\u636e\u5f02\u5e38\u7c7b\u578b\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u76f8\u5173\u5f02\u5e38\u53ef\u4ee5\u67e5\u770bAuthenticationException\u7684\u5b50\u7c7b\n                        if (exception instanceof LockedException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u88ab\u9501\u5b9a\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        //Security\u5c4f\u853d\u4e86UsernameNotFoundException\uff0c\u629b\u51faUsernameNotFoundException\u4e5f\u4f1a\u53d8\u6210BadCredentialsException\uff0c\u9632\u6b62\u649e\u5e93\n                        } else if (exception instanceof BadCredentialsException) {\n                            map.put(&quot;msg&quot;, &quot;\u7528\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof DisabledException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u88ab\u7981\u7528\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof AccountExpiredException) {\n                            map.put(&quot;msg&quot;, &quot;\u8d26\u6237\u4ee5\u8fc7\u671f\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else if (exception instanceof CredentialsExpiredException) {\n                            map.put(&quot;msg&quot;, &quot;\u5bc6\u7801\u4ee5\u8fc7\u671f\uff0c\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        } else {\n                            map.put(&quot;msg&quot;, &quot;\u56e0\u672a\u77e5\u539f\u56e0\u767b\u5f55\u5931\u8d25\uff01&quot;);\n                        }\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n                .permitAll()//\u5141\u8bb8\u767b\u5f55\u76f8\u5173\u7684\u6240\u6709\u8bf7\u6c42\n                .and()\n                .logout()//\u6ce8\u9500\u767b\u5f55\n                .logoutUrl(&quot;/logout&quot;)\n                //.logoutSuccessUrl(&quot;/login&quot;)//\u6ce8\u9500\u6210\u529f\u540e\u81ea\u52a8\u8df3\u8f6c\n                .logoutSuccessHandler(new LogoutSuccessHandler() {//\u6ce8\u9500\u6210\u529f\u7684\u56de\u8c03\n                    @Override\n                    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n                        response.setContentType(&quot;application/json;charset=utf-8&quot;);\n                        PrintWriter out = response.getWriter();\n                        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                        map.put(&quot;status&quot;, 200);\n                        map.put(&quot;msg&quot;, &quot;\u6ce8\u9500\u6210\u529f&quot;);\n                        out.write(new ObjectMapper().writeValueAsString(map));\n                        out.flush();\n                        out.close();\n                    }\n                })\n                .and()\n                .csrf()\n                .disable();//\u4e3a\u4e86\u65b9\u4fbf\u6d4b\u8bd5\uff0c\u5148\u5173\u95edcsrf(\u8de8\u57df)\u4fdd\u62a4\n    }\n}\n\n\u6d4b\u8bd5\uff1a\u5148\u767b\u5f55\uff0c\u518d\u8bbf\u95eehttp://localhost:8080/logout(GET\uff0cPOST\u90fd\u884c)\n\n4.\u591a\u4e2aHttpSecurity\n\u8981\u5148\u53bb\u9664\u4e0a\u9762\u914d\u7f6e\u7684\u5355\u4e2a\u7684HttpSecurity\n\npackage com.xuxx.security.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n/**\n * \u591a\u4e2aHttp Security\u7684\u914d\u7f6e\n */\n@Configuration\npublic class MultiHttpSecurity {\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    //\u591a\u4e2aHttp Security\u53ef\u4ee5\u5171\u4eab\n    @Autowired\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"xuxx\").password(\"123\").roles(\"admin\")\n                .and()\n                .withUser(\"test\").password(\"123\").roles(\"user\");\n    }\n\n    @Configuration\n    @Order(1)//\u5b58\u5728\u591a\u4e2a\u76f8\u540c\u7684bean\u65f6\u5c31\u5b58\u5728\u4f18\u5148\u7ea7\u7684\u95ee\u9898\n    public static class AdminSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            //\u53ea\u4f1a\u62e6\u622a\u7b26\u5408/admin/**\u7684\u6240\u6709\u8bf7\u6c42\n            http.antMatcher(\"/admin/**\").authorizeRequests().anyRequest().hasRole(\"admin\");\n        }\n    }\n\n    @Configuration\n    //@Order//\u4e0d\u914d\u7f6eorder\u65f6\u662f\u4f18\u5148\u7ea7\u6700\u4f4e\u7684,2\u768431\u6b21\u65b9-1\n    public static class OtherSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http.authorizeRequests().anyRequest().authenticated()\n                    .and()\n                    .formLogin()\n                    .loginProcessingUrl(\"/doLogin\")\n                    .permitAll()\n                    .and()\n                    .csrf()\n                    .disable();\n        }\n    }\n}\n\u6d4b\u8bd5\n\n\n\u56e0\u4e3a\u4f7f\u7528xuxx\u767b\u5f55\u4e86\uff0c\u8bbf\u95ee\u5176\u4ed6\u63a5\u53e3\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\u518d\u4f7f\u7528test\u767b\u5f55\u8bd5\u8bd5\n\n\n5.\u5bc6\u7801\u52a0\u5bc6\n\u4e0a\u9762\u7684\u4f8b\u5b50\u90fd\u662f\u4f7f\u7528\u7684\u660e\u6587\u5bc6\u7801\uff0c\u8fd9\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\uff0c\u6240\u4ee5\u8fd8\u662f\u52a0\u5bc6\u4e0b\u5427\u3002\n\u7531Spring Security\u63d0\u4f9b\u7684BCryptPasswordEncoder\u91c7\u7528SHA-256+\u968f\u673a\u76d0+\u5bc6\u94a5\u5bf9\u660e\u6587\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u3002SHA\u7cfb\u5217\u662f\u54c8\u5e0c\u7b97\u6cd5\uff0c\u4e0d\u662f\u52a0\u5bc6\u7b97\u6cd5\uff0c\u4f7f\u7528\u52a0\u5bc6\u7b97\u6cd5\u610f\u5473\u7740\u53ef\u4ee5\u89e3\u5bc6\uff08\u8fd9\u4e2a\u4e0e\u7f16\u7801/\u89e3\u7801\u4e00\u6837\uff09\uff0c\u4f46\u662f\u91c7\u7528\u54c8\u5e0c\u5904\u7406\uff0c\u5176\u8fc7\u7a0b\u662f\u4e0d\u53ef\u9006\u7684\u3002\n\n\u52a0\u5bc6(encode)\uff1a\u6ce8\u518c\u7528\u6237\u65f6\uff0c\u4f7f\u7528SHA-256+\u968f\u673a\u76d0+\u5bc6\u94a5\u628a\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u5f97\u5230\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u5c06\u5176\u5b58\u5165\u6570\u636e\u5e93\u4e2d\u3002\n\n\u5bc6\u7801\u5339\u914d(matches)\uff1a\u7528\u6237\u767b\u5f55\u65f6\uff0c\u5bc6\u7801\u5339\u914d\u9636\u6bb5\u5e76\u6ca1\u6709\u8fdb\u884c\u5bc6\u7801\u89e3\u5bc6\uff08\u56e0\u4e3a\u5bc6\u7801\u7ecf\u8fc7Hash\u5904\u7406\uff0c\u662f\u4e0d\u53ef\u9006\u7684\uff09\uff0c\u800c\u662f\u4f7f\u7528\u76f8\u540c\u7684\u7b97\u6cd5\u628a\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u5f97\u5230\u5bc6\u7801\u7684hash\u503c\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u5230\u7684\u5bc6\u7801\u54c8\u5e0c\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u76f8\u540c\uff0c\u8bf4\u660e\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u6b63\u786e\u3002\n\n\n\u8fd9\u6b63\u662f\u4e3a\u4ec0\u4e48\u5904\u7406\u5bc6\u7801\u65f6\u8981\u7528\u54c8\u5e0c\u7b97\u6cd5\uff0c\u800c\u4e0d\u7528\u52a0\u5bc6\u7b97\u6cd5\u3002\u56e0\u4e3a\u8fd9\u6837\u5904\u7406\u540e\uff0c\u5373\u4f7f\u6570\u636e\u5e93\u6cc4\u6f0f\uff0c\u9ed1\u5ba2\u4e5f\u5f88\u96be\u7834\u89e3\u5bc6\u7801\uff08\u53ea\u80fd\u7528\u5f69\u8679\u8868\uff09\u3002\n\u5148\u770b\u770b\u6548\u679c\n@SpringBootTest\nclass SecurityApplicationTests {\n\n    @Test\n    void contextLoads() {\n        for (int i = 0; i &lt; 10; i++) {\n            //\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u4f20\u5165\u5f3a\u5ea6(\u5bc6\u94a5\u8fed\u4ee3\u6b21\u6570)\u9ed8\u8ba4\u4e3a10\u6b21\n            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();\n            System.out.println(passwordEncoder.encode(&quot;123&quot;));\n        }\n    }\n}\n\n\u867d\u7136\u53ea\u662f\u52a0\u5bc6123,\u4f46\u662f\u6bcf\u6b21\u7684\u7ed3\u679c\u90fd\u4e0d\u540c\u3002\n\n$2a$10$cGdG1DACEh2t4AekoCiZ1OyJWHbT4N3kFtSGDg85XNjn6SFb2cDYG\n$2a$10$nFCK0tHN3lDXCi8ptZd64usYbxU8gKTRiOSTZ8o1uvfEqWB5C9fwu\n$2a$10$1uP74goNp/gwHZehn3Lqfeyz51BnLGCG5xg63zRnIDTZoMa7lJeje\n$2a$10$N4CdezU05HFf05cK.eTh3uSuzS6NV1gODD9h3nNdmK71Fp81mYMwy\n$2a$10$/tdqqGfDrHh3Jx6IbGOLeu7hJ86IVYljImUDfrzQP5EsVbx70Sy/q\n$2a$10$bK6ItziD2vcMdvgiUZ5PkudaMxkswnz7RhEKnCsmhl/bGFWGnA0XG\n$2a$10$MIBXmxMyQFtrQ4awOtELXOBAvE8d1B54gCsv0kG6mPM9EooY35MPq\n$2a$10$0zCKSIqQVMhJM8OGs/35tOne2EZK/oj.v6LXjkH1FlYPNRdipjdhu\n$2a$10$9x/3T.nAUM1YOWhhR1xORuZEbRad5mc3.Rh6MBE2pPkNGUIUG9mYa\n$2a$10$xprjfwyAndoCSO3uFjS5ce7lLslmnKo7fNo/jOuEifN4PEZjy8ZTu\n\u7b80\u5355\u4f7f\u7528\u4e00\u4e0b\uff0c\u6539\u9020\u4e0a\u9762\u7684MultiHttpSecurity\uff0c\u5c06\u660e\u6587\u5bc6\u7801\u6362\u6210\u4f7f\u7528BCryptPasswordEncoder\u751f\u6210\u7684\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\uff0c\u5f53\u7136\uff0c\u8981\u6ce8\u5165\u7684PasswordEncoder\u4e5f\u8981\u6362\u6210BCryptPasswordEncoder\u3002\n\n/**\n * \u591a\u4e2aHttp Security\u7684\u914d\u7f6e\n */\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\npublic class MultiHttpSecurity {\n    @Bean\n    PasswordEncoder passwordEncoder() {\n//        return NoOpPasswordEncoder.getInstance();\n        return new BCryptPasswordEncoder();\n    }\n\n    //\u591a\u4e2aHttp Security\u53ef\u4ee5\u5171\u4eab\n    @Autowired\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n//                .withUser(\"xuxx\").password(\"123\").roles(\"admin\")              .withUser(\"xuxx\").password(\"$2a$10$gqUyIaadTdNQYVq7M1iRFO4Wl/sdvCPBvrBUwlX7u8qjbRFU7EoRK\").roles(\"admin\")\n                .and()\n//                .withUser(\"test\").password(\"123\").roles(\"user\");             .withUser(\"test\").password(\"$2a$10$tKe91qK4VcLRfS0rQ2THaeF/beXZKq283HaYJdogaOIVbiB7HaQ0u\").roles(\"user\");\n    }\n\n    @Configuration\n    @Order(1)//\u5b58\u5728\u591a\u4e2a\u76f8\u540c\u7684bean\u65f6\u5c31\u5b58\u5728\u4f18\u5148\u7ea7\u7684\u95ee\u9898\n    public static class AdminSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            //\u53ea\u4f1a\u62e6\u622a\u7b26\u5408/admin/**\u7684\u6240\u6709\u8bf7\u6c42\n            http.antMatcher(\"/admin/**\").authorizeRequests().anyRequest().hasRole(\"admin\");\n        }\n    }\n\n    @Configuration\n    //@Order//\u4e0d\u914d\u7f6eorder\u65f6\u662f\u4f18\u5148\u7ea7\u6700\u4f4e\u7684,2\u768431\u6b21\u65b9-1\n    public static class OtherSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http.authorizeRequests().anyRequest().authenticated()\n                    .and()\n                    .formLogin()\n                    .loginProcessingUrl(\"/doLogin\")\n                    .permitAll()\n                    .and()\n                    .csrf()\n                    .disable();\n        }\n    }\n}\n\u6d4b\u8bd5\uff1a\u6b64\u65f6\u5bc6\u7801\u8fd8\u662f\u4f7f\u7528123\u4f9d\u65e7\u53ef\u4ee5\u767b\u5f55\uff0c\u4f46\u662f\u5982\u679c\u6b64\u65f6\u8981\u5b58\u50a8\u7684\u5bc6\u7801\u7684\u8bdd\uff0c\u90a3\u4e48\u8981\u5b58\u50a8\u7684\u5bc6\u7801\u5df2\u7ecf\u52a0\u5bc6\u4e86\u3002\n\n6.\u65b9\u6cd5\u5b89\u5168\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b, Spring Security \u5e76\u4e0d\u542f\u7528\u65b9\u6cd5\u7ea7\u7684\u5b89\u5168\u7ba1\u63a7. \u542f\u7528\u65b9\u6cd5\u7ea7\u7684\u7ba1\u63a7\u540e, \u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u65b9\u6cd5\u901a\u8fc7\u6ce8\u89e3\u8bbe\u7f6e\u4e0d\u540c\u7684\u8bbf\u95ee\u6761\u4ef6.\n\u542f\u7528\u65b9\u6cd5\u7ea7\u7684\u7ba1\u63a7\u4ee3\u7801\u662f, \u5728\u4e00\u4e2aSecurity\u914d\u7f6e\u7c7b, \u52a0\u4e0a@EnableGlobalMethodSecurity() \u6ce8\u89e3, \u901a\u8fc7@EnableGlobalMethodSecurity\u7684\u53c2\u6570\u5f00\u542f\u76f8\u5e94\u7684\u65b9\u6cd5\u7ea7\u7684\u7ba1\u63a7.\n/**\n * \u591a\u4e2aHttp Security\u7684\u914d\u7f6e\n */\n@Configuration\n@EnableGlobalMethodSecurity(jsr250Enabled = true, securedEnabled = true, prePostEnabled = true)\npublic class MultiHttpSecurity {}\n\nSpring Security \u652f\u6301\u4e09\u79cd\u65b9\u6cd5\u7ea7\u6ce8\u89e3, \u5206\u522b\u662f JSR-250 \u6ce8\u89e3/@Secured \u6ce8\u89e3/prePostEnabled\u6ce8\u89e3. \u8fd9\u4e9b\u6ce8\u89e3\u4e0d\u4ec5\u53ef\u4ee5\u76f4\u63a5\u52a0 controller \u65b9\u6cd5\u4e0a, \u4e5f\u53ef\u4ee5\u6ce8\u89e3 Service \u6216 DAO \u7c7b\u4e2d\u7684\u65b9\u6cd5.\nJSR-250 \u6ce8\u89e3\n\u901a\u8fc7 @EnableGlobalMethodSecurity(jsr250Enabled = true), \u5f00\u542f JSR-250 \u6ce8\u89e3.\n\n@DenyAll \u6ce8\u89e3\uff1a\u62d2\u7edd\u6240\u6709\u7684\u8bbf\u95ee\n@PermitAll \u6ce8\u89e3\uff1a\u8fd0\u884c\u6240\u6709\u8bbf\u95ee\n@RolesAllowed({\"USER\",\"ADMIN\"})\uff1a\u8be5\u65b9\u6cd5\u53ea\u5141\u8bb8\u6709 ROLE_USER \u6216 ROLE_ADMIN \u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee.\n\n@Secured \u6ce8\u89e3\n\u901a\u8fc7 @EnableGlobalMethodSecurity(securedEnabled = true), \u5f00\u542f @Secured \u6ce8\u89e3.\n\u53ea\u6709\u6ee1\u8db3\u89d2\u8272\u7684\u7528\u6237\u624d\u80fd\u8bbf\u95ee\u88ab\u6ce8\u89e3\u7684\u65b9\u6cd5, \u5426\u5219\u5c06\u4f1a\u629b\u51fa AccessDenied (\u7981\u6b62\u8bbf\u95ee)\u5f02\u5e38.\n\u4f8b:\n@Secured(&quot;ROLE_TELLER&quot;,&quot;ROLE_ADMIN&quot;)//\u8be5\u65b9\u6cd5\u53ea\u5141\u8bb8 ROLE_TELLER \u6216 ROLE_ADMIN \u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee.\n@Secured(&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot;)//\u8be5\u65b9\u6cd5\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bbf\u95ee.\n\n@PreAuthorize \u7c7b\u578b\u7684\u6ce8\u89e3(\u652f\u6301 Spring \u8868\u8fbe\u5f0f)\n@EnableGlobalMethodSecurity(prePostEnabled = true), \u5f00\u542f prePostEnabled \u76f8\u5173\u7684\u6ce8\u89e3.\nJSR-250 \u548c @Secured \u6ce8\u89e3\u529f\u80fd\u8f83\u5f31, \u4e0d\u652f\u6301 Spring EL \u8868\u8fbe\u5f0f. \n\u63a8\u8350\u4f7f\u7528 @PreAuthorize \u7c7b\u578b\u7684\u6ce8\u89e3.\n \u5177\u4f53\u67094\u4e2a\u6ce8\u89e3.\n\n@PreAuthorize \u6ce8\u89e3\uff1a\u5728\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d, \u57fa\u4e8e\u8868\u8fbe\u5f0f\u7ed3\u679c\u6765\u9650\u5236\u65b9\u6cd5\u7684\u4f7f\u7528.\n@PostAuthorize \u6ce8\u89e3\uff1a \u5141\u8bb8\u65b9\u6cd5\u8c03\u7528, \u4f46\u662f\u5982\u679c\u8868\u8fbe\u5f0f\u7ed3\u679c\u4e3a false, \u5c06\u629b\u51fa\u4e00\u4e2a\u5b89\u5168\u6027\u5f02\u5e38.\n@PostFilter \u6ce8\u89e3\uff1a\u5141\u8bb8\u65b9\u6cd5\u8c03\u7528, \u4f46\u5fc5\u8981\u6309\u7167\u8868\u8fbe\u5f0f\u6765\u8fc7\u6ee4\u65b9\u6cd5\u7684\u7ed3\u679c.\n@PreFilter \u6ce8\u89e3,\uff1a\u5141\u8bb8\u65b9\u6cd5\u8c03\u7528, \u4f46\u5fc5\u987b\u5728\u8fdb\u5165\u65b9\u6cd5\u4e4b\u524d\u8fc7\u6765\u8f93\u5165\u503c.\n\n\u4f8b:\n@PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;) //\u5fc5\u987b\u5177\u6709ROLE_ADMIN \u89d2\u8272\npublic void addBook(Book book);\n\n//\u5fc5\u987b\u540c\u65f6\u5177\u5907 ROLE_ADMIN \u548c ROLE_DBA \u89d2\u8272\n@PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;) AND hasRole(&#39;DBA&#39;)&quot;)\npublic void addBook(Book book);\n\n@PreAuthorize (&quot;#book.owner == authentication.name&quot;)\npublic void deleteBook(Book book);\n\n@PostAuthorize (&quot;returnObject.owner == authentication.name&quot;)\npublic Book getBook();\n\n@PreAuthorize \u8868\u8fbe\u5f0f\n\nreturnObject \u4fdd\u7559\u540d\n\u5bf9\u4e8e @PostAuthorize \u548c @PostFilter \u6ce8\u89e3, \u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528 returnObject \u4fdd\u7559\u540d, returnObject \u4ee3\u8868\u7740\u88ab\u6ce8\u89e3\u65b9\u6cd5\u7684\u8fd4\u56de\u503c, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 returnObject \u4fdd\u7559\u540d\u5bf9\u6ce8\u89e3\u65b9\u6cd5\u7684\u7ed3\u679c\u8fdb\u884c\u9a8c\u8bc1.\n@PostAuthorize (&quot;returnObject.owner == authentication.name&quot;)\npublic Book getBook();\n\n\n\u8868\u8fbe\u5f0f\u4e2d\u7684 # \u53f7\n\u5728\u8868\u8fbe\u5f0f\u4e2d, \u53ef\u4ee5\u4f7f\u7528 #argument123 \u7684\u5f62\u5f0f\u6765\u4ee3\u8868\u6ce8\u89e3\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570 argument123.\n@PreAuthorize (&quot;#book.owner == authentication.name&quot;)\npublic void deleteBook(Book book);\n\n/*\u8fd8\u6709\u4e00\u79cd #argument123 \u7684\u5199\u6cd5, \u5373\u4f7f\u7528 Spring Security @P\u6ce8\u89e3\u6765\u4e3a\u65b9\u6cd5\u53c2\u6570\u8d77\u522b\u540d, \u7136\u540e\u5728 @PreAuthorize \u7b49\u6ce8\u89e3\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u8be5\u522b\u540d. \u4e0d\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5, \u4ee3\u7801\u53ef\u8bfb\u6027\u8f83\u5dee.*/\n\n@PreAuthorize(&quot;#c.name == authentication.name&quot;)\npublic void doSomething(@P(&quot;c&quot;) Contact contact);\n\n\n\u5185\u7f6e\u8868\u8fbe\u5f0f\u6709:\n| \u8868\u8fbe\u5f0f                                                       | \u5907\u6ce8                                                         |\n | ------------------------------------------------------------ | :----------------------------------------------------------- |\n | hasRole([role])                                              | \u5982\u679c\u6709\u5f53\u524d\u89d2\u8272, \u5219\u8fd4\u56de true(\u4f1a\u81ea\u52a8\u52a0\u4e0a ROLE \u524d\u7f00)           |\n | hasAnyRole([role1, role2])                                   | \u5982\u679c\u6709\u4efb\u4e00\u89d2\u8272\u5373\u53ef\u901a\u8fc7\u6821\u9a8c, \u8fd4\u56detrue,(\u4f1a\u81ea\u52a8\u52a0\u4e0a ROLE \u524d\u7f00) |\n | hasAuthority([authority])                                    | \u5982\u679c\u6709\u6307\u5b9a\u6743\u9650, \u5219\u8fd4\u56de true                                  |\n | hasAnyAuthority([authority1, authority2])                    | \u5982\u679c\u6709\u4efb\u4e00\u6307\u5b9a\u6743\u9650, \u5219\u8fd4\u56detrue                               |\n | principal                                                    | \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684 principal \u4e3b\u4f53\u5bf9\u8c61                            |\n | authentication                                               | \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684 authentication \u5bf9\u8c61,                          |\n | permitAll                                                    | \u603b\u662f\u8fd4\u56de true, \u8868\u793a\u5168\u90e8\u5141\u8bb8                                  |\n | denyAll                                                      | \u603b\u662f\u8fd4\u56de false, \u4ee3\u8868\u5168\u90e8\u62d2\u7edd                                 |\n | isAnonymous()                                                | \u5982\u679c\u662f\u533f\u540d\u8bbf\u95ee, \u8fd4\u56detrue                                     |\n | isRememberMe()                                               | \u5982\u679c\u662fremember-me \u81ea\u52a8\u8ba4\u8bc1, \u5219\u8fd4\u56de true                      |\n | isAuthenticated()                                            | \u5982\u679c\u4e0d\u662f\u533f\u540d\u8bbf\u95ee, \u5219\u8fd4\u56detrue                                 |\n | isFullAuthenticated()                                        | \u5982\u679c\u4e0d\u662f\u533f\u540d\u8bbf\u95ee\u6216remember-me\u8ba4\u8bc1\u767b\u9646, \u5219\u8fd4\u56detrue            |\n | hasPermission(Object target, Object permission)              |                                                              |\n | hasPermission(Object target, String targetType, Object permission) |                                                              |\n\n\n\u5b8c\u6574\u6f14\u793a\uff1a\n/**\n * \u591a\u4e2aHttp Security\u7684\u914d\u7f6e\n * \u6b64\u65f6@EnableGlobalMethodSecurity\u5f00\u542f\u4e862\u79cd\u65b9\u6cd5\u5b89\u5168\u7684\u6ce8\u89e3\uff0c@Secured\u6ce8\u89e3\u3001@PreAuthorize \u7c7b\u578b\u7684\u6ce8\u89e3\n */\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\npublic class MultiHttpSecurity {\n    ...//\u5185\u5bb9\u540c\u4e0a\n}\n\n@Service\npublic class MethodService {\n\n    @PreAuthorize(&quot;hasAnyRole(&#39;admin&#39;,&#39;user&#39;)&quot;)\n    public String hello() {\n        return &quot;Hello&quot;;\n    }\n\n    @PreAuthorize(&quot;hasRole(&#39;admin&#39;)&quot;)\n    public String admin() {\n        return &quot;Hello Admin&quot;;\n    }\n\n    @Secured(&quot;ROLE_user&quot;)\n    public String user() {\n        return &quot;Hello User&quot;;\n    }\n}\n\n@RestController\npublic class HelloController {\n    @Autowired\n    private MethodService methodService;\n\n    @GetMapping(&quot;hello_both&quot;)\n    public String hello_both() {\n        return methodService.hello();\n    }\n\n    @GetMapping(&quot;hello_user&quot;)\n    public String hello_users() {\n        return methodService.user();\n    }\n\n    @GetMapping(&quot;hello_admin&quot;)\n    public String hello_admin() {\n        return methodService.admin();\n    }\n}\n\n\u6d4b\u8bd5\uff1a\n\u4f7f\u7528test\u767b\u5f55\u65f6\uff0c\u53ef\u4ee5\u8c03\u7528hello_both\u3001hello_user\uff0c\u8c03\u7528hello_admin\u65f6403\u3002\n\n\u4f7f\u7528xuxx\u767b\u5f55\u65f6\uff0c\u4e09\u4e2a\u63a5\u53e3\u90fd\u53ef\u4ee5\u8bbf\u95ee\u3002\n7.\u89d2\u8272\u7ee7\u627f\n\u5728Security\u914d\u7f6e\u7c7b\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\n/**\n * \u89d2\u8272\u7ee7\u627f\n * @return\n */\n@Bean\nRoleHierarchy roleHierarchy() {\n    RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();\n    String hierarchy = &quot;ROLE_dba &gt; ROLE_admin \\n ROLE_admin &gt; ROLE_user&quot;;\n    roleHierarchy.setHierarchy(hierarchy);\n    return roleHierarchy;\n}\n\nSpringSecurity \u5728\u89d2\u8272\u7ee7\u627f\u4e0a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5199\u6cd5\uff0c\u5728 Spring Boot2.0.8\uff08\u5bf9\u5e94 Spring Security5.0.11\uff09\u4e0a\u9762\u662f\u4e00\u79cd\u5199\u6cd5\uff0c\u4ece Spring Boot2.1.0\uff08\u5bf9\u5e94 Spring Security5.1.1\uff09\u53c8\u662f\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\u3002\n1.\u4ee5\u524d\u7684\u5199\u6cd5\n\u8fd9\u91cc\u8bf4\u7684\u4ee5\u524d\u5199\u6cd5\uff0c\u5c31\u662f\u6307 SpringBoot2.0.8\uff08\u542b\uff09\u4e4b\u524d\u7684\u5199\u6cd5\uff0c\u5728\u4e4b\u524d\u7684\u5199\u6cd5\u4e2d\uff0c\u89d2\u8272\u7ee7\u627f\u53ea\u9700\u8981\u5f00\u53d1\u8005\u63d0\u4f9b\u4e00\u4e2a RoleHierarchy \u63a5\u53e3\u7684\u5b9e\u4f8b\u5373\u53ef\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a\n@BeanRoleHierarchy roleHierarchy() {    \n    RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();    \n    String hierarchy = &quot;ROLE_dba &gt; ROLE_admin ROLE_admin &gt; ROLE_user&quot;;\n    roleHierarchy.setHierarchy(hierarchy);    \n    return roleHierarchy;\n}\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a RoleHierarchy \u63a5\u53e3\u7684\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u4e86\u89d2\u8272\u4e4b\u95f4\u7684\u7ee7\u627f\u5173\u7cfb\uff0c ROLE_dba \u5177\u5907 ROLE_admin \u7684\u6240\u6709\u6743\u9650\uff0c\u800c ROLE_admin \u5219\u5177\u5907 ROLE_user \u7684\u6240\u6709\u6743\u9650\uff0c\u7ee7\u627f\u4e0e\u7ee7\u627f\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u63d0\u4f9b\u4e86\u8fd9\u4e2a Bean \u4e4b\u540e\uff0c\u4ee5\u540e\u6240\u6709\u5177\u5907 ROLE_user \u89d2\u8272\u624d\u80fd\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c ROLE_dba \u548c ROLE_admin \u4e5f\u90fd\u80fd\u8bbf\u95ee\uff0c\u5177\u5907 ROLE_amdin \u89d2\u8272\u624d\u80fd\u8bbf\u95ee\u7684\u8d44\u6e90\uff0c ROLE_dba \u4e5f\u80fd\u8bbf\u95ee\u3002\n2.\u73b0\u5728\u7684\u5199\u6cd5\n\u4f46\u662f\u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\u4ec5\u9650\u4e8e Spring Boot2.0.8\uff08\u542b\uff09\u4e4b\u524d\u7684\u7248\u672c\uff0c\u5728\u4e4b\u540e\u7684\u7248\u672c\u4e2d\uff0c\u8fd9\u79cd\u5199\u6cd5\u5219\u4e0d\u88ab\u652f\u6301\uff0c\u65b0\u7248\u7684\u5199\u6cd5\u662f\u4e0b\u9762\u8fd9\u6837\uff1a\n\n@BeanRoleHierarchy roleHierarchy() {    \n    RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();    \n    String hierarchy = \"ROLE_dba &gt; ROLE_admin \\n ROLE_admin &gt; ROLE_user\";\n    roleHierarchy.setHierarchy(hierarchy);    \n    return roleHierarchy;\n}\n\u53d8\u5316\u4e3b\u8981\u5c31\u662f\u5206\u9694\u7b26\uff0c\u5c06\u539f\u6765\u7528\u7a7a\u683c\u9694\u5f00\u7684\u5730\u65b9\uff0c\u73b0\u5728\u7528\u6362\u884c\u7b26\u4e86\u3002\u8fd9\u91cc\u8868\u8fbe\u5f0f\u7684\u542b\u4e49\u4f9d\u7136\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\u4e0a\u9762\u4e24\u79cd\u4e0d\u540c\u5199\u6cd5\u90fd\u662f\u914d\u7f6e\u89d2\u8272\u7684\u7ee7\u627f\u5173\u7cfb\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u63a5\u4e0b\u6765\u6307\u5b9a\u89d2\u8272\u548c\u8d44\u6e90\u7684\u5bf9\u5e94\u5173\u7cfb\u5373\u53ef\uff0c\u5982\u4e0b\uff1a\n\n@Overrideprotected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n    .antMatchers(\"/admin/**\").hasRole(\"admin\")\n    .antMatchers(\"/db/**\").hasRole(\"dba\")\n    .antMatchers(\"/user/**\").hasRole(\"user\")\n    .and().formLogin()\n    .loginProcessingUrl(\"/doLogin\")\n    .permitAll()\n    .and().csrf().disable();\n}\n\u8fd9\u4e2a\u8868\u793a /db/** \u683c\u5f0f\u7684\u8def\u5f84\u9700\u8981\u5177\u5907 dba \u89d2\u8272\u624d\u80fd\u8bbf\u95ee\uff0c /admin/** \u683c\u5f0f\u7684\u8def\u5f84\u5219\u9700\u8981\u5177\u5907 admin \u89d2\u8272\u624d\u80fd\u8bbf\u95ee\uff0c /user/** \u683c\u5f0f\u7684\u8def\u5f84\uff0c\u5219\u9700\u8981\u5177\u5907 user \u89d2\u8272\u624d\u80fd\u8bbf\u95ee\uff0c\u6b64\u65f6\u63d0\u4f9b\u76f8\u5173\u63a5\u53e3\uff0c\u4f1a\u53d1\u73b0dba \u9664\u4e86\u8bbf\u95ee /db/** \uff0c\u4e5f\u80fd\u8bbf\u95ee /admin/** \u548c /user/** \uff0cadmin \u89d2\u8272\u9664\u4e86\u8bbf\u95ee /admin/** \uff0c\u4e5f\u80fd\u8bbf\u95ee /user/** \uff0cuser \u89d2\u8272\u5219\u53ea\u80fd\u8bbf\u95ee /user/** \u3002\n8.\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u8ba4\u8bc1\n\u4e4b\u524d\u7684\u7528\u6237\u548c\u5bc6\u7801\u90fd\u662f\u5728\u4ee3\u7801\u6216\u8005\u914d\u7f6e\u6587\u4ef6\u4e2d\u5199\u6b7b\u7684\uff0c\u4e00\u822c\u4e0d\u6ee1\u8db3\u5f00\u53d1\u7684\u9700\u8981\u3002\nSpring Security \u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u6e90\uff0c\u8fd9\u4e9b\u4e0d\u540c\u7684\u6570\u636e\u6e90\u6700\u7ec8\u90fd\u5c06\u88ab\u5c01\u88c5\u6210 UserDetailsService \u7684\u5b9e\u4f8b\uff0c\u9664\u4e86\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u63d0\u4f9b\u7684 UserDetailsService \u5b9e\u4f8b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5c01\u88c5\u3002\u4f8b\u5982InMemoryUserDetailsManager\u3001JdbcUserDetailsManager\u3002\n\u67e5\u770b\u8be6\u60c5\uff1a\nSpring Security \u57fa\u4e8e\u6570\u636e\u5e93\u7684\u8ba4\u8bc1\nSpring Security+Spring Data Jpa\uff0c\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u8ba4\u8bc1\n\u8fd9\u91cc\u662f\u4f7f\u7528Mybatis\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u6ca1\u5565\u8bf4\u7684\uff0c\u4e0a\u4ee3\u7801\uff01\uff01\n\u9996\u5148\u51c6\u5907\u597d\u6570\u636e\u5e93\n--\u53d6\u6d88\u5916\u952e\u7ea6\u675f:\nSET FOREIGN_KEY_CHECKS=0;\n-- ----------------------------\n-- Table structure for role\n-- ----------------------------\nDROP TABLE IF EXISTS `role`;\nCREATE TABLE `role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) DEFAULT NULL,\n  `nameZh` varchar(32) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of role\n-- ----------------------------\nINSERT INTO `role` VALUES (&#39;1&#39;, &#39;dba&#39;, &#39;\u6570\u636e\u5e93\u7ba1\u7406\u5458&#39;);\nINSERT INTO `role` VALUES (&#39;2&#39;, &#39;admin&#39;, &#39;\u7cfb\u7edf\u7ba1\u7406\u5458&#39;);\nINSERT INTO `role` VALUES (&#39;3&#39;, &#39;user&#39;, &#39;\u7528\u6237&#39;);\n-- ----------------------------\n-- Table structure for user\n-- ----------------------------\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(32) DEFAULT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `enabled` tinyint(1) DEFAULT NULL,\n  `locked` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of user\n-- ----------------------------\nINSERT INTO `user` VALUES (&#39;1&#39;, &#39;root&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\nINSERT INTO `user` VALUES (&#39;2&#39;, &#39;admin&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\nINSERT INTO `user` VALUES (&#39;3&#39;, &#39;xuxx&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\n-- ----------------------------\n-- Table structure for user_role\n-- ----------------------------\nDROP TABLE IF EXISTS `user_role`;\nCREATE TABLE `user_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `uid` int(11) DEFAULT NULL,\n  `rid` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of user_role\n-- ----------------------------\nINSERT INTO `user_role` VALUES (&#39;1&#39;, &#39;1&#39;, &#39;1&#39;);\nINSERT INTO `user_role` VALUES (&#39;2&#39;, &#39;1&#39;, &#39;2&#39;);\nINSERT INTO `user_role` VALUES (&#39;3&#39;, &#39;2&#39;, &#39;2&#39;);\nINSERT INTO `user_role` VALUES (&#39;4&#39;, &#39;3&#39;, &#39;3&#39;);\nSET FOREIGN_KEY_CHECKS=1;\n\n\u4f9d\u8d56\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;version&gt;5.1.27&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\u914d\u7f6e\u6587\u4ef6application.yml\nspring:\n  datasource:\n    username: root\n    password: root\n    type: com.zaxxer.hikari.HikariDataSource\n    url: jdbc:mysql://127.0.0.1:3306/security?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n    driver-class-name: com.mysql.jdbc.Driver\nmybatis:\n  #mapper.xml\u8def\u5f84\n  mapper-locations: classpath:mapper/*.xml\n  #\u522b\u540d\u5305\u626b\u63cf\n  type-aliases-package: com.xuxx.security_demo.bean\n\nlogging:\n  level:\n    #\u6253\u5370mapper\u5305\u7684SQL\u8bed\u53e5\n    com.xuxx.security_demo.mapper: debug\n\nbean\npackage com.xuxx.security_demo.bean;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * \u7ee7\u627fUserDetails\u662f\u4e3a\u4e86\u5411Spring Security\u63d0\u4f9b\u6838\u5fc3\u7528\u6237\u4fe1\u606f\n * \u540c\u65f6\uff0cUserDetails\u4e5f\u662f\u4e00\u4e2a\u89c4\u8303\n */\npublic class User implements Serializable, UserDetails {\n    private Integer id;\n    private String username;\n    private String password;\n    private Boolean enabled;\n    private Boolean locked;\n\n    private List&lt;Role&gt; roleList;\n\n    /***\n     * \u5224\u65ad\u5e10\u6237\u662f\u5426\u672a\u8fc7\u671f\n     */\n    @Override\n    public boolean isAccountNonExpired() {\n        //\u6211\u7684\u6570\u636e\u5e93\u6ca1\u5199\u8fd9\u4e2a\u5b57\u6bb5\n        return true;\n    }\n\n    /***\n     * \u5224\u65ad\u5e10\u6237\u662f\u5426\u672a\u9501\u5b9a\n     */\n    @Override\n    public boolean isAccountNonLocked() {\n        return !locked;\n    }\n\n    /**\n     * \u5224\u65ad\u51ed\u8bc1\u662f\u5426\u672a\u8fc7\u671f\n     */\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5df2\u542f\u7528\n     */\n    @Override\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    /**\n     * \u83b7\u53d6\u5df2\u6388\u4e88\u7528\u6237\u7684\u6743\u9650(\u89d2\u8272)\uff0c\u4e0d\u80fd\u8fd4\u56denulL\u3002\n     * SimpleGrantedAuthority\uff1aGrantedAuthority\u7684\u7b80\u5355\u5b9e\u73b0\u3002\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u5b58\u50a8\u5df2\u6388\u4e88\u7684\u6743\u9650(\u89d2\u8272)\uff0c\u8981\u4ee5\u2018ROLE_\u2019\u5f00\u5934\u3002\n     */\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        List&lt;SimpleGrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n        for (Role role : roleList) {\n            authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + role.getName()));\n        }\n        return authorities;\n    }\n\n    public List&lt;Role&gt; getRoleList() {\n        return roleList;\n    }\n\n    public void setRoleList(List&lt;Role&gt; roleList) {\n        this.roleList = roleList;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public void setEnabled(Boolean enabled) {\n        this.enabled = enabled;\n    }\n\n    public void setLocked(Boolean locked) {\n        this.locked = locked;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;User{&quot; +\n                &quot;id=&quot; + id +\n                &quot;, username=&#39;&quot; + username + &#39;\\&#39;&#39; +\n                &quot;, password=&#39;&quot; + password + &#39;\\&#39;&#39; +\n                &quot;, enabled=&quot; + enabled +\n                &quot;, locked=&quot; + locked +\n                &quot;, roleList=&quot; + roleList +\n                &#39;}&#39;;\n    }\n}\n\npackage com.xuxx.security_demo.bean;\n\nimport java.io.Serializable;\n\npublic class Role implements Serializable {\n    private Integer id;\n    private String name;\n    private String nameZh;\n\n    private User user;\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getNameZh() {\n        return nameZh;\n    }\n\n    public void setNameZh(String nameZh) {\n        this.nameZh = nameZh;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;Role{&quot; +\n                &quot;id=&quot; + id +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, nameZh=&#39;&quot; + nameZh + &#39;\\&#39;&#39; +\n                &quot;, user=&quot; + user +\n                &#39;}&#39;;\n    }\n}\n\nMapper\npackage com.xuxx.security_demo.mapper;\n\nimport com.xuxx.security_demo.bean.Role;\nimport com.xuxx.security_demo.bean.User;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.util.List;\n\n@Mapper\npublic interface UserMapper {\n    /**\n     * \u6839\u636eusername\u67e5\u8be2User\n     * @param username \u7528\u6237\u540d\n     * @return\n     */\n    @Select(&quot;select * from user where username = #{username}&quot;)\n    User loadUserByUsername(String username);\n\n    /**\n     * \u6839\u636euserID\u67e5\u8be2User\u7684\u89d2\u8272\n     * @param id \u7528\u6237ID\n     * @return\n     */\n    @Select(&quot;select * from role r where r.id in (select rid from user_role where uid = #{id})&quot;)\n    List&lt;Role&gt; getUserRolesById(Integer id);\n}\n\nService\npackage com.xuxx.security_demo.service;\n\nimport com.xuxx.security_demo.bean.User;\nimport com.xuxx.security_demo.mapper.UserMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService implements UserDetailsService {\n    @Autowired\n    private UserMapper userMapper;\n\n    /**\n     * \u4e0d\u7528\u81ea\u5df1\u5224\u65ad\u767b\u5f55\u6210\u529f\u4e0e\u5426\uff0c\u53ea\u9700\u8981\u53bb\u6570\u636e\u5e93\u67e5\u8be2\u3002\n     * @param username\n     * @return\n     * @throws UsernameNotFoundException\n     */\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userMapper.loadUserByUsername(username);\n        if (user == null) {\n            //UsernameNotFoundException\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3aBadCredentialsException\u7684\n            throw new UsernameNotFoundException(&quot;\u7528\u6237\u4e0d\u5b58\u5728\uff01&quot;);\n        }\n        user.setRoleList(userMapper.getUserRolesById(user.getId()));\n        return user;\n    }\n}\n\nController\npackage com.xuxx.security_demo.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;hello&quot;)\n    public String hello() {\n        return &quot;hello security&quot;;\n    }\n\n    @GetMapping(&quot;dba/hello&quot;)\n    public String dba() {\n        return &quot;hello dba&quot;;\n    }\n\n    @GetMapping(&quot;admin/hello&quot;)\n    public String admin() {\n        return &quot;hello admin&quot;;\n    }\n\n    @GetMapping(&quot;user/hello&quot;)\n    public String user() {\n        return &quot;hello user&quot;;\n    }\n}\n\n\u914d\u7f6e\u7c7b\npackage com.xuxx.security_demo.config;\n\nimport com.xuxx.security_demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.access.hierarchicalroles.RoleHierarchy;\nimport org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    UserService userService;\n\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * \u89d2\u8272\u7ee7\u627f\n     *\n     * @return\n     */\n    @Bean\n    RoleHierarchy roleHierarchy() {\n        RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();\n        String hierarchy = &quot;ROLE_dba &gt; ROLE_admin \\n ROLE_admin &gt; ROLE_user&quot;;\n        roleHierarchy.setHierarchy(hierarchy);\n        return roleHierarchy;\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userService);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(&quot;/dba/**&quot;).hasRole(&quot;dba&quot;)\n                .antMatchers(&quot;/admin/**&quot;).hasRole(&quot;admin&quot;)\n                .antMatchers(&quot;/user/**&quot;).hasRole(&quot;user&quot;)\n                .anyRequest().authenticated()\n                .and()\n                .formLogin()\n                .loginProcessingUrl(&quot;/doLogin&quot;)\n                .permitAll()\n                .and()\n                .csrf()\n                .disable();\n    }\n}\n\n\u5927\u529f\u544a\u6210\u3002\n9.\u6dfb\u52a0\u81ea\u5b9a\u4e49Filter-\u4f8b\uff1a\u6dfb\u52a0\u767b\u5f55\u9a8c\u8bc1\u7801\nhttps://mp.weixin.qq.com/s/aaop_dS9UIOgTtQd0hl_tw\n1.\u51c6\u5907\u9a8c\u8bc1\u7801\n/**\n * \u751f\u6210\u9a8c\u8bc1\u7801\u7684\u5de5\u5177\u7c7b\n */\npublic class VerifyCode {\n\n    private int width = 100;// \u751f\u6210\u9a8c\u8bc1\u7801\u56fe\u7247\u7684\u5bbd\u5ea6\n    private int height = 50;// \u751f\u6210\u9a8c\u8bc1\u7801\u56fe\u7247\u7684\u9ad8\u5ea6\n    private String[] fontNames = { &quot;\u5b8b\u4f53&quot;, &quot;\u6977\u4f53&quot;, &quot;\u96b6\u4e66&quot;, &quot;\u5fae\u8f6f\u96c5\u9ed1&quot; };\n    private Color bgColor = new Color(255, 255, 255);// \u5b9a\u4e49\u9a8c\u8bc1\u7801\u56fe\u7247\u7684\u80cc\u666f\u989c\u8272\u4e3a\u767d\u8272\n    private Random random = new Random();\n    private String codes = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;\n    private String text;// \u8bb0\u5f55\u968f\u673a\u5b57\u7b26\u4e32\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u968f\u610f\u989c\u8272\n     *\n     * @return\n     */\n    private Color randomColor() {\n        int red = random.nextInt(150);\n        int green = random.nextInt(150);\n        int blue = random.nextInt(150);\n        return new Color(red, green, blue);\n    }\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u5b57\u4f53\n     *\n     * @return\n     */\n    private Font randomFont() {\n        String name = fontNames[random.nextInt(fontNames.length)];\n        int style = random.nextInt(4);\n        int size = random.nextInt(5) + 24;\n        return new Font(name, style, size);\n    }\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\n     *\n     * @return\n     */\n    private char randomChar() {\n        return codes.charAt(random.nextInt(codes.length()));\n    }\n\n    /**\n     * \u521b\u5efa\u4e00\u4e2a\u7a7a\u767d\u7684BufferedImage\u5bf9\u8c61\n     *\n     * @return\n     */\n    private BufferedImage createImage() {\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D g2 = (Graphics2D) image.getGraphics();\n        g2.setColor(bgColor);// \u8bbe\u7f6e\u9a8c\u8bc1\u7801\u56fe\u7247\u7684\u80cc\u666f\u989c\u8272\n        g2.fillRect(0, 0, width, height);\n        return image;\n    }\n\n    public BufferedImage getImage() {\n        BufferedImage image = createImage();\n        Graphics2D g2 = (Graphics2D) image.getGraphics();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i &lt; 4; i++) {\n            String s = randomChar() + &quot;&quot;;\n            sb.append(s);\n            g2.setColor(randomColor());\n            g2.setFont(randomFont());\n            float x = i * width * 1.0f / 4;\n            g2.drawString(s, x, height - 15);\n        }\n        this.text = sb.toString();\n        drawLine(image);\n        return image;\n    }\n\n    /**\n     * \u7ed8\u5236\u5e72\u6270\u7ebf\n     *\n     * @param image\n     */\n    private void drawLine(BufferedImage image) {\n        Graphics2D g2 = (Graphics2D) image.getGraphics();\n        int num = 5;\n        for (int i = 0; i &lt; num; i++) {\n            int x1 = random.nextInt(width);\n            int y1 = random.nextInt(height);\n            int x2 = random.nextInt(width);\n            int y2 = random.nextInt(height);\n            g2.setColor(randomColor());\n            g2.setStroke(new BasicStroke(1.5f));\n            g2.drawLine(x1, y1, x2, y2);\n        }\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    public static void output(BufferedImage image, OutputStream out) throws IOException {\n        ImageIO.write(image, &quot;JPEG&quot;, out);\n    }\n}\n\n\u5c31\u662f\u753b\u4e00\u4e2a\u7b80\u5355\u7684\u9a8c\u8bc1\u7801\uff0c\u901a\u8fc7\u6d41\u5c06\u9a8c\u8bc1\u7801\u5199\u5230\u524d\u7aef\u9875\u9762\uff0c\u63d0\u4f9b\u9a8c\u8bc1\u7801\u7684 Controller \u5982\u4e0b\uff1a\n@RestController\npublic class VerifyCodeController {\n    @GetMapping(&quot;/vercode&quot;)\n    public void code(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        VerifyCode vc = new VerifyCode();\n        BufferedImage image = vc.getImage();\n        String text = vc.getText();\n        HttpSession session = req.getSession();\n        session.setAttribute(&quot;index_code&quot;, text);\n        VerifyCode.output(image, resp.getOutputStream());\n    }\n}\n\n2.\u81ea\u5b9a\u4e49Filter\n@Component\npublic class VerifyCodeFilter extends GenericFilterBean {\n    private String defaultFilterProcessUrl = &quot;/doLogin&quot;;\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n        if (&quot;POST&quot;.equalsIgnoreCase(request.getMethod()) &amp;&amp; defaultFilterProcessUrl.equals(request.getServletPath())) {\n            // \u9a8c\u8bc1\u7801\u9a8c\u8bc1\n            String requestCaptcha = request.getParameter(&quot;code&quot;);\n            String genCaptcha = (String) request.getSession().getAttribute(&quot;index_code&quot;);\n            if (StringUtils.isEmpty(requestCaptcha))\n                throw new AuthenticationServiceException(&quot;\u9a8c\u8bc1\u7801\u4e0d\u80fd\u4e3a\u7a7a!&quot;);\n            if (!genCaptcha.toLowerCase().equals(requestCaptcha.toLowerCase())) {\n                throw new AuthenticationServiceException(&quot;\u9a8c\u8bc1\u7801\u9519\u8bef!&quot;);\n            }\n        }\n        chain.doFilter(request, response);\n    }\n}\n\n\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u7ee7\u627f\u81ea GenericFilterBean\uff0c\u5e76\u5b9e\u73b0\u5176\u4e2d\u7684 doFilter \u65b9\u6cd5\uff0c\u5728 doFilter \u65b9\u6cd5\u4e2d\uff0c\u5f53\u8bf7\u6c42\u65b9\u6cd5\u662f POST\uff0c\u5e76\u4e14\u8bf7\u6c42\u5730\u5740\u662f /doLogin \u65f6\uff0c\u83b7\u53d6\u53c2\u6570\u4e2d\u7684 code \u5b57\u6bb5\u503c\uff0c\u8be5\u5b57\u6bb5\u4fdd\u5b58\u4e86\u7528\u6237\u4ece\u524d\u7aef\u9875\u9762\u4f20\u6765\u7684\u9a8c\u8bc1\u7801\uff0c\u7136\u540e\u83b7\u53d6 session \u4e2d\u4fdd\u5b58\u7684\u9a8c\u8bc1\u7801\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u4f20\u6765\u9a8c\u8bc1\u7801\uff0c\u5219\u629b\u51fa\u9a8c\u8bc1\u7801\u4e0d\u80fd\u4e3a\u7a7a\u5f02\u5e38\uff0c\u5982\u679c\u7528\u6237\u4f20\u5165\u4e86\u9a8c\u8bc1\u7801\uff0c\u5219\u5224\u65ad\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u5219\u629b\u51fa\u5f02\u5e38\uff0c\u5426\u5219\u6267\u884c chain.doFilter(request, response); \u4f7f\u8bf7\u6c42\u7ee7\u7eed\u5411\u4e0b\u8d70\u3002\n3.\u914d\u7f6eFilter\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    VerifyCodeFilter verifyCodeFilter;\n    ...\n    ...\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.addFilterBefore(verifyCodeFilter, UsernamePasswordAuthenticationFilter.class);\n\n        http.authorizeRequests()\n                .antMatchers(&quot;/admin/**&quot;).hasRole(&quot;admin&quot;)\n                ...\n                ...\n                .permitAll()\n                .and()\n                .csrf().disable();\n    }\n}\n\n3.\u52a8\u6001\u6743\u9650\u914d\u7f6e\n\u76ee\u7684\u662f\u5b9e\u73b0Spring Security\u4eceDB\u4e2d\u52a0\u8f7dURL\u7684\u76f8\u5173\u6743\u9650\uff0c\u4e14\u5f53DB\u4e2d\u914d\u7f6e\u53d1\u751f\u66f4\u6539\u65f6\uff0c\u53ef\u4ee5\u8ba9\u8fd0\u884c\u4e2d\u7684\u9879\u76ee\u65e0\u9700\u91cd\u542f\uff0c\u52a8\u6001\u66f4\u6539\u8bbf\u95ee\u6743\u9650\u3002\n1.\u6570\u636e\u5e93\n\u5728\u4e4b\u524d\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u4e24\u5f20\u8868\uff0cmenu\u548cmenu_role\n--\u53d6\u6d88\u5916\u952e\u7ea6\u675f:\nSET FOREIGN_KEY_CHECKS=0;\n-- ----------------------------\n-- Table structure for role\n-- ----------------------------\nDROP TABLE IF EXISTS `role`;\nCREATE TABLE `role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) DEFAULT NULL,\n  `nameZh` varchar(32) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of role\n-- ----------------------------\nINSERT INTO `role` VALUES (&#39;1&#39;, &#39;dba&#39;, &#39;\u6570\u636e\u5e93\u7ba1\u7406\u5458&#39;);\nINSERT INTO `role` VALUES (&#39;2&#39;, &#39;admin&#39;, &#39;\u7cfb\u7edf\u7ba1\u7406\u5458&#39;);\nINSERT INTO `role` VALUES (&#39;3&#39;, &#39;user&#39;, &#39;\u666e\u901a\u7528\u6237&#39;);\n-- ----------------------------\n-- Table structure for user\n-- ----------------------------\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(32) DEFAULT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `enabled` tinyint(1) DEFAULT NULL,\n  `locked` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of user\n-- ----------------------------\nINSERT INTO `user` VALUES (&#39;1&#39;, &#39;root&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\nINSERT INTO `user` VALUES (&#39;2&#39;, &#39;admin&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\nINSERT INTO `user` VALUES (&#39;3&#39;, &#39;xuxx&#39;, &#39;$2a$10$RMuFXGQ5AtH4wOvkUqyvuecpqUSeoxZYqilXzbz50dceRsga.WYiq&#39;, &#39;1&#39;, &#39;0&#39;);\n-- ----------------------------\n-- Table structure for user_role\n-- ----------------------------\nDROP TABLE IF EXISTS `user_role`;\nCREATE TABLE `user_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `uid` int(11) DEFAULT NULL,\n  `rid` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of user_role\n-- ----------------------------\nINSERT INTO `user_role` VALUES (&#39;1&#39;, &#39;1&#39;, &#39;1&#39;);\nINSERT INTO `user_role` VALUES (&#39;2&#39;, &#39;1&#39;, &#39;2&#39;);\nINSERT INTO `user_role` VALUES (&#39;3&#39;, &#39;2&#39;, &#39;2&#39;);\nINSERT INTO `user_role` VALUES (&#39;4&#39;, &#39;3&#39;, &#39;3&#39;);\nSET FOREIGN_KEY_CHECKS=1;\n-- ----------------------------\n-- Table structure for menu\n-- ----------------------------\nDROP TABLE IF EXISTS `menu`;\nCREATE TABLE `menu` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `pattern` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of menu\n-- ----------------------------\nINSERT INTO `menu`(`id`, `pattern`) VALUES (1, &#39;/dba/**&#39;);\nINSERT INTO `menu`(`id`, `pattern`) VALUES (2, &#39;/admin/**&#39;);\nINSERT INTO `menu`(`id`, `pattern`) VALUES (3, &#39;/user/**&#39;);\n-- ----------------------------\n-- Table structure for menu_role\n-- ----------------------------\nDROP TABLE IF EXISTS `menu_role`;\nCREATE TABLE `menu_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `mid` int(11) DEFAULT NULL,\n  `rid` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n-- ----------------------------\n-- Records of menu_role\n-- ----------------------------\nINSERT INTO `menu_role`(`id`, `mid`, `rid`) VALUES (1, 1, 1);\nINSERT INTO `menu_role`(`id`, `mid`, `rid`) VALUES (2, 2, 2);\nINSERT INTO `menu_role`(`id`, `mid`, `rid`) VALUES (3, 3, 3);\n\n2.\u4f9d\u8d56\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;version&gt;5.1.27&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n3.application.yml\nspring:\n  datasource:\n    username: root\n    password: root\n    type: com.zaxxer.hikari.HikariDataSource\n    url: jdbc:mysql://127.0.0.1:3306/security?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n    driver-class-name: com.mysql.jdbc.Driver\nmybatis:\n  #mapper.xml\u8def\u5f84\n  #mapper-locations: classpath:mapper/*.xml\n  #\u522b\u540d\u5305\u626b\u63cf\n  type-aliases-package: com.xuxx.security_db_dynamic.bean\n\nlogging:\n  level:\n    #\u6253\u5370mapper\u5305\u7684SQL\u8bed\u53e5\n    com.xuxx.security_db_dynamic.mapper: debug\n\n4.bean\npackage com.xuxx.security_db_dynamic.bean;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * \u7ee7\u627fUserDetails\u662f\u4e3a\u4e86\u5411Spring Security\u63d0\u4f9b\u6838\u5fc3\u7528\u6237\u4fe1\u606f\n * \u540c\u65f6\uff0cUserDetails\u4e5f\u662f\u4e00\u4e2a\u89c4\u8303\n */\npublic class User implements Serializable, UserDetails {\n    private Integer id;\n    private String username;\n    private String password;\n    private Boolean enabled;\n    private Boolean locked;\n\n    private List&lt;Role&gt; roleList;\n\n    /***\n     * \u5224\u65ad\u5e10\u6237\u662f\u5426\u672a\u8fc7\u671f\n     */\n    @Override\n    public boolean isAccountNonExpired() {\n        //\u6b64\u65f6\u6570\u636e\u5e93\u6ca1\u5b9a\u4e49\u8fd9\u4e2a\u5b57\u6bb5\n        return true;\n    }\n\n    /***\n     * \u5224\u65ad\u5e10\u6237\u662f\u5426\u672a\u9501\u5b9a\n     */\n    @Override\n    public boolean isAccountNonLocked() {\n        return !locked;\n    }\n\n    /**\n     * \u5224\u65ad\u51ed\u8bc1\u662f\u5426\u672a\u8fc7\u671f\n     */\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5df2\u542f\u7528\n     */\n    @Override\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    /**\n     * \u83b7\u53d6\u5df2\u6388\u4e88\u7528\u6237\u7684\u6743\u9650(\u89d2\u8272)\uff0c\u4e0d\u80fd\u8fd4\u56denulL\u3002\n     * SimpleGrantedAuthority\uff1aGrantedAuthority\u7684\u7b80\u5355\u5b9e\u73b0\u3002\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u5b58\u50a8\u5df2\u6388\u4e88\u7684\u6743\u9650(\u89d2\u8272)\uff0c\u8981\u4ee5\u2018ROLE_\u2019\u5f00\u5934\u3002\n     */\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        List&lt;SimpleGrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n        for (Role role : roleList) {\n            authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + role.getName()));\n        }\n        return authorities;\n    }\n\n    public List&lt;Role&gt; getRoleList() {\n        return roleList;\n    }\n\n    public void setRoleList(List&lt;Role&gt; roleList) {\n        this.roleList = roleList;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public void setEnabled(Boolean enabled) {\n        this.enabled = enabled;\n    }\n\n    public void setLocked(Boolean locked) {\n        this.locked = locked;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;User{&quot; +\n                &quot;id=&quot; + id +\n                &quot;, username=&#39;&quot; + username + &#39;\\&#39;&#39; +\n                &quot;, password=&#39;&quot; + password + &#39;\\&#39;&#39; +\n                &quot;, enabled=&quot; + enabled +\n                &quot;, locked=&quot; + locked +\n                &quot;, roleList=&quot; + roleList +\n                &#39;}&#39;;\n    }\n}\n\npackage com.xuxx.security_db_dynamic.bean;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n@Data\npublic class Role implements Serializable {\n    private Integer id;\n    private String name;\n    private String nameZh;\n}\n\npackage com.xuxx.security_db_dynamic.bean;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\npublic class Menu {\n    private Integer id;\n    private String pattern;\n    private List&lt;Role&gt; roles;\n}\n\n5.Mapper\npackage com.xuxx.security_db_dynamic.mapper;\n\nimport com.xuxx.security_db_dynamic.bean.Role;\nimport com.xuxx.security_db_dynamic.bean.User;\nimport org.apache.ibatis.annotations.Select;\n\nimport java.util.List;\n\n@Mapper\npublic interface UserMapper {\n\n    @Select(&quot;select * from user where username =#{username} &quot;)\n    User loadUserByUsername(String username);\n\n    @Select(&quot;select * from role r where r.id in (select rid from user_role where uid = #{id}) &quot;)\n    List&lt;Role&gt; getRolesById(Integer id);\n}\n\npackage com.xuxx.security_db_dynamic.mapper;\n\nimport com.xuxx.security_db_dynamic.bean.Menu;\nimport com.xuxx.security_db_dynamic.bean.Role;\nimport org.apache.ibatis.annotations.*;\nimport org.apache.ibatis.mapping.FetchType;\n\nimport java.util.List;\n\n@Mapper\npublic interface MenuMapper {\n\n    /**\n     * \u67e5\u8be2\u6240\u6709\u7684menu\n     * @return\n     */\n    @Select(&quot;select m.*,r.id as rid,r.name as rname, r.nameZh as rnameZh from menu m left join menu_role mr on m.id = mr.id left join role r on mr.rid = r.id &quot;)\n    @Results(id = &quot;menuResultMap&quot;, value = {\n            @Result(column = &quot;id&quot;, property = &quot;id&quot;, id = true),\n            @Result(column = &quot;pattern&quot;, property = &quot;pattern&quot;),\n            @Result(column = &quot;rid&quot;, property = &quot;roles&quot;,\n                    many = @Many(select = &quot;com.xuxx.security_db_dynamic.mapper.MenuMapper.findRolesByMenuId&quot;, fetchType = FetchType.EAGER))\n    })\n    List&lt;Menu&gt; getAllMenus();\n\n    /**\n     * \u6839\u636emenuID\u67e5\u8be2roles\n     * @param id\n     * @return\n     */\n    @Select(&quot;select * from role where id = #{id}&quot;)\n    List&lt;Role&gt; findRolesByMenuId(Integer id);\n}\n\n6.Service\npackage com.xuxx.security_db_dynamic.service;\n\nimport com.xuxx.security_db_dynamic.bean.User;\nimport com.xuxx.security_db_dynamic.mapper.UserMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService implements UserDetailsService {\n\n    @Autowired\n    UserMapper userMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userMapper.loadUserByUsername(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(&quot;\u7528\u6237\u4e0d\u5b58\u5728&quot;);\n        }\n        user.setRoleList(userMapper.getRolesById(user.getId()));\n        return user;\n    }\n}\n\npackage com.xuxx.security_db_dynamic.service;\n\nimport com.xuxx.security_db_dynamic.bean.Menu;\nimport com.xuxx.security_db_dynamic.mapper.MenuMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class MenuService {\n\n    @Autowired\n    MenuMapper menuMapper;\n\n    public List&lt;Menu&gt; getAllMenus() {\n        return menuMapper.getAllMenus();\n    }\n}\n\n7.Controller\npackage com.xuxx.security_db_dynamic.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @GetMapping(&quot;/hello&quot;)\n    public String hello() {\n        return &quot;Hello&quot;;\n    }\n\n    @GetMapping(&quot;/dba/hello&quot;)\n    public String db() {\n        return &quot;Hello dba&quot;;\n    }\n\n    @GetMapping(&quot;/admin/hello&quot;)\n    public String admin() {\n        return &quot;Hello admin&quot;;\n    }\n\n    @GetMapping(&quot;/user/hello&quot;)\n    public String user() {\n        return &quot;Hello user&quot;;\n    }\n}\n\n8.\u914d\u7f6e\u7c7b\npackage com.xuxx.security_db_dynamic.config;\n\nimport com.xuxx.security_db_dynamic.bean.Menu;\nimport com.xuxx.security_db_dynamic.bean.Role;\nimport com.xuxx.security_db_dynamic.service.MenuService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.ConfigAttribute;\nimport org.springframework.security.access.SecurityConfig;\nimport org.springframework.security.web.FilterInvocation;\nimport org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.AntPathMatcher;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * \u6839\u636e\u4f20\u6765\u7684\u8bf7\u6c42\u5730\u5740\uff0c\u5206\u6790\u51fa\u8be5\u8bf7\u6c42\u6240\u9700\u8981\u7684\u6743\u9650(\u89d2\u8272)\n */\n@Component\npublic class MyFilter implements FilterInvocationSecurityMetadataSource {\n\n    //\u8def\u5f84\u5339\u914d\u5668\n    AntPathMatcher pathMatcher = new AntPathMatcher();\n\n    @Autowired\n    MenuService menuService;\n\n    //\u6839\u636e\u8bf7\u6c42\u5730\u5740\u5206\u6790\u6240\u9700\u8981\u7684\u6743\u9650(\u89d2\u8272)\n    @Override\n    public Collection&lt;ConfigAttribute&gt; getAttributes(Object object) throws IllegalArgumentException {\n        //\u62ff\u5230\u8bf7\u6c42\u7684URl\n        String requestUrl = ((FilterInvocation) object).getRequestUrl();\n        List&lt;Menu&gt; allMenus = menuService.getAllMenus();\n        for (Menu menu : allMenus) {\n            //\u5982\u679c\u8bf7\u6c42\u7684URL\u548c\u5b9a\u4e49\u7684\u89c4\u5219\u5339\u914d\u4e0a\u4e86\n            if (pathMatcher.match(menu.getPattern(), requestUrl)) {\n                List&lt;Role&gt; roles = menu.getRoles();\n                String[] rolesStr = new String[roles.size()];\n                //\u5c06\u8bf7\u6c42\u7684URL\u6240\u9700\u8981\u7684\u6240\u6709role\u8f6c\u6210\u5b57\u7b26\u4e32\u6570\u7ec4\n                for (int i = 0; i &lt; roles.size(); i++) {\n                    rolesStr[i] = &quot;ROLE_&quot; + roles.get(i).getName();\n                }\n                return SecurityConfig.createList(rolesStr);\n            }\n        }\n        //\u5982\u679c\u8def\u5f84\u5339\u914d\u4e0d\u4e0a\uff0c\u8fd4\u56deROLE_login(\u76f8\u5f53\u4e8e\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u6807\u8bb0)\uff0c\u5219\u767b\u5f55\u540e\u53ef\u4ee5\u8bbf\u95ee\uff08\u81ea\u5b9a\u4e49\u7684\uff09\n        return SecurityConfig.createList(&quot;ROLE_LOGIN&quot;);\n    }\n\n    @Override\n    public Collection&lt;ConfigAttribute&gt; getAllConfigAttributes() {\n        return null;\n    }\n\n    @Override//\u662f\u5426\u652f\u6301\n    public boolean supports(Class&lt;?&gt; clazz) {\n        return true;\n    }\n}\n\npackage com.xuxx.security_db_dynamic.config;\n\nimport org.springframework.security.access.AccessDecisionManager;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.security.access.ConfigAttribute;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.authentication.InsufficientAuthenticationException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Collection;\n\n/**\n * \u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u5177\u5907\u5176\u8bbf\u95ee\u8def\u5f84\u7684\u6743\u9650(\u89d2\u8272)\n */\n@Component\npublic class MyAccessDecisionManager implements AccessDecisionManager {\n    /**\n     * @param authentication   \u4fdd\u5b58\u4e86\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f(\u5df2\u7ecf\u6709\u54ea\u4e9b\u89d2\u8272)\n     * @param object           (FilterInvocation\u5bf9\u8c61\uff0c\u662fMyfilter\u7c7b\u7684getAttributes\u65b9\u6cd5\u4e2d\u7684object\u53c2\u6570)\u7528\u6765\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u5bf9\u8c61\n     * @param configAttributes \u662fMyfilter\u7c7b\u7684getAttributes\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u8bf7\u6c42\u9700\u8981\u54ea\u4e9b\u89d2\u8272\n     * @throws AccessDeniedException\n     * @throws InsufficientAuthenticationException\n     */\n    @Override\n    public void decide(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes) throws AccessDeniedException, InsufficientAuthenticationException {\n        for (ConfigAttribute attribute : configAttributes) {\n            if (&quot;ROLE_LOGIN&quot;.equals(attribute.getAttribute())) {\n                //AnonymousAuthenticationToken\u533f\u540d\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c(\u672a\u767b\u5f55)\n                if (authentication instanceof AnonymousAuthenticationToken) {\n                    throw new AccessDeniedException(&quot;\u975e\u6cd5\u8bf7\u6c42\uff01&quot;);\n                } else {\n                    //\u5df2\u767b\u5f55\n                    return;\n                }\n            }\n            //\u5982\u679c\u5177\u5907\u6240\u9700\u7684\u89d2\u8272\n            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();\n            for (GrantedAuthority authority : authorities) {\n                //\u5982\u679c\u5df2\u5177\u5907\u89d2\u8272\u5b58\u5728\u4e00\u4e2a\u6240\u9700\u89d2\u8272\u5c31\u901a\u8fc7(\u4e5f\u53ef\u4ee5\u914d\u7f6e\u5176\u4ed6\u9a8c\u8bc1\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\u6240\u9700\u591a\u4e2a\u89d2\u8272\u65f6\uff0c\u5fc5\u987b\u4e0e\u5df2\u5177\u5907\u89d2\u8272\u4e00\u4e00\u5339\u914d)\n                if (authority.getAuthority().equals(attribute.getAttribute())) {\n                    //return\u5c31\u4f1a\u9a8c\u8bc1\u901a\u8fc7\n                    return;\n                }\n            }\n            //\u6b64\u65f6\u767b\u5f55\u7684root,\u8bbf\u95ee\u7684/admin/hello\n            //authorities:[ROLE_dba, ROLE_admin]\n            //System.out.println(&quot;authorities:&quot; + authorities.toString());\n            //object:FilterInvocation: URL: /admin/hello\n            //System.out.println(&quot;object:&quot; + object.toString());\n            //configAttributes:[ROLE_admin]\n            //System.out.println(&quot;configAttributes:&quot; + configAttributes.toString());\n        }\n        throw new AccessDeniedException(&quot;\u975e\u6cd5\u8bf7\u6c42\uff01&quot;);\n    }\n\n    @Override//\u662f\u5426\u652f\u6301\n    public boolean supports(ConfigAttribute attribute) {\n        return true;\n    }\n\n    @Override//\u662f\u5426\u652f\u6301\n    public boolean supports(Class&lt;?&gt; clazz) {\n        return true;\n    }\n}\n\npackage com.xuxx.security_db_dynamic.config;\n\nimport com.xuxx.security_db_dynamic.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.ObjectPostProcessor;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.access.intercept.FilterSecurityInterceptor;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    UserService userService;\n    @Autowired\n    MyFilter myFilter;\n    @Autowired\n    MyAccessDecisionManager myAccessDecisionManager;\n\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userService);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .withObjectPostProcessor(new ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() {\n                    @Override\n                    public &lt;O extends FilterSecurityInterceptor&gt; O postProcess(O object) {\n                        object.setAccessDecisionManager(myAccessDecisionManager);\n                        object.setSecurityMetadataSource(myFilter);\n                        return object;\n                    }\n                })\n                .and()\n                .formLogin()\n                .permitAll()\n                .and()\n                .csrf().disable();\n    }\n}\n\n\u6b64\u65f6\u4fbf\u53ef\u4ee5\u8fdb\u884c\u52a8\u6001\u7684\u6743\u9650\u63a7\u5236\u4e86\uff0c\u4fee\u6539\u6570\u636e\u5e93\u4fbf\u53ef\u4ee5\u6539\u53d8\u5404\u7528\u6237\u6743\u9650\u7b49\u3002\n\u5927\u529f\u544a\u6210\uff01\uff01\u7d2f\u6b7b\u4e86...\n4.Spring Security\u7ed3\u5408OAuth2\n1.\u4f9d\u8d56\n\n\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}, {"name": "Security", "slug": "Security", "permalink": "/Xuxx_Blogs/tag/Security/"}]}, {"title": "Spring Boot\u6574\u5408WebSocket", "date": "2020-05-17T23:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj21/", "text": "1.\u4ec0\u4e48\u662fWebSocket?\nWebSocket \u662f HTML5 \u5f00\u59cb\u63d0\u4f9b\u7684\u4e00\u79cd\u5728\u5355\u4e2a TCP \u8fde\u63a5\u4e0a\u8fdb\u884c\u5168\u53cc\u5de5\u901a\u8baf\u7684\u534f\u8bae\u3002\nWebSocket \u4f7f\u5f97\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\uff0c\u5141\u8bb8\u670d\u52a1\u7aef\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u63a8\u9001\u6570\u636e\u3002\u5728 WebSocket API \u4e2d\uff0c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u53ea\u9700\u8981\u5b8c\u6210\u4e00\u6b21\u63e1\u624b\uff0c\u4e24\u8005\u4e4b\u95f4\u5c31\u76f4\u63a5\u53ef\u4ee5\u521b\u5efa\u6301\u4e45\u6027\u7684\u8fde\u63a5\uff0c\u5e76\u8fdb\u884c\u53cc\u5411\u6570\u636e\u4f20\u8f93\u3002\n\u5728 WebSocket API \u4e2d\uff0c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u63e1\u624b\u7684\u52a8\u4f5c\uff0c\u7136\u540e\uff0c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5c31\u5f62\u6210\u4e86\u4e00\u6761\u5feb\u901f\u901a\u9053\u3002\u4e24\u8005\u4e4b\u95f4\u5c31\u76f4\u63a5\u53ef\u4ee5\u6570\u636e\u4e92\u76f8\u4f20\u9001\u3002\nimg\n\nUpgrade: websocket\nConnection: Upgrade\n\u8865\u5145\uff1a\nSockJs\nSockJS\u662f\u4e00\u4e2aJavaScript\u5e93\uff0c\u4e3a\u4e86\u5e94\u5bf9\u8bb8\u591a\u6d4f\u89c8\u5668\u4e0d\u652f\u6301WebSocket\u534f\u8bae\u7684\u95ee\u9898\uff0c\u8bbe\u8ba1\u4e86\u5907\u9009SockJs\u3002SockJS \u662f WebSocket \u6280\u672f\u7684\u4e00\u79cd\u6a21\u62df\u3002SockJS\u4f1a\u5c3d\u53ef\u80fd\u5bf9\u5e94 WebSocket API\uff0c\u4f46\u5982\u679cWebSocket \u6280\u672f\u4e0d\u53ef\u7528\u7684\u8bdd\uff0c\u4f1a\u81ea\u52a8\u964d\u4e3a\u8f6e\u8be2\u7684\u65b9\u5f0f\u3002\nStompjs\nSTOMP\u2014\u2014 Simple Text Oriented Message Protocol\u2014\u2014\u9762\u5411\u6d88\u606f\u7684\u7b80\u5355\u6587\u672c\u534f\u8bae\u3002\nSockJS \u4e3a WebSocket \u63d0\u4f9b\u4e86 \u5907\u9009\u65b9\u6848\u3002\u4f46\u65e0\u8bba\u54ea\u79cd\u573a\u666f\uff0c\u5bf9\u4e8e\u5b9e\u9645\u5e94\u7528\u6765\u8bf4\uff0c\u8fd9\u79cd\u901a\u4fe1\u5f62\u5f0f\u5c42\u7ea7\u8fc7\u4f4e\u3002 STOMP\u534f\u8bae\uff0c\u6765\u4e3a\u6d4f\u89c8\u5668 \u548c server \u95f4\u7684 \u901a\u4fe1\u589e\u52a0\u9002\u5f53\u7684\u6d88\u606f\u8bed\u4e49\u3002\nWebSocket\u3001SockJs\u3001STOMP\u4e09\u8005\u5173\u7cfb\n\u7b80\u800c\u8a00\u4e4b\uff0cWebSocket \u662f\u5e95\u5c42\u534f\u8bae\uff0cSockJS \u662fWebSocket \u7684\u5907\u9009\u65b9\u6848\uff0c\u4e5f\u662f\u5e95\u5c42\u534f\u8bae\uff0c\u800c STOMP \u662f\u57fa\u4e8e WebSocket\uff08SockJS\uff09\u7684\u4e0a\u5c42\u534f\u8bae\u3002\n1\u3001HTTP\u534f\u8bae\u89e3\u51b3\u4e86 web \u6d4f\u89c8\u5668\u53d1\u8d77\u8bf7\u6c42\u4ee5\u53ca web \u670d\u52a1\u5668\u54cd\u5e94\u8bf7\u6c42\u7684\u7ec6\u8282\uff0c\u5047\u8bbe HTTP \u534f\u8bae \u5e76\u4e0d\u5b58\u5728\uff0c\u53ea\u80fd\u4f7f\u7528 TCP \u5957\u63a5\u5b57\u6765 \u7f16\u5199 web \u5e94\u7528\u3002\n2\u3001\u76f4\u63a5\u4f7f\u7528 WebSocket\uff08SockJS\uff09 \u5c31\u5f88\u7c7b\u4f3c\u4e8e \u4f7f\u7528 TCP \u5957\u63a5\u5b57\u6765\u7f16\u5199 web \u5e94\u7528\uff0c\u56e0\u4e3a\u6ca1\u6709\u9ad8\u5c42\u534f\u8bae\uff0c\u5c31\u9700\u8981\u6211\u4eec\u5b9a\u4e49\u5e94\u7528\u95f4\u6240\u53d1\u9001\u6d88\u606f\u7684\u8bed\u4e49\uff0c\u8fd8\u9700\u8981\u786e\u4fdd\u8fde\u63a5\u7684\u4e24\u7aef\u90fd\u80fd\u9075\u5faa\u8fd9\u4e9b\u8bed\u4e49\uff1b\n3\u3001\u540cHTTP\u5728TCP \u5957\u63a5\u5b57\u4e0a\u6dfb\u52a0\u8bf7\u6c42-\u54cd\u5e94\u6a21\u578b\u5c42\u4e00\u6837\uff0cSTOMP\u5728WebSocket \u4e4b\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e\u5e27\u7684\u7ebf\u8def\u683c\u5f0f\u5c42\uff0c\u7528\u6765\u5b9a\u4e49\u6d88\u606f\u8bed\u4e49\uff1b\n2.WebSocket\u5b9e\u73b0\u5728\u7ebf\u7fa4\u804a\n\n\u4f9d\u8d56\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/sockjs-client --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;sockjs-client&lt;/artifactId&gt;\n    &lt;version&gt;1.1.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/stomp-websocket --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;stomp-websocket&lt;/artifactId&gt;\n    &lt;version&gt;2.3.3&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars.bower/jquery --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;jquery&lt;/artifactId&gt;\n    &lt;version&gt;3.4.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!--WebJars\u662f\u5c06\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09\u8d44\u6e90\uff08JS\uff0cCss\u7b49\uff09\u6253\u6210jar\u5305\u6587\u4ef6\uff0c\u4ee5\u5bf9\u8d44\u6e90\u8fdb\u884c\u7edf\u4e00\u4f9d\u8d56\u7ba1\u7406\u3002--&gt;\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/webjars-locator-core --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;webjars-locator-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n\u914d\u7f6e\u7c7b\n@Configuration\n@EnableWebSocketMessageBroker//\u5f00\u542f\u6d88\u606f\u4ee3\u7406\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n       //\u6d88\u606f\u4ee3\u7406\u524d\u7f00\uff08\u53d1\u9001\u6d88\u606f\u5230\u5916\u90e8 \u7684\u524d\u7f00\uff09\n        registry.enableSimpleBroker(&quot;/topic&quot;);\n        //\u63a5\u6536\u5916\u90e8\u6d88\u606f \u7684\u524d\u7f00\n        registry.setApplicationDestinationPrefixes(&quot;/app&quot;);\n    }\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        //\u5efa\u7acb\u8fde\u63a5\u70b9\n        registry.addEndpoint(&quot;/chat&quot;).withSockJS();\n    }\n}\n\n\nbean\n\n@Data\npublic class Message {\n    private String name;\n    private String content;\n}\n\nController\n\n@Controller\npublic class GreetingController {\n\n    //\u6d88\u606f\u6620\u5c04\u8def\u5f84\n    @MessageMapping(\"/hello\")\n    //\u8f6c\u53d1\u5230\"/topic/greetings\",\u6b64\u65f6\u4fbf\u7531\u914d\u7f6e\u7684\u6d88\u606f\u4ee3\u7406\u8fdb\u884c\u5e7f\u64ad\n    @SendTo(\"/topic/greetings\")\n    public Message greeting(Message message) {\n        return message;\n    }\n\n    /*@Autowired\n    SimpMessagingTemplate simpMessagingTemplate;//\u6d88\u606f\u53d1\u9001\u6a21\u677f\n\n    @MessageMapping(\"/hello\")\n    public void greeting(Message message) {\n        simpMessagingTemplate.convertAndSend(\"/topic/greetings\", message);//\u6b64\u65f6\u4e0e\u4e0a\u9762\u7684\u662f\u4e00\u6837\u7684\u6548\u679c\n    }*/\n}\n\n\u804a\u5929\u9875\u9762chat.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\u7fa4\u804a&lt;/title&gt;\n    &lt;script src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;/webjars/sockjs-client/sockjs.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;/webjars/stomp-websocket/stomp.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\u8bf7\u8f93\u5165\u7528\u6237\u540d&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;name&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;input type=&quot;button&quot; id=&quot;connect&quot; value=&quot;\u8fde\u63a5&quot;&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=&quot;button&quot; id=&quot;disconnect&quot; value=&quot;\u65ad\u5f00\u8fde\u63a5&quot; disabled=&quot;disabled&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;div id=&quot;chat&quot; style=&quot;display: none&quot;&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;\u8bf7\u8f93\u5165\u804a\u5929\u5185\u5bb9&lt;/td&gt;\n            &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;content&quot;&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=&quot;button&quot; id=&quot;send&quot; value=&quot;\u53d1\u9001&quot;&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;div id=&quot;conversation&quot;&gt;\u7fa4\u804a\u8fdb\u884c\u4e2d...&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    $(function () {\n        $(&quot;#connect&quot;).click(function () {\n            connect();\n        })\n\n        $(&quot;#disconnect&quot;).click(function () {\n            if (stompClient != null) {\n                stompClient.disconnect();\n            }\n            setConnected(false);\n        });\n\n        $(&quot;#send&quot;).click(function () {\n            stompClient.send(&#39;/app/hello&#39;, {},\n                JSON.stringify({&#39;name&#39;: $(&quot;#name&quot;).val(), &#39;content&#39;: $(&quot;#content&quot;).val()}))\n        });\n\n        var stompClient = null;\n\n        function connect() {\n            if (!$(&quot;#name&quot;).val()) {\n                return;\n            }\n            var socket = new SockJS(&quot;/chat&quot;);\n            stompClient = Stomp.over(socket);\n            stompClient.connect({}, function (success) {\n                setConnected(true);//\u8bbe\u7f6e\u6309\u94ae\u72b6\u6001\n                stompClient.subscribe(&#39;/topic/greetings&#39;, function (msg) {\n                    showGreeting(JSON.parse(msg.body));\n                })\n            });\n        }\n\n        function setConnected(flag) {\n            $(&quot;#connect&quot;).prop(&quot;disabled&quot;, flag);\n            $(&quot;#disconnect&quot;).prop(&quot;disabled&quot;, !flag);\n            if (flag) {\n                $(&quot;#chat&quot;).show();\n            } else {\n                $(&quot;#chat&quot;).hide();\n            }\n        }\n\n        function showGreeting(msg) {\n            $(&quot;#conversation&quot;).append(&#39;&lt;div&gt;&#39; + msg.name + &#39;:&#39; + msg.content + &#39;&lt;/div&gt;&#39;);\n        }\n    })\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\u6d4b\u8bd5\u7ed3\u679c\n\n\n\n\n\n3.WebSocket\u5b9e\u73b0\u5728\u7ebf\u79c1\u804a\n\n\u4f9d\u8d56\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/sockjs-client --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;sockjs-client&lt;/artifactId&gt;\n    &lt;version&gt;1.1.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/stomp-websocket --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;stomp-websocket&lt;/artifactId&gt;\n    &lt;version&gt;2.3.3&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.webjars.bower/jquery --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;jquery&lt;/artifactId&gt;\n    &lt;version&gt;3.4.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!--WebJars\u662f\u5c06\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09\u8d44\u6e90\uff08JS\uff0cCss\u7b49\uff09\u6253\u6210jar\u5305\u6587\u4ef6\uff0c\u4ee5\u5bf9\u8d44\u6e90\u8fdb\u884c\u7edf\u4e00\u4f9d\u8d56\u7ba1\u7406\u3002--&gt;\n&lt;!-- https://mvnrepository.com/artifact/org.webjars/webjars-locator-core --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.webjars&lt;/groupId&gt;\n    &lt;artifactId&gt;webjars-locator-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n\u914d\u7f6e\u7c7b\n/*Security\u914d\u7f6e\u7c7b*/\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(&quot;xuxx&quot;)\n                .password(&quot;123&quot;)\n                .roles(&quot;admin&quot;)\n                .and()\n                .withUser(&quot;xu&quot;)\n                .password(&quot;123&quot;)\n                .roles(&quot;user&quot;);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .formLogin()\n                .permitAll();\n    }\n}\n\n/*WebSocket\u914d\u7f6e\u7c7b*/\n@Configuration\n@EnableWebSocketMessageBroker//\u5f00\u542f\u6d88\u606f\u4ee3\u7406\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        //\u53d1\u5230/topic\u8ba4\u4e3a\u662f\u7fa4\u804a\u6d88\u606f\uff0c\u53d1\u5230/queue\u8ba4\u4e3a\u662f\u5355\u804a\u6d88\u606f\n        registry.enableSimpleBroker(&quot;/topic&quot;, &quot;/queue&quot;);//\u53d1\u9001\u6d88\u606f\u5230\u5916\u90e8 \u7684\u524d\u7f00\n        registry.setApplicationDestinationPrefixes(&quot;/app&quot;);//\u63a5\u6536\u5916\u90e8\u6d88\u606f \u7684\u524d\u7f00\n    }\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint(&quot;/chat&quot;).withSockJS();\n    }\n}\n\n\nbean\n@Data\npublic class Chat {\n    private String from;\n    private String to;\n    private String content;\n}\n\n\nController\n\n@Controller\npublic class GreetingController {\n\n    @MessageMapping(\"/chat\")\n    //principal\u4e3a\u7528\u6237\u4fe1\u606f\n    public void chat(Principal principal, Chat chat) {\n        chat.setFrom(principal.getName());\n        simpMessagingTemplate.convertAndSendToUser(chat.getTo(), \"/queue/chat\", chat);\n    }\n\n}\n\n\u804a\u5929\u9875\u9762onlinechat.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\u79c1\u804a&lt;/title&gt;\n    &lt;script src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;/webjars/sockjs-client/sockjs.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;/webjars/stomp-websocket/stomp.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=&quot;button&quot; id=&quot;connect&quot; value=&quot;\u8fde\u63a5&quot;&gt;\n&lt;input type=&quot;button&quot; id=&quot;disconnect&quot; value=&quot;\u65ad\u5f00\u8fde\u63a5&quot; disabled=&quot;disabled&quot;&gt;\n&lt;hr/&gt;\n\u6d88\u606f\u5185\u5bb9\uff1a&lt;input type=&quot;text&quot; id=&quot;content&quot;&gt;\n&lt;hr/&gt;\n\u76ee\u6807\u7528\u6237\uff1a&lt;input type=&quot;text&quot; id=&quot;to&quot;&gt;\n&lt;hr/&gt;\n&lt;input type=&quot;button&quot; value=&quot;\u53d1\u9001&quot; id=&quot;send&quot;&gt;\n&lt;div id=&quot;conversation&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n    $(function () {\n        $(&quot;#connect&quot;).click(function () {\n            connect();\n        })\n\n        $(&quot;#disconnect&quot;).click(function () {\n            if (stompClient != null) {\n                stompClient.disconnect();\n            }\n            setConnected(false);\n        });\n\n        $(&quot;#send&quot;).click(function () {\n            stompClient.send(&#39;/app/chat&#39;, {},\n                JSON.stringify({&#39;to&#39;: $(&quot;#to&quot;).val(), &#39;content&#39;: $(&quot;#content&quot;).val()}))\n        });\n\n        var stompClient = null;\n\n        function connect() {\n            var socket = new SockJS(&quot;/chat&quot;);\n            stompClient = Stomp.over(socket);\n            stompClient.connect({}, function (success) {\n                setConnected(true);//\u8bbe\u7f6e\u6309\u94ae\u72b6\u6001\n                stompClient.subscribe(&#39;/user/queue/chat&#39;, function (msg) {//\u70b9\u5bf9\u70b9\u9700\u8981\u52a0\u524d\u7f00\n                    showGreeting(JSON.parse(msg.body));\n                })\n            });\n        }\n\n        function setConnected(flag) {\n            $(&quot;#connect&quot;).prop(&quot;disabled&quot;, flag);\n            $(&quot;#disconnect&quot;).prop(&quot;disabled&quot;, !flag);\n            if (flag) {\n                $(&quot;#chat&quot;).show();\n            } else {\n                $(&quot;#chat&quot;).hide();\n            }\n        }\n\n        function showGreeting(msg) {\n            $(&quot;#conversation&quot;).append(&#39;&lt;div&gt;&#39; + msg.from + &#39;:&#39; + msg.content + &#39;&lt;/div&gt;&#39;);\n        }\n    })\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\u6d4b\u8bd5\u7ed3\u679c\n\n\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}, {"name": "WebSocket", "slug": "WebSocket", "permalink": "/Xuxx_Blogs/tag/WebSocket/"}]}, {"title": "Spring Boot\u6784\u5efaREST\u670d\u52a1", "date": "2020-05-16T02:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj20/", "text": "1.\u57fa\u7840\u7248\n\n\u4f9d\u8d56\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;version&gt;5.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n\u914d\u7f6e\nspring:\n  datasource:\n    username: root\n    password: root\n    url: jdbc:mysql://127.0.0.1:3306/jpa?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n    type: com.zaxxer.hikari.HikariDataSource\n\n  jpa:\n    database: mysql #\u8fde\u63a5\u6570\u636e\u5e93\u7c7b\u578b\n    database-platform: org.hibernate.dialect.MySQL57Dialect #\u914d\u7f6e\u9ed8\u8ba4\u5f15\u64ce\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n\n\n\n\n\u5b9e\u4f53\u7c7b\n@Data\n@Entity(name = &quot;user_jpa&quot;)\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    public Integer id;\n    public String name;\n    public Integer age;\n}\n\n\ndao\npublic interface UserDao extends JpaRepository&lt;User, Integer&gt; {\n}\n\n\n\u6d4b\u8bd5\n\n\u67e5\u8be2\uff08GET\u8bf7\u6c42\uff09\n\u6279\u91cf\u67e5\u8be2 \u6279\u91cf\u67e5\u8be2\n\u5206\u9875\u67e5\u8be2\n\u5206\u9875\u67e5\u8be2\n\u5206\u9875+\u6392\u5e8f\n\u5206\u9875+\u6392\u5e8f\n\u5355\u4e2a\u67e5\u8be2\n\u5355\u4e2a\u67e5\u8be2\n\n\u4fdd\u5b58\uff08POST\u8bf7\u6c42\uff09\n\u4fdd\u5b58\n\n\u66f4\u65b0\uff08PUT\u8bf7\u6c42\uff09\n\u66f4\u65b0\n\n\u5220\u9664\uff08DELETE\u8bf7\u6c42\uff09\n\u5220\u9664\n\n\n\n\n\u5230\u6b64\u5c31\u662f\u4e00\u4e2a\u57fa\u7840\u7248\u7684REST\u670d\u52a1\u4e86\u3002\n2.\u8fdb\u9636\u7248\n1.\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\n\u4fee\u6539dao\npublic interface UserDao extends JpaRepository&lt;User, Integer&gt; {\n    List&lt;User&gt; findByNameContaining(@Param(&quot;name&quot;) String name);\n}\n\n\u91cd\u542f\u9879\u76ee\uff0c\u8bbf\u95eehttp://localhost:8080/users/search\n\n\u6b64\u65f6\u4fbf\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7684\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5(\u9ed8\u8ba4\u8def\u5f84\u5c31\u662f\u65b9\u6cd5\u540d)\u3002\n\u8bbf\u95ee\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5findByNameContaining\n\n\u7531\u4e8eJPA\u7684\u5173\u952e\u5b57\u547d\u540d\u4e00\u822c\u8f83\u957f\uff0c\u4e3a\u4e86\u66f4\u52a0\u4fbf\u6377\uff0c\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\u4e0a\u4f7f\u7528@RestResource\u6ce8\u89e3\n@RestResource\u53c2\u6570:\n\nexported:\u662f\u5426\u66b4\u9732\uff0c\u9ed8\u8ba4\u4e3atrue\n\npath:\u8bbf\u95ee\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\u7684\u8def\u5f84\n\nrel:\u5728\u751f\u6210\u5230\u6b64\u8d44\u6e90\u7684\u94fe\u63a5\u65f6\u8981\u4f7f\u7528\u7684rel\u503c\u3002\n\npublic interface UserDao extends JpaRepository&lt;User, Integer&gt; {\n    @RestResource(path = &quot;byname&quot;, rel = &quot;findByName&quot;)\n    List&lt;User&gt; findByNameContaining(@Param(&quot;name&quot;) String name);\n}\n\n\n2.\u81ea\u5b9a\u4e49\u8bf7\u6c42\u8def\u5f84\u3001\u7ed3\u679c key \u503c\n\uff081\uff09\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8bf7\u6c42\u8def\u5f84\u90fd\u662f\u5b9e\u4f53\u7c7b\u540d\u5c0f\u5199\u52a0 @RepositoryRestResource\n@RepositoryRestResource\u53c2\u6570\uff1a\n\npath\uff1a\u8868\u793a\u5c06\u6240\u6709\u8bf7\u6c42\u8def\u5f84\u4e2d\u7684 (\u4f8b:)uesrs\uff0c\u5982 http://localhost:8080/us\ncollectionResourceRel\uff1a\u8868\u793a\u5c06\u8fd4\u56de\u7684 JSON \u96c6\u5408\u4e2d\u7684(\u4f8b:)uesrs \u96c6\u5408\u7684 key\u3002\nitemResourceRel \uff1a\u8868\u793a\u5c06\u8fd4\u56de\u7684 JSON \u96c6\u5408\u4e2d\u7684\u5355\u4e2a(\u4f8b:)uesr \u7684 key\u3002\nexported:\u662f\u5426\u66b4\u9732\uff0c\u9ed8\u8ba4\u4e3atrue\n\n@RepositoryRestResource(collectionResourceRel = &quot;userlist&quot;, itemResourceRel = &quot;u&quot;)\npublic interface UserDao extends JpaRepository&lt;User, Integer&gt; {\n    @RestResource(path = &quot;byname&quot;, rel = &quot;findByName&quot;)\n    List&lt;User&gt; findByNameContaining(@Param(&quot;name&quot;) String name);\n}\n\n\n3.\u914d\u7f6eREST\n\n\u914d\u7f6e\u6587\u4ef6\n\n#rest \u914d\u7f6e\n  data:\n    rest:\n      #\u6dfb\u52a0\u7edf\u4e00\u524d\u7f00\n      base-path: api\n\n\u914d\u7f6e\u540ehttp://localhost:8080/users--&gt;http://localhost:8080/api/users\n#rest \u914d\u7f6e\n  data:\n    rest:\n      #\u6dfb\u52a0\u7edf\u4e00\u524d\u7f00\n      base-path: api\n      #\u662f\u5426\u5728\u521b\u5efa\u5b9e\u4f53\u540e\u8fd4\u56de\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3atrue\n      return-body-on-create: true\n      #\u662f\u5426\u5728\u66f4\u65b0\u5b9e\u4f53\u540e\u8fd4\u56de\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3atrue\n      return-body-on-update: true\n      #\u6bcf\u9875\u7684\u9ed8\u8ba4\u5927\u5c0f\uff0c\u9ed8\u8ba420\n      default-page-size: 20\n      ......\n\n\n\u7f16\u5199\u914d\u7f6e\u7c7b\uff08\u4f18\u5148\u7ea7\u66f4\u9ad8\uff09\n\n/**\n * rest\u7684\u914d\u7f6e\u7c7b\n */\n@Configuration\npublic class RestConfig implements RepositoryRestConfigurer {\n    @Override\n    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {\n        config.setBasePath(&quot;api&quot;).setDefaultPageSize(20);//\u94fe\u5f0f\u7f16\u7a0b\uff0c\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2a\n    }\n}\n\n4.\u914d\u7f6e CORS\uff08\u89e3\u51b3\u8de8\u57df\u8bf7\u6c42\u95ee\u9898\uff09\n\u5177\u4f53\u53c2\u8003Spring Boot\u901a\u8fc7CROS\u5b9e\u73b0\u8de8\u57df\uff09\n\n\u5355\u72ec\u914d\u7f6e\uff1a\u6dfb\u52a0@CrossOrigin\u6ce8\u89e3\n\n\u5168\u5c40\u914d\u7f6e\uff1a\u7f16\u5199\u914d\u7f6e\u7c7b\uff0c\u91cd\u5199addCorsMappings\u65b9\u6cd5\n\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring Boot\u6574\u5408Spring Data JPA", "date": "2020-05-13T01:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj19/", "text": "1.\u4e86\u89e3JPA\n1. JPA\u662f\u4ec0\u4e48\n\nJava Persistence API\uff1a\u7528\u4e8e\u5bf9\u8c61\u6301\u4e45\u5316\u7684 API\nJava EE 5.0 \u5e73\u53f0\u6807\u51c6\u7684 ORM \u89c4\u8303\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u8bbf\u95ee\u6301\u4e45\u5c42\nimg\n\n2. JPA\u548cHibernate\u7684\u5173\u7cfb\n\nJPA \u662f Hibernate \u7684\u4e00\u4e2a\u62bd\u8c61\uff08\u5c31\u50cfJDBC\u548cJDBC\u9a71\u52a8\u7684\u5173\u7cfb\uff09\uff1b\nJPA \u662f\u89c4\u8303\uff1aJPA \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u79cd ORM \u89c4\u8303\uff0c\u4e0d\u662fORM \u6846\u67b6\uff0c\u8fd9\u662f\u56e0\u4e3a JPA \u5e76\u672a\u63d0\u4f9b ORM \u5b9e\u73b0\uff0c\u5b83\u53ea\u662f\u5236\u8ba2\u4e86\u4e00\u4e9b\u89c4\u8303\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7f16\u7a0b\u7684 API \u63a5\u53e3\uff0c\u4f46\u5177\u4f53\u5b9e\u73b0\u5219\u7531 ORM \u5382\u5546\u63d0\u4f9b\u5b9e\u73b0\uff1b\nHibernate \u662f\u5b9e\u73b0\uff1aHibernate \u9664\u4e86\u4f5c\u4e3a ORM \u6846\u67b6\u4e4b\u5916\uff0c\u5b83\u4e5f\u662f\u4e00\u79cd JPA \u5b9e\u73b0\n\u4ece\u529f\u80fd\u4e0a\u6765\u8bf4\uff0c JPA \u662f Hibernate \u529f\u80fd\u7684\u4e00\u4e2a\u5b50\u96c6\n\n3. JPA\u7684\u4f9b\u5e94\u5546\nJPA \u7684\u76ee\u6807\u4e4b\u4e00\u662f\u5236\u5b9a\u4e00\u4e2a\u53ef\u4ee5\u7531\u5f88\u591a\u4f9b\u5e94\u5546\u5b9e\u73b0\u7684 API\uff0cHibernate 3.2+\u3001TopLink 10.1+ \u4ee5\u53ca OpenJPA \u90fd\u63d0\u4f9b\u4e86 JPA \u7684\u5b9e\u73b0\uff0cJpa \u4f9b\u5e94\u5546\u6709\u5f88\u591a\uff0c\u5e38\u89c1\u7684\u6709\u5982\u4e0b\u56db\u79cd\uff1a\n\nHibernate\nJPA \u7684\u59cb\u4f5c\u4fd1\u8005\u5c31\u662f Hibernate \u7684\u4f5c\u8005\uff0cHibernate \u4ece 3.2 \u5f00\u59cb\u517c\u5bb9 JPA\u3002\nOpenJPA\nOpenJPA \u662f Apache \u7ec4\u7ec7\u63d0\u4f9b\u7684\u5f00\u6e90\u9879\u76ee\u3002\nTopLink\nTopLink \u4ee5\u524d\u9700\u8981\u6536\u8d39\uff0c\u5982\u4eca\u5f00\u6e90\u4e86\u3002\nEclipseLink\n\n4. JPA\u7684\u4f18\u52bf\n\n\u6807\u51c6\u5316: \u63d0\u4f9b\u76f8\u540c\u7684 API\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u57fa\u4e8eJPA \u5f00\u53d1\u7684\u4f01\u4e1a\u5e94\u7528\u80fd\u591f\u7ecf\u8fc7\u5c11\u91cf\u7684\u4fee\u6539\u5c31\u80fd\u591f\u5728\u4e0d\u540c\u7684 JPA \u6846\u67b6\u4e0b\u8fd0\u884c\u3002\n\u7b80\u5355\u6613\u7528\uff0c\u96c6\u6210\u65b9\u4fbf: JPA \u7684\u4e3b\u8981\u76ee\u6807\u4e4b\u4e00\u5c31\u662f\u63d0\u4f9b\u66f4\u52a0\u7b80\u5355\u7684\u7f16\u7a0b\u6a21\u578b\uff0c\u5728 JPA \u6846\u67b6\u4e0b\u521b\u5efa\u5b9e\u4f53\u548c\u521b\u5efa Java \u7c7b\u4e00\u6837\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4f7f\u7528 javax.persistence.Entity \u8fdb\u884c\u6ce8\u89e3\uff1bJPA \u7684\u6846\u67b6\u548c\u63a5\u53e3\u4e5f\u90fd\u975e\u5e38\u7b80\u5355\u3002\n\u53ef\u5ab2\u7f8eJDBC\u7684\u67e5\u8be2\u80fd\u529b: JPA\u7684\u67e5\u8be2\u8bed\u8a00\u662f\u9762\u5411\u5bf9\u8c61\u7684\uff0cJPA\u5b9a\u4e49\u4e86\u72ec\u7279\u7684JPQL\uff0c\u800c\u4e14\u80fd\u591f\u652f\u6301\u6279\u91cf\u66f4\u65b0\u548c\u4fee\u6539\u3001JOIN\u3001GROUP BY\u3001HAVING \u7b49\u901a\u5e38\u53ea\u6709 SQL \u624d\u80fd\u591f\u63d0\u4f9b\u7684\u9ad8\u7ea7\u67e5\u8be2\u7279\u6027\uff0c\u751a\u81f3\u8fd8\u80fd\u591f\u652f\u6301\u5b50\u67e5\u8be2\u3002\n\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u9ad8\u7ea7\u7279\u6027: JPA \u4e2d\u80fd\u591f\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u9ad8\u7ea7\u7279\u6027\uff0c\u5982\u7c7b\u4e4b\u95f4\u7684\u7ee7\u627f\u3001\u591a\u6001\u548c\u7c7b\u4e4b\u95f4\u7684\u590d\u6742\u5173\u7cfb\uff0c\u6700\u5927\u9650\u5ea6\u7684\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u6a21\u578b\n\n5. JPA\u5305\u542b\u7684\u6280\u672f\n\nORM \u6620\u5c04\u5143\u6570\u636e\uff1aJPA \u652f\u6301 XML \u548c JDK 5.0 \u6ce8\u89e3\u4e24\u79cd\u5143\u6570\u636e\u7684\u5f62\u5f0f\uff0c\u5143\u6570\u636e\u63cf\u8ff0\u5bf9\u8c61\u548c\u8868\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u6846\u67b6\u636e\u6b64\u5c06\u5b9e\u4f53\u5bf9\u8c61\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u8868\u4e2d\u3002\n\nJPA \u7684 API\uff1a\u7528\u6765\u64cd\u4f5c\u5b9e\u4f53\u5bf9\u8c61\uff0c\u6267\u884cCRUD\u64cd\u4f5c\uff0c\u6846\u67b6\u5728\u540e\u53f0\u5b8c\u6210\u6240\u6709\u7684\u4e8b\u60c5\uff0c\u5f00\u53d1\u8005\u4ece\u7e41\u7410\u7684 JDBC \u548c SQL \u4ee3\u7801\u4e2d\u89e3\u8131\u51fa\u6765\u3002\n\n\u67e5\u8be2\u8bed\u8a00\uff08JPQL\uff09\uff1a\u8fd9\u662f\u6301\u4e45\u5316\u64cd\u4f5c\u4e2d\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u800c\u975e\u9762\u5411\u6570\u636e\u5e93\u7684\u67e5\u8be2\u8bed\u8a00\u67e5\u8be2\u6570\u636e\uff0c\u907f\u514d\u7a0b\u5e8f\u548c\u5177\u4f53\u7684 SQL \u7d27\u5bc6\u8026\u5408\u3002\n## Spring Data\n\n\nSpring Data \u662f Spring \u7684\u4e00\u4e2a\u5b50\u9879\u76ee\u3002\u7528\u4e8e\u7b80\u5316\u6570\u636e\u5e93\u8bbf\u95ee\uff0c\u652f\u6301NoSQL \u548c \u5173\u7cfb\u6570\u636e\u5b58\u50a8\u3002\u5176\u4e3b\u8981\u76ee\u6807\u662f\u4f7f\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u53d8\u5f97\u65b9\u4fbf\u5feb\u6377\u3002Spring Data \u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a\n\nSpringData \u9879\u76ee\u652f\u6301 NoSQL \u5b58\u50a8\uff1a\nMongoDB \uff08\u6587\u6863\u6570\u636e\u5e93\uff09\nNeo4j\uff08\u56fe\u5f62\u6570\u636e\u5e93\uff09\nRedis\uff08\u952e/\u503c\u5b58\u50a8\uff09\nHbase\uff08\u5217\u65cf\u6570\u636e\u5e93\uff09\nSpringData \u9879\u76ee\u6240\u652f\u6301\u7684\u5173\u7cfb\u6570\u636e\u5b58\u50a8\u6280\u672f\uff1a\nJDBC\nJPA\nSpring Data Jpa \u81f4\u529b\u4e8e\u51cf\u5c11\u6570\u636e\u8bbf\u95ee\u5c42 (DAO) \u7684\u5f00\u53d1\u91cf. \u5f00\u53d1\u8005\u552f\u4e00\u8981\u505a\u7684\uff0c\u5c31\u662f\u58f0\u660e\u6301\u4e45\u5c42\u7684\u63a5\u53e3\uff0c\u5176\u4ed6\u90fd\u4ea4\u7ed9 Spring Data JPA \u6765\u5e2e\u4f60\u5b8c\u6210\uff01\n\u6846\u67b6\u600e\u4e48\u53ef\u80fd\u4ee3\u66ff\u5f00\u53d1\u8005\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\u5462\uff1f\u6bd4\u5982\uff1a\u5f53\u6709\u4e00\u4e2a UserDao.findUserById() \u8fd9\u6837\u4e00\u4e2a\u65b9\u6cd5\u58f0\u660e\uff0c\u5927\u81f4\u5e94\u8be5\u80fd\u5224\u65ad\u51fa\u8fd9\u662f\u6839\u636e\u7ed9\u5b9a\u6761\u4ef6\u7684 ID \u67e5\u8be2\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684 User \u5bf9\u8c61\u3002Spring Data JPA \u505a\u7684\u4fbf\u662f\u89c4\u8303\u65b9\u6cd5\u7684\u540d\u5b57\uff0c\u6839\u636e\u7b26\u5408\u89c4\u8303\u7684\u540d\u5b57\u6765\u786e\u5b9a\u65b9\u6cd5\u9700\u8981\u5b9e\u73b0\u4ec0\u4e48\u6837\u7684\u903b\u8f91\u3002\n\n\u8865\u5145\uff1a\n\u5173\u4e8e JPQL\n\nJPQL\u8bed\u8a00\uff0c\u5373 Java Persistence Query Language \u7684\u7b80\u79f0\u3002JPQL \u662f\u4e00\u79cd\u548c SQL \u975e\u5e38\u7c7b\u4f3c\u7684\u4e2d\u95f4\u6027\u548c\u5bf9\u8c61\u5316\u67e5\u8be2\u8bed\u8a00\uff0c\u5b83\u6700\u7ec8\u4f1a\u88ab\u7f16\u8bd1\u6210\u9488\u5bf9\u4e0d\u540c\u5e95\u5c42\u6570\u636e\u5e93\u7684 SQL \u67e5\u8be2\uff0c\u4ece\u800c\u5c4f\u853d\u4e0d\u540c\u6570\u636e\u5e93\u7684\u5dee\u5f02\u3002JPQL\u8bed\u8a00\u7684\u8bed\u53e5\u53ef\u4ee5\u662f select \u8bed\u53e5\u3001update \u8bed\u53e5\u6216delete\u8bed\u53e5\uff0c\u5b83\u4eec\u90fd\u901a\u8fc7 Query \u63a5\u53e3\u5c01\u88c5\u6267\u884c\u3002\nQuery\u63a5\u53e3\u5c01\u88c5\u4e86\u6267\u884c\u6570\u636e\u5e93\u67e5\u8be2\u7684\u76f8\u5173\u65b9\u6cd5\u3002\u8c03\u7528 EntityManager \u7684 createQuery\u3001create NamedQuery \u53ca createNativeQuery \u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u67e5\u8be2\u5bf9\u8c61\uff0c\u8fdb\u800c\u53ef\u8c03\u7528 Query \u63a5\u53e3\u7684\u76f8\u5173\u65b9\u6cd5\u6765\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u3002\nQuery\u63a5\u53e3\u7684\u4e3b\u8981\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\nint executeUpdate(); | \u7528\u4e8e\u6267\u884cupdate\u6216delete\u8bed\u53e5\u3002\nList getResultList(); | \u7528\u4e8e\u6267\u884cselect\u8bed\u53e5\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5b9e\u4f53\u5217\u8868\u3002\nObject getSingleResult(); | \u7528\u4e8e\u6267\u884c\u53ea\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5b9e\u4f53\u7684select\u8bed\u53e5\u3002\nQuery setFirstResult(int startPosition); | \u7528\u4e8e\u8bbe\u7f6e\u4ece\u54ea\u4e2a\u5b9e\u4f53\u8bb0\u5f55\u5f00\u59cb\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002\nQuery setMaxResults(int maxResult); | \u7528\u4e8e\u8bbe\u7f6e\u8fd4\u56de\u7ed3\u679c\u5b9e\u4f53\u7684\u6700\u5927\u6570\u3002\u4e0esetFirstResult\u7ed3\u5408\u4f7f\u7528\u53ef\u5b9e\u73b0\u5206\u9875\u67e5\u8be2\u3002\nQuery setFlushMode(FlushModeType flushMode); | \u8bbe\u7f6e\u67e5\u8be2\u5bf9\u8c61\u7684Flush\u6a21\u5f0f\u3002\u53c2\u6570\u53ef\u4ee5\u53d62\u4e2a\u679a\u4e3e\u503c\uff1aFlushModeType.AUTO \u4e3a\u81ea\u52a8\u66f4\u65b0\u6570\u636e\u5e93\u8bb0\u5f55\uff0cFlushMode Type.COMMIT \u4e3a\u76f4\u5230\u63d0\u4ea4\u4e8b\u52a1\u65f6\u624d\u66f4\u65b0\u6570\u636e\u5e93\u8bb0\u5f55\u3002\nsetHint(String hintName, Object value); | \u8bbe\u7f6e\u4e0e\u67e5\u8be2\u5bf9\u8c61\u76f8\u5173\u7684\u7279\u5b9a\u4f9b\u5e94\u5546\u53c2\u6570\u6216\u63d0\u793a\u4fe1\u606f\u3002\u53c2\u6570\u540d\u53ca\u5176\u53d6\u503c\u9700\u8981\u53c2\u8003\u7279\u5b9a JPA \u5b9e\u73b0\u5e93\u63d0\u4f9b\u5546\u7684\u6587\u6863\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u65e0\u6548\u5c06\u629b\u51faIllegalArgumentException\u5f02\u5e38\u3002\nsetParameter(int position, Object value); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u4f4d\u7f6e\u53c2\u6570\u8d4b\u503c\u3002Position \u6307\u5b9a\u53c2\u6570\u5e8f\u53f7\uff0cvalue \u4e3a\u8d4b\u7ed9\u53c2\u6570\u7684\u503c\u3002\nsetParameter(int position, Date d, TemporalType type); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u4f4d\u7f6e\u53c2\u6570\u8d4b Date \u503c\u3002Position \u6307\u5b9a\u53c2\u6570\u5e8f\u53f7\uff0cvalue \u4e3a\u8d4b\u7ed9\u53c2\u6570\u7684\u503c\uff0ctemporalType \u53d6 TemporalType \u7684\u679a\u4e3e\u5e38\u91cf\uff0c\u5305\u62ec DATE\u3001TIME \u53ca TIMESTAMP \u4e09\u4e2a\uff0c\uff0c\u7528\u4e8e\u5c06 Java \u7684 Date \u578b\u503c\u4e34\u65f6\u8f6c\u6362\u4e3a\u6570\u636e\u5e93\u652f\u6301\u7684\u65e5\u671f\u65f6\u95f4\u7c7b\u578b\uff08java.sql.Date\u3001java.sql.Time\u53cajava.sql.Timestamp\uff09\u3002\nsetParameter(int position, Calendar c, TemporalType type); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u4f4d\u7f6e\u53c2\u6570\u8d4b Calenda r\u503c\u3002position \u6307\u5b9a\u53c2\u6570\u5e8f\u53f7\uff0cvalue \u4e3a\u8d4b\u7ed9\u53c2\u6570\u7684\u503c\uff0ctemporalType \u7684\u542b\u4e49\u53ca\u53d6\u820d\u540c\u524d\u3002\nsetParameter(String name, Object value); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u540d\u79f0\u53c2\u6570\u8d4b\u503c\u3002\nsetParameter(String name, Date d, TemporalType type); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u540d\u79f0\u53c2\u6570\u8d4b Date \u503c,\u7528\u6cd5\u540c\u524d\u3002\nsetParameter(String name, Calendar c, TemporalType type); | \u4e3a\u67e5\u8be2\u8bed\u53e5\u7684\u6307\u5b9a\u540d\u79f0\u53c2\u6570\u8bbe\u7f6eCalendar\u503c\u3002name\u4e3a\u53c2\u6570\u540d\uff0c\u5176\u5b83\u540c\u524d\u3002\u8be5\u65b9\u6cd5\u8c03\u7528\u65f6\u5982\u679c\u53c2\u6570\u4f4d\u7f6e\u6216\u53c2\u6570\u540d\u4e0d\u6b63\u786e\uff0c\u6216\u8005\u6240\u8d4b\u7684\u53c2\u6570\u503c\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u5c06\u629b\u51fa IllegalArgumentException \u5f02\u5e38\u3002\n\nJPQL \u4e3e\u4f8b\n\u548c\u5728 SQL \u4e2d\u4e00\u6837\uff0cJPQL \u4e2d\u7684 select \u8bed\u53e5\u7528\u4e8e\u6267\u884c\u67e5\u8be2\u3002\u5176\u8bed\u6cd5\u53ef\u8868\u793a\u4e3a\uff1a\nselect_clause form_clause [where_clause] [groupby_clause] [having_clause] [orderby_clause]\n\u5176\u4e2d\uff1a\n\nfrom \u5b50\u53e5\u662f\u67e5\u8be2\u8bed\u53e5\u7684\u5fc5\u9009\u5b50\u53e5\u3002\nselect \u7528\u6765\u6307\u5b9a\u67e5\u8be2\u8fd4\u56de\u7684\u7ed3\u679c\u5b9e\u4f53\u6216\u5b9e\u4f53\u7684\u67d0\u4e9b\u5c5e\u6027\u3002\nfrom \u5b50\u53e5\u58f0\u660e\u67e5\u8be2\u6e90\u5b9e\u4f53\u7c7b\uff0c\u5e76\u6307\u5b9a\u6807\u8bc6\u7b26\u53d8\u91cf\uff08\u76f8\u5f53\u4e8eSQL\u8868\u7684\u522b\u540d\uff09\u3002\n\u5982\u679c\u4e0d\u5e0c\u671b\u8fd4\u56de\u91cd\u590d\u5b9e\u4f53\uff0c\u53ef\u4f7f\u7528\u5173\u952e\u5b57 distinct \u4fee\u9970\u3002select\u3001from \u90fd\u662f JPQL \u7684\u5173\u952e\u5b57\uff0c\u901a\u5e38\u5168\u5927\u5199\u6216\u5168\u5c0f\u5199\uff0c\u5efa\u8bae\u4e0d\u8981\u5927\u5c0f\u5199\u6df7\u7528\u3002\n\n\u5728 JPQL \u4e2d\uff0c\u67e5\u8be2\u6240\u6709\u5b9e\u4f53\u7684 JPQL \u67e5\u8be2\u8bed\u53e5\u5f88\u7b80\u5355\uff0c\u5982\u4e0b\uff1a\nselect o from Order o \u6216 select o from Order as o\n\u8fd9\u91cc\u5173\u952e\u5b57 as \u53ef\u4ee5\u7701\u53bb\uff0c\u6807\u8bc6\u7b26\u53d8\u91cf\u7684\u547d\u540d\u89c4\u8303\u4e0e Java \u6807\u8bc6\u7b26\u76f8\u540c\uff0c\u4e14\u533a\u5206\u5927\u5c0f\u5199,\u8c03\u7528 EntityManager \u7684 createQuery() \u65b9\u6cd5\u53ef\u521b\u5efa\u67e5\u8be2\u5bf9\u8c61\uff0c\u63a5\u7740\u8c03\u7528 Query \u63a5\u53e3\u7684 getResultList() \u65b9\u6cd5\u5c31\u53ef\u83b7\u5f97\u67e5\u8be2\u7ed3\u679c\u96c6\uff0c\u5982\u4e0b\uff1a\n\nQuery query = entityManager.createQuery( \"select o from Order o\"); List orders = query.getResultList();Iterator iterator = orders.iterator();while(iterator.hasNext() ) {  // \u5904\u7406Order}\n\u5176\u4ed6\u65b9\u6cd5\u7684\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n2.\u4f7f\u7528JPA\n1.\u7b80\u5355\u4f7f\u7528\n&lt;!--\u4f9d\u8d56--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;version&gt;5.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n\n# \u914d\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u53ca\u6570\u636e\u5e93\u9a71\u52a8\nspring.datasource.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n\n#jpa\nspring.jpa.database=mysql\nspring.jpa.database-platform=mysql\n# \u751f\u6210\u65b9\u5f0f update \u8fd0\u884c\u65f6\u5728\u6570\u636e\u5e93\u751f\u6210\u8868\uff0c\u82e5\u6709\u66f4\u65b0\u5219\u53bb\u66f4\u65b0\u6570\u636e\nspring.jpa.hibernate.ddl-auto=update\n# \u63a7\u5236\u53f0\u5c55\u793a JPA \u6846\u67b6\u751f\u6210\u7684sql\u8bed\u53e5\nspring.jpa.show-sql=true\n# \u4f7f\u7528JPA \u521b\u5efa\u8868\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7684\u5b58\u50a8\u5f15\u64ce\u662fMyISAM\uff0c\u901a\u8fc7\u6307\u5b9a\u6570\u636e\u5e93\u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528InnoDB\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect\n\n##\u662f\u5426\u81ea\u52a8\u751f\u6210dd\n#spring.jpa.generate-ddl=true\n# \u683c\u5f0f\u5316sql\u8bed\u53e5\n#spring.jpa.properties.hibernate-format_sql=true\n# \u89e3\u51b3 hibernate multiple merge \u95ee\u9898\n#spring.jpa.properties.hibernate.event.merge.entity_copy_observer = allow\n\n/**\n * @author Xuxx3309\n * @Description\n * @create 2020-05-15 0:41\n */\n@Data\n//\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7c7b\u540d\u5373\u8868\u540d\n@Entity(name = &quot;t_book&quot;)\npublic class Book {\n    //\u6807\u6ce8\u4e3b\u952e\u5b57\u6bb5\n    @Id\n    //\u4e3b\u952e\u81ea\u589e\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    //@Column(name = &quot;id&quot;, length = 50, nullable = false)\n    private Integer id;\n    //@Column(name = &quot;name&quot;, length = 50, nullable = false)\n    private String name;\n    private String author;\n}\n\n/**\n * @author Xuxx3309\n * @Description\n * @create 2020-05-15 0:51\n */\npublic interface BookDao extends JpaRepository&lt;Book, Integer&gt; {\n}\n\n\u8865\u5145\uff1a\n\u4e0e\u7ee7\u627f Repository \u63a5\u53e3\u7b49\u4ef7\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u6301\u4e45\u5c42\u63a5\u53e3\u4e0a\u4f7f\u7528 @RepositoryDefinition \u6ce8\u89e3\uff0c\u5e76\u4e3a\u5176\u6307\u5b9a domainClass \u548c idClass \u5c5e\u6027\u3002\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\n@RepositoryDefinition(domainClass = Book.class, idClass = Inetger.class)\npublic interface BookDao{\n}\n\n\n//\u6d4b\u8bd5JPA\u4e2d\u81ea\u5e26\u7684\u65b9\u6cd5\n\n@SpringBootTest\nclass JpaApplicationTests {\n    @Autowired\n    BookDao bookDao;\n\n    @Test\n    void testSave() {\n        Book book = new Book();\n        book.setName(\"JAVA\u5f00\u53d1\u6307\u5357\");\n        book.setAuthor(\"Xuxx\");\n        Book save_book = bookDao.save(book);\n        System.out.println(save_book);\n    }\n\n    @Test\n    public void testUpdate() {\n        Book book = new Book();\n        book.setId(1);\n        book.setName(\"JAVA\u5f00\u53d1\u6307\u5357\");\n        book.setAuthor(\"X\");\n        //saveAndFlush:\u6570\u636e\u5e93\u4e2d\u6709\uff08\u6839\u636eid\u5224\u65ad\uff09\u5c31\u66f4\u65b0\uff0c\u6ca1\u6709\u5c31\u6dfb\u52a0\n        Book saveAndFlush = bookDao.saveAndFlush(book);\n        System.out.println(saveAndFlush);\n    }\n\n    @Test\n    public void testDaelete() {\n        bookDao.deleteById(1);\n    }\n\n    @Test\n    public void testFind1() {\n        Optional&lt;Book&gt; book1 = bookDao.findById(1);\n        System.out.println(book1.get());\n\n        List&lt;Book&gt; books = bookDao.findAll();\n        for (Book book : books) {\n            System.out.println(book);\n        }\n    }\n\n    /**\n     * \u6392\u5e8f\n     */\n    @Test\n    public void testFind2() {\n        Sort sort = Sort.by(Sort.Direction.DESC, \"id\");\n        List&lt;Book&gt; books = bookDao.findAll(sort);\n        for (Book book : books) {\n            System.out.println(book);\n        }\n    }\n\n    /**\n     * \u5206\u9875\n     */\n    @Test\n    public void testFind3() {\n        //of\u53c2\u6570\uff1a1.\u7b2c\u51e0\u9875\uff08\u4ece0\u5f00\u59cb\uff09 2.\u6bcf\u9875\u51e0\u6761\n        Pageable pageable = PageRequest.of(0, 2);\n        Page&lt;Book&gt; page = bookDao.findAll(pageable);\n        System.out.println(\"\u603b\u8bb0\u5f55\u6570\uff1a\" + page.getTotalElements());\n        System.out.println(\"\u603b\u9875\u6570\uff1a\" + page.getTotalPages());\n        System.out.println(\"\u5f53\u524d\u9875\u6570\uff08\u4ece0\u5f00\u59cb\uff09\uff1a\" + page.getNumber());\n        System.out.println(\"\u6bcf\u9875\u8bb0\u5f55\u6570\uff1a\" + page.getSize());\n        System.out.println(\"\u5f53\u524d\u9875\u4e2d\u5b58\u5728\u7684\u8bb0\u5f55\u6570\uff1a\" + page.getNumberOfElements());\n        System.out.println(\"\u662f\u5426\u662f\u9996\u9875\uff1a\" + page.isFirst());\n        System.out.println(\"\u662f\u5426\u662f\u5c3e\u9875\u9875\uff1a\" + page.isLast());\n        System.out.println(\"\u67e5\u8be2\u7ed3\u679c\uff1a\" + page.getContent());\n        for (Book book : page) {\n            System.out.println(book);\n        }\n    }\n\n    /**\n     * \u6392\u5e8f+\u5206\u9875\n     */\n    @Test\n    public void testFind4() {\n        Sort sort = Sort.by(Sort.Direction.DESC, \"id\");\n        Pageable pageable = PageRequest.of(0, 2, sort);\n        Page&lt;Book&gt; page = bookDao.findAll(pageable);\n        for (Book book : page) {\n            System.out.println(book);\n        }\n    }\n}\n2.\u5173\u952e\u5b57\u81ea\u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\n\u65b9\u6cd5\u5b9a\u4e49\u89c4\u8303\n1.\u7b80\u5355\u6761\u4ef6\u67e5\u8be2\n\n\u6309\u7167 Spring Data \u7684\u89c4\u8303\uff0c\u67e5\u8be2\u65b9\u6cd5\u4ee5 find | read | get \u5f00\u5934\n\u6d89\u53ca\u6761\u4ef6\u67e5\u8be2\u65f6\uff0c\u6761\u4ef6\u7684\u5c5e\u6027\u7528\u6761\u4ef6\u5173\u952e\u5b57\u8fde\u63a5\uff0c\u8981\u6ce8\u610f\u7684\u662f\uff1a\u6761\u4ef6\u5c5e\u6027\u4ee5\u9996\u5b57\u6bcd\u5927\u5199\n\u652f\u6301\u5c5e\u6027\u7684\u7ea7\u8054\u67e5\u8be2. \u82e5\u5f53\u524d\u7c7b\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5c5e\u6027, \u5219\u4f18\u5148\u4f7f\u7528, \u800c\u4e0d\u4f7f\u7528\u7ea7\u8054\u5c5e\u6027. \u82e5\u9700\u8981\u4f7f\u7528\u7ea7\u8054\u5c5e\u6027, \u5219\u5c5e\u6027\u4e4b\u95f4\u4f7f\u7528 _ \u8fdb\u884c\u8fde\u63a5.\n\n\u67e5\u8be2\u4e3e\u4f8b\uff1a\n1.\u6309\u7167id\u67e5\u8be2\n\nUser getUserById(Long id);\n2.\u67e5\u8be2\u6240\u6709\u5e74\u9f84\u5c0f\u4e8e90\u5c81\u7684\u4eba\n\nList&lt;User&gt; findByAgeLessThan(Long age);\n3.\u67e5\u8be2\u6240\u6709\u59d3\u8d75\u7684\u4eba\uff08\u4ee5\u8d75\u5f00\u5934\uff09\n\nList&lt;User&gt; findByUsernameStartingWith(String u);\n4.\u67e5\u8be2\u6240\u6709\u59d3\u8d75\u7684\u3001\u5e76\u4e14id\u5927\u4e8e50\u7684\u4eba\n\nList&lt;User&gt; findByUsernameStartingWithAndIdGreaterThan(String name, Long id);\n5.\u67e5\u8be2\u6240\u6709\u59d3\u540d\u4e2d\u5305\u542b\u201d\u4e0a\u201d\u5b57\u7684\u4eba\n\nList&lt;User&gt; findByUsernameContaining(String name);\n6.\u67e5\u8be2\u6240\u6709\u59d3\u8d75\u7684\u6216\u8005\u5e74\u9f84\u5927\u4e8e90\u5c81\u7684\n\nList&lt;User&gt; findByUsernameStartingWithOrAgeGreaterThan(String name, Long age);\n7.\u67e5\u8be2\u6240\u6709\u89d2\u8272\u4e3a1\u7684\u7528\u6237\n\nList&lt;User&gt; findByRole_Id(Long id);\n8.\u6a21\u7cca\u67e5\u8be2\uff08\u53ef\u4ee5\u76f4\u63a5\u7528 \u4f8b5\uff09\n\n//\u8c03\u7528\u65f6\u8981\u52a0 \"%\"+name+\"%\"\nList&lt;User&gt; findByNameLike(String name);\n2.\u652f\u6301\u7684\u5173\u952e\u5b57\n\u652f\u6301\u7684\u67e5\u8be2\u5173\u952e\u5b57\u5982\u4e0b\u56fe\uff1a\nimg\n3.\u67e5\u8be2\u65b9\u6cd5\u6d41\u7a0b\u89e3\u6790\n\u4e3a\u4ec0\u4e48\u5199\u4e0a\u65b9\u6cd5\u540d\uff0cJPA\u5c31\u77e5\u9053\u4f60\u60f3\u5e72\u561b\u4e86\u5462\uff1f\u5047\u5982\u521b\u5efa\u5982\u4e0b\u7684\u67e5\u8be2\uff1afindByUserDepUuid()\uff0c\u6846\u67b6\u5728\u89e3\u6790\u8be5\u65b9\u6cd5\u65f6\uff0c\u9996\u5148\u5254\u9664 findBy\uff0c\u7136\u540e\u5bf9\u5269\u4e0b\u7684\u5c5e\u6027\u8fdb\u884c\u89e3\u6790\uff0c\u5047\u8bbe\u67e5\u8be2\u5b9e\u4f53\u4e3aDoc\uff1a\n\n\u5148\u5224\u65ad userDepUuid \uff08\u6839\u636e POJO \u89c4\u8303\uff0c\u9996\u5b57\u6bcd\u53d8\u4e3a\u5c0f\u5199\uff09\u662f\u5426\u4e3a\u67e5\u8be2\u5b9e\u4f53\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5982\u679c\u662f\uff0c\u5219\u8868\u793a\u6839\u636e\u8be5\u5c5e\u6027\u8fdb\u884c\u67e5\u8be2\uff1b\u5982\u679c\u6ca1\u6709\u8be5\u5c5e\u6027\uff0c\u7ee7\u7eed\u7b2c\u4e8c\u6b65\uff1b\n\u4ece\u53f3\u5f80\u5de6\u622a\u53d6\u7b2c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u7b26\u4e32(\u6b64\u5904\u4e3aUuid)\uff0c\u7136\u540e\u68c0\u67e5\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u67e5\u8be2\u5b9e\u4f53\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5982\u679c\u662f\uff0c\u5219\u8868\u793a\u6839\u636e\u8be5\u5c5e\u6027\u8fdb\u884c\u67e5\u8be2\uff1b\u5982\u679c\u6ca1\u6709\u8be5\u5c5e\u6027\uff0c\u5219\u91cd\u590d\u7b2c\u4e8c\u6b65\uff0c\u7ee7\u7eed\u4ece\u53f3\u5f80\u5de6\u622a\u53d6\uff1b\u6700\u540e\u5047\u8bbe user \u4e3a\u67e5\u8be2\u5b9e\u4f53\u7684\u4e00\u4e2a\u5c5e\u6027\uff1b\n\u63a5\u7740\u5904\u7406\u5269\u4e0b\u90e8\u5206\uff08DepUuid\uff09\uff0c\u5148\u5224\u65ad user \u6240\u5bf9\u5e94\u7684\u7c7b\u578b\u662f\u5426\u6709depUuid\u5c5e\u6027\uff0c\u5982\u679c\u6709\uff0c\u5219\u8868\u793a\u8be5\u65b9\u6cd5\u6700\u7ec8\u662f\u6839\u636e \u201c Doc.user.depUuid\u201d \u7684\u53d6\u503c\u8fdb\u884c\u67e5\u8be2\uff1b\u5426\u5219\u7ee7\u7eed\u6309\u7167\u6b65\u9aa4 2 \u7684\u89c4\u5219\u4ece\u53f3\u5f80\u5de6\u622a\u53d6\uff0c\u6700\u7ec8\u8868\u793a\u6839\u636e \u201cDoc.user.dep.uuid\u201d \u7684\u503c\u8fdb\u884c\u67e5\u8be2\u3002\n\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982 Doc\u5305\u542b\u4e00\u4e2a user \u7684\u5c5e\u6027\uff0c\u4e5f\u6709\u4e00\u4e2a userDep \u5c5e\u6027\uff0c\u6b64\u65f6\u4f1a\u5b58\u5728\u6df7\u6dc6\u3002\u53ef\u4ee5\u660e\u786e\u5728\u5c5e\u6027\u4e4b\u95f4\u52a0\u4e0a \u201c_\u201d \u4ee5\u663e\u5f0f\u8868\u8fbe\u610f\u56fe\uff0c\u6bd4\u5982 \u201cfindByUser_DepUuid()\u201d \u6216\u8005 \u201cfindByUserDep_uuid()\u201d\n\u8fd8\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u53c2\u6570\uff1a\u4f8b\u5982\u5206\u9875\u6216\u6392\u5e8f\u7684\u53c2\u6570\uff1a\n\n\nPage&lt;UserModel&gt; findByName(String name, Pageable pageable);  List&lt;UserModel&gt; findByName(String name, Sort sort);\n@Query\u6ce8\u89e3\n\u6709\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u63d0\u4f9b\u7684\u67e5\u8be2\u5173\u952e\u5b57\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u67e5\u8be2\u9700\u6c42\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 @Query \u5173\u952e\u5b57\uff0c\u6765\u81ea\u5b9a\u4e49\u67e5\u8be2 SQL\uff0c\u4f8b\u5982\u67e5\u8be2Id\u6700\u5927\u7684User\uff1a\n\n@Query(\"select u from t_user u where id=(select max(id) from t_user)\")\nUser getMaxIdUser();\n\u5982\u679c\u67e5\u8be2\u6709\u53c2\u6570\u7684\u8bdd\uff0c\u53c2\u6570\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u4f20\u9012\u65b9\u5f0f:\n1.\u5229\u7528\u4e0b\u6807\u7d22\u5f15\u4f20\u53c2\uff0c\u7d22\u5f15\u53c2\u6570\u5982\u4e0b\u6240\u793a\uff0c\u7d22\u5f15\u503c\u4ece1\u5f00\u59cb\uff0c\u67e5\u8be2\u4e2d \u201d?X\u201d \u4e2a\u6570\u9700\u8981\u4e0e\u65b9\u6cd5\u5b9a\u4e49\u7684\u53c2\u6570\u4e2a\u6570\u76f8\u4e00\u81f4\uff0c\u5e76\u4e14\u987a\u5e8f\u4e5f\u8981\u4e00\u81f4\uff1a\n\n@Query(\"select u from t_user u where id&gt;?1 and username like ?2\")\nList&lt;User&gt; selectUserByParam(Long id, String name);\n2.\u547d\u540d\u53c2\u6570\uff08\u63a8\u8350\uff09\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b9a\u4e49\u597d\u53c2\u6570\u540d\uff0c\u8d4b\u503c\u65f6\u91c7\u7528@Param(\u201c\u53c2\u6570\u540d\u201d)\uff0c\u800c\u4e0d\u7528\u7ba1\u987a\u5e8f\uff1a\n\n@Query(\"select u from t_user u where id&gt;:id and username like :name\")\nList&lt;User&gt; selectUserByParam2(@Param(\"name\") String name, @Param(\"id\") Long id);\n\u67e5\u8be2\u65f6\u5019\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f7f\u7528\u539f\u751f\u7684SQL\u67e5\u8be2\uff0c\u5982\u4e0b\uff1a\n\n@Query(value = \"select * from t_user\",nativeQuery = true)\nList&lt;User&gt; selectAll();\n@Modifying\u6ce8\u89e3\n\u6d89\u53ca\u5230\u6570\u636e\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528 @Modifying \u6ce8\u89e3\uff0c@Query \u4e0e @Modifying \u8fd9\u4e24\u4e2a annotation\u4e00\u8d77\u58f0\u660e\uff0c\u53ef\u5b9a\u4e49\u4e2a\u6027\u5316\u66f4\u65b0\u64cd\u4f5c\uff0c\u4f8b\u5982\u6d89\u53ca\u67d0\u4e9b\u5b57\u6bb5\u66f4\u65b0\u65f6\u6700\u4e3a\u5e38\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n@Modifying\n@Query(\"update t_user set age=:age where id&gt;:id\")\nint updateUserById(@Param(\"age\") Long age, @Param(\"id\") Long id);\n\u6ce8\u610f\uff1a\n\n\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7684 JPQL \u5b8c\u6210 UPDATE \u548c DELETE \u64cd\u4f5c. \u6ce8\u610f: JPQL \u4e0d\u652f\u6301\u4f7f\u7528 INSERT\n\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5e94\u8be5\u662f int\uff0c\u8868\u793a\u66f4\u65b0\u8bed\u53e5\u6240\u5f71\u54cd\u7684\u884c\u6570\n\u5728\u8c03\u7528\u7684\u5730\u65b9\u5fc5\u987b\u52a0\u4e8b\u52a1\uff0c\u6ca1\u6709\u4e8b\u52a1\u4e0d\u80fd\u6b63\u5e38\u6267\u884c\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b, Spring Data \u7684\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u6709\u4e8b\u52a1, \u4f46\u90fd\u662f\u4e00\u4e2a\u53ea\u8bfb\u4e8b\u52a1. \u4ed6\u4eec\u4e0d\u80fd\u5b8c\u6210\u4fee\u6539\u64cd\u4f5c\n\n@Transactional \u6ce8\u89e3\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u518d\u6765\u987a\u4fbf\u8bf4\u8bf4Spring Data \u4e2d\u7684\u4e8b\u52a1\u95ee\u9898\uff1a\n\nSpring Data \u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u4e8b\u52a1\u5904\u7406\u65b9\u5f0f\uff0c\u5373\u6240\u6709\u7684\u67e5\u8be2\u5747\u58f0\u660e\u4e3a\u53ea\u8bfb\u4e8b\u52a1\u3002\n\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u5982\u9700\u6539\u53d8 Spring Data \u63d0\u4f9b\u7684\u4e8b\u52a1\u9ed8\u8ba4\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5728\u65b9\u6cd5\u4e0a\u6dfb\u52a0 @Transactional \u6ce8\u89e3\u3002\n\u8fdb\u884c\u591a\u4e2a Repository \u64cd\u4f5c\u65f6\uff0c\u4e5f\u5e94\u8be5\u4f7f\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u5904\u7406\uff0c\u6309\u7167\u5206\u5c42\u67b6\u6784\u7684\u601d\u60f3\uff0c\u8fd9\u90e8\u5206\u5c5e\u4e8e\u4e1a\u52a1\u903b\u8f91\u5c42\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5728Service \u5c42\u5b9e\u73b0\u5bf9\u591a\u4e2a Repository \u7684\u8c03\u7528\uff0c\u5e76\u5728\u76f8\u5e94\u7684\u65b9\u6cd5\u4e0a\u58f0\u660e\u4e8b\u52a1\u3002\n\n3. Spring Boot\u6574\u5408JPA\u591a\u6570\u636e\u6e90\n&lt;!--\u4f9d\u8d56--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;version&gt;5.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n\n# \u914d\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u53ca\u6570\u636e\u5e93\u9a71\u52a8\nspring.datasource.one.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.one.username=root\nspring.datasource.one.password=root\n#\u4f7f\u7528Hikari\u7684\u8bdd\u8981\u8bb2url\u6362\u6210jdbcurl\uff0cDruid\u76f4\u63a5\u4f7f\u7528url\nspring.datasource.one.jdbcurl=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n\nspring.datasource.two.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.two.username=root\nspring.datasource.two.password=root\nspring.datasource.two.jdbcurl=jdbc:mysql://localhost:3306/test2?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n\n#\u4e0e\u5355\u6570\u636e\u6e90\u4e0d\u540c\u7684\u662f \u5728jpa\u540e\u90fd\u8981\u52a0\u4e0aproperties\nspring.jpa.properties.database=mysql\nspring.jpa.properties.database-platform=mysql\nspring.jpa.properties.hibernate.ddl-auto=update\nspring.jpa.properties.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect\n\n/**\n * @author Xuxx3309\n * @Description \u914d\u7f6e\u6570\u636e\u6e90\n * @create 2020-05-16 0:30\n */\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    @Primary//\u4f18\u5148\u8003\u8651\u88ab\u6ce8\u89e3\u7684\u5bf9\u8c61\u6ce8\u5165\n    @ConfigurationProperties(prefix = &quot;spring.datasource.one&quot;)\n    DataSource dsOne() {\n        //\u6b64\u5904\u4f7f\u7528Hikari\n        return DataSourceBuilder.create().type(HikariDataSource.class).build();\n        //\u4f7f\u7528Druid DataSource\n//        return DruidDataSourceBuilder.create().build();\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource.two&quot;)\n    DataSource dsTwo() {\n        return DataSourceBuilder.create().type(HikariDataSource.class).build();\n    }\n}\n\n/**\n * @author Xuxx3309\n * @Description \u914d\u7f6ejpa1\n * @create 2020-05-16 0:39\n */\n@Configuration\n@EnableJpaRepositories(basePackages = &quot;com.xuxx.jpa2.dao1&quot;,\n        entityManagerFactoryRef = &quot;localContainerEntityManagerFactoryBeanOne&quot;,\n        transactionManagerRef = &quot;platformTransactionManagerOne&quot;)\npublic class JpaConfigOne {\n    @Autowired\n    @Qualifier(&quot;dsOne&quot;)\n    DataSource dsOne;\n\n    @Autowired\n    JpaProperties jpaProperties;\n\n    @Bean\n    @Primary\n    LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBeanOne(EntityManagerFactoryBuilder builder) {\n        return builder.dataSource(dsOne)\n                .properties(jpaProperties.getProperties())\n                .persistenceUnit(&quot;pu1&quot;)\n                .packages(&quot;com.xuxx.jpa2.bean&quot;)\n                .build();\n    }\n\n    /**\n     * PlatformTransactionManager\u662fJpaTransactionManager\u7684\u9876\u5c42\u7236\u7c7b\n     *\n     * @param builder\n     * @return\n     */\n    @Bean\n    PlatformTransactionManager platformTransactionManagerOne(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(localContainerEntityManagerFactoryBeanOne((builder)).getObject());\n    }\n}\n\n/**\n * @author Xuxx3309\n * @Description \u914d\u7f6ejpa2\n * @create 2020-05-16 0:39\n */\n@Configuration\n@EnableJpaRepositories(basePackages = &quot;com.xuxx.jpa2.dao2&quot;,\n        entityManagerFactoryRef = &quot;localContainerEntityManagerFactoryBeanTwo&quot;,\n        transactionManagerRef = &quot;platformTransactionManagerTwo&quot;)\npublic class JpaConfigTwo {\n    @Autowired\n    @Qualifier(&quot;dsOne&quot;)\n    DataSource dsOne;\n\n    @Autowired\n    JpaProperties jpaProperties;\n\n    @Bean\n    LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBeanTwo(EntityManagerFactoryBuilder builder) {\n        return builder.dataSource(dsOne)\n                .properties(jpaProperties.getProperties())\n                .persistenceUnit(&quot;pu1&quot;)\n                .packages(&quot;com.xuxx.jpa2.bean&quot;)\n                .build();\n    }\n\n    @Bean\n    PlatformTransactionManager platformTransactionManagerTwo(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(localContainerEntityManagerFactoryBeanTwo((builder)).getObject());\n    }\n}\n\n/**\n * @author Xuxx3309\n * @Description\n * @create 2020-05-16 1:46\n */\npublic interface BookDao1 extends JpaRepository&lt;Book, Integer&gt; {\n}\n\n/**\n * @author Xuxx3309\n * @Description\n * @create 2020-05-16 1:47\n */\npublic interface BookDao2 extends JpaRepository&lt;Book, Integer&gt; {\n}\n\n@SpringBootTest\nclass Jpa2ApplicationTests {\n    @Autowired\n    BookDao1 bookDao1;\n    @Autowired\n    BookDao2 bookDao2;\n\n    @Test\n    public void test() {\n        List&lt;Book&gt; dao1All = bookDao1.findAll();\n        System.out.println(dao1All);\n        System.out.println(&quot;-------------&quot;);\n        List&lt;Book&gt; dao2All = bookDao2.findAll();\n        System.out.println(dao2All);\n    }\n}\n\n\u6d4b\u8bd5\uff1a\n\n[Book(id=1, name=11, author=11), Book(id=2, name=22, author=22), Book(id=6, name=33, author=33), Book(id=7, name=44, author=44), Book(id=8, name=1, author=1), Book(id=9, name=JAVA, author=Xuxx), Book(id=10, name=JAVA1, author=Xuxx), Book(id=11, name=JAVA2, author=Xuxx)]\n-------------\n[Book(id=1, name=11, author=11), Book(id=2, name=22, author=22), Book(id=6, name=33, author=33), Book(id=7, name=44, author=44), Book(id=8, name=1, author=1), Book(id=9, name=JAVA, author=Xuxx), Book(id=10, name=JAVA1, author=Xuxx), Book(id=11, name=JAVA2, author=Xuxx)]\n4.Repository\u63a5\u53e3\n\u6765\u770b Repository \u7684\u4e00\u4e2a\u7ee7\u627f\u5173\u7cfb\u56fe\uff1a\n   img\n\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u73b0\u7c7b\u4e0d\u5c11\u3002\u90a3\u4e48\u5230\u5e95\u5982\u4f55\u7406\u89e3 Repository \u5462\uff1f\n\nRepository \u63a5\u53e3\u662f Spring Data \u7684\u4e00\u4e2a\u6838\u5fc3\u63a5\u53e3\uff0c\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u9700\u8981\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u63a5\u53e3\u4e2d\u58f0\u660e\u9700\u8981\u7684\u65b9\u6cd5 public interface Repository&lt;T, ID extends Serializable&gt; { }\n\u82e5\u6211\u4eec\u5b9a\u4e49\u7684\u63a5\u53e3\u7ee7\u627f\u4e86 Repository, \u5219\u8be5\u63a5\u53e3\u4f1a\u88ab IOC \u5bb9\u5668\u8bc6\u522b\u4e3a\u4e00\u4e2a Repository Bean\uff0c\u8fdb\u800c\u7eb3\u5165\u5230 IOC \u5bb9\u5668\u4e2d\uff0c\u8fdb\u800c\u53ef\u4ee5\u5728\u8be5\u63a5\u53e3\u4e2d\u5b9a\u4e49\u6ee1\u8db3\u4e00\u5b9a\u89c4\u8303\u7684\u65b9\u6cd5\u3002\nSpring Data\u53ef\u4ee5\u8ba9\u6211\u4eec\u53ea\u5b9a\u4e49\u63a5\u53e3\uff0c\u53ea\u8981\u9075\u5faa Spring Data \u7684\u89c4\u8303\uff0c\u5c31\u65e0\u9700\u5199\u5b9e\u73b0\u7c7b\u3002\n\u4e0e\u7ee7\u627f Repository \u7b49\u4ef7\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u5728\u6301\u4e45\u5c42\u63a5\u53e3\u4e0a\u4f7f\u7528 @RepositoryDefinition \u6ce8\u89e3\uff0c\u5e76\u4e3a\u5176\u6307\u5b9a domainClass \u548c idClass \u5c5e\u6027\u3002\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\n\n\n@RepositoryDefinition(domainClass = User.class, idClass = Long.class)public interface UserDao{    User findById(Long id);    List&lt;User&gt; findAll();}\n\u57fa\u7840\u7684 Repository \u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6570\u636e\u8bbf\u95ee\u529f\u80fd\uff0c\u5176\u51e0\u4e2a\u5b50\u63a5\u53e3\u5219\u6269\u5c55\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u5b83\u7684\u51e0\u4e2a\u5e38\u7528\u7684\u5b9e\u73b0\u7c7b\u5982\u4e0b\uff1a\n\nCrudRepository\uff1a \u7ee7\u627f Repository\uff0c\u5b9e\u73b0\u4e86\u4e00\u7ec4 CRUD \u76f8\u5173\u7684\u65b9\u6cd5\nPagingAndSortingRepository\uff1a \u7ee7\u627f CrudRepository\uff0c\u5b9e\u73b0\u4e86\u4e00\u7ec4\u5206\u9875\u6392\u5e8f\u76f8\u5173\u7684\u65b9\u6cd5\nJpaRepository\uff1a \u7ee7\u627f PagingAndSortingRepository\uff0c\u5b9e\u73b0\u4e00\u7ec4 JPA \u89c4\u8303\u76f8\u5173\u7684\u65b9\u6cd5\n\u81ea\u5b9a\u4e49\u7684 XxxxRepository \u9700\u8981\u7ee7\u627f JpaRepository\uff0c\u8fd9\u6837\u7684 XxxxRepository \u63a5\u53e3\u5c31\u5177\u5907\u4e86\u901a\u7528\u7684\u6570\u636e\u8bbf\u95ee\u63a7\u5236\u5c42\u7684\u80fd\u529b\u3002\nJpaSpecificationExecutor\uff1a \u4e0d\u5c5e\u4e8eRepository\u4f53\u7cfb\uff0c\u5b9e\u73b0\u4e00\u7ec4 JPA Criteria \u67e5\u8be2\u76f8\u5173\u7684\u65b9\u6cd5\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}, {"name": "JPA", "slug": "JPA", "permalink": "/Xuxx_Blogs/tag/JPA/"}]}, {"title": "Spring Boot\u6574\u5408Mybatis", "date": "2020-05-12T22:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj17/", "text": "1.\u57fa\u672c\u4f7f\u7528\n1.\u4f9d\u8d56\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.1.20&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;version&gt;5.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n2.\u914d\u7f6e\u6570\u636e\u6e90\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.url=jdbc:mysql:///test\nspring.datasource.username=root\nspring.datasource.password=root\n\n3.\u5199\u4ee3\u7801\nUser\n@Data\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n}\n\nUserMapper\n//\u5355\u4e2aMapper\u53ef\u4ee5\u76f4\u63a5\u52a0@Mapper\uff0c\u4e5f\u53ef\u4ee5\u5728\u542f\u52a8\u7c7b\u4e0a\u52a0//@MapperScan(basePackages = &quot;com.xuxx.mybatis.mapper&quot;)\n@Mapper\npublic interface UserMapper {\n//    @Select(&quot;select * from user &quot;)\n    List&lt;User&gt; getAllUsers();\n}\n\nMapper.xml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.xuxx.mybatis.mapper.UserMapper&quot;&gt;\n    &lt;select id=&quot;getAllUsers&quot; resultType=&quot;com.xuxx.mybatis.bean.User&quot;&gt;\n        select * from user\n    &lt;/select&gt;\n&lt;/mapper&gt;\n\n\u8865\u5145\uff1a\n\u6b64\u65f6Mapper.xml\u4f1a\u88abMaven\u5ffd\u7565\uff0c\u8fd0\u884c\u4f1a\u62a5\u9519org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.xuxx.mybatis.mapper.UserMapper.getAllUsers\n\u89e3\u51b3\u65b9\u6cd5\uff1a\uff08\u4e09\u79cd\u65b9\u5f0f\u4efb\u9009\u5176\u4e00\u5373\u53ef\uff09\n\n\u5728resources\u76ee\u5f55\u4e0b\u521b\u5efa\u4e0eMapper\u4f4d\u7f6e\u5bf9\u5e94\u7684\u591a\u7ea7\u76ee\u5f55com/xuxx/mybatis/mapper,\u5e76\u5c06Mapper.xml\u653e\u5230\u521b\u5efa\u7684\u76ee\u5f55\u4e0b\n\n\u5728pom.xml\u6587\u4ef6\u4e2d\u914d\u7f6e\u4e0d\u5ffd\u7565\u9700\u8981\u7684xml\u6587\u4ef6\n&lt;build&gt;\n    ....\n&lt;!--\u8ba9maven\u4e0d\u5ffd\u7565Mapper.xml--&gt;\n        &lt;resources&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/java&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n            &lt;/resource&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/resources&lt;/directory&gt;\n            &lt;/resource&gt;\n        &lt;/resources&gt;\n\n\n\u5728resources\u76ee\u5f55\u4e0b\u521b\u5efa\u81ea\u5b9a\u4e49\u76ee\u5f55\uff0c\u5e76\u5728application.properties\u4e2d\u914d\u7f6e\n#\u5c06Mapper.xml\u6587\u4ef6\u653e\u5728resources\u76ee\u5f55\u7684mapper\u4e0b\uff0c\u518d\u6307\u5b9amapper.xml\u4f4d\u7f6e\nmybatis.mapper-locations=classpath:mapper/*.xml\n\n\n\n\u6d4b\u8bd5\n@SpringBootTest\nclass MybatisApplicationTests {\n\n    @Autowired\n    UserMapper userMapper;\n\n    @Test\n    void contextLoads() {\n        List&lt;User&gt; users = userMapper.getAllUsers();\n        System.out.println(users);\n    }\n}\n\n\u7ed3\u679c\n\n[User(id=1, username=xu, address=\u56db\u5ddd), User(id=6, username=xu2, address=\u56db\u5ddd)]\n2.\u914d\u7f6e\u591a\u6570\u636e\u6e90\n1.\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.1.20&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;version&gt;5.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n\n2.\u914d\u7f6e\u591a\u6570\u636e\u6e90\n#\u914d\u7f6e\u591a\u6570\u636e\u6e90\nspring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.one.url=jdbc:mysql:///test\nspring.datasource.one.username=root\nspring.datasource.one.password=root\n\nspring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.two.url=jdbc:mysql:///test2\nspring.datasource.two.username=root\nspring.datasource.two.password=root\n\n3.\u5199\u4ee3\u7801\nDataSourceConfig\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource.one&quot;)\n    DataSource dsOne() {\n        return DruidDataSourceBuilder.create().build();\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource.two&quot;)\n    DataSource dsTwo() {\n        return DruidDataSourceBuilder.create().build();\n    }\n}\n\nMybatisConfigOne\n@Configuration\n@MapperScan(basePackages = &quot;com.xuxx.mybatis2.mapper1&quot;, sqlSessionFactoryRef = &quot;sqlSessionFactoryOne&quot;\n        , sqlSessionTemplateRef = &quot;sqlSessionTemplateOne&quot;)\npublic class MybatisConfigOne {\n    @Resource(name = &quot;dsOne&quot;)\n    DataSource dsOne;\n\n    @Bean\n    SqlSessionFactory sqlSessionFactoryOne() {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        try {\n            bean.setDataSource(dsOne);\n            return bean.getObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    @Bean\n    SqlSessionTemplate sqlSessionTemplateOne() {\n        return new SqlSessionTemplate(sqlSessionFactoryOne());\n    }\n}\n\nMybatisConfigTwo\n@Configuration\n@MapperScan(basePackages = &quot;com.xuxx.mybatis2.mapper2&quot;, sqlSessionFactoryRef = &quot;sqlSessionFactoryTwo&quot;\n        , sqlSessionTemplateRef = &quot;sqlSessionTemplateTwo&quot;)\npublic class MybatisConfigTwo {\n    @Resource(name = &quot;dsTwo&quot;)\n    DataSource dsTwo;\n\n    @Bean\n    SqlSessionFactory sqlSessionFactoryTwo() {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        try {\n            bean.setDataSource(dsTwo);\n            return bean.getObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    @Bean\n    SqlSessionTemplate sqlSessionTemplateTwo() {\n        return new SqlSessionTemplate(sqlSessionFactoryTwo());\n    }\n}\n\n\u5230\u6b64\uff0c\u591a\u6570\u636e\u6e90\u5c31\u914d\u7f6e\u597d\u4e86\uff0c\u4f7f\u7528\u6570\u636e\u6e901\u5c31\u5728\u5305mapper1\u4e0b\uff0c\u4f7f\u7528\u6570\u636e\u6e902\u5c31\u5728\u5305mapper2\u4e0b\u3002\n\u6d4b\u8bd5\u4e00\u4e0b\nUser\n@Data\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n}\n\ncom\\xuxx\\mybatis2\\mapper1\\UserMapper1.java\npublic interface UserMapper1 {\n    @Select(&quot;select * from user &quot;)\n    List&lt;User&gt; getAllUsers();\n}\n\ncom\\xuxx\\mybatis2\\mapper2\\UserMapper2.java\npublic interface UserMapper2 {\n    @Select(&quot;select * from user &quot;)\n    List&lt;User&gt; getAllUsers();\n}\n\n\u6d4b\u8bd5\u7c7b\n@SpringBootTest\nclass Mybatis2ApplicationTests {\n    @Autowired\n    UserMapper1 userMapper1;\n    @Autowired\n    UserMapper2 userMapper2;\n\n    @Test\n    void contextLoads() {\n        List&lt;User&gt; users1 = userMapper1.getAllUsers();\n        System.out.println(&quot;user1\uff1a&quot;+users1);\n        List&lt;User&gt; users2 = userMapper2.getAllUsers();\n        System.out.println(&quot;user2\uff1a&quot;+users2);\n    }\n\n}\n\n\u63a7\u5236\u53f0\n\nuser1\uff1a[User(id=1, username=xu, address=\u56db\u5ddd), User(id=6, username=xu2, address=\u56db\u5ddd)]\nuser2\uff1a[User(id=1, username=zhangsan, address=\u56db\u5ddd2), User(id=2, username=lisi, address=\u5317\u4eac2), User(id=3, username=xuxx, address=\u56db\u5ddd2)]\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}, {"name": "Mybatis", "slug": "Mybatis", "permalink": "/Xuxx_Blogs/tag/Mybatis/"}]}, {"title": "Spring Boot\u6574\u5408Spring JDBC Template", "date": "2020-05-12T16:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj18/", "text": "1.\u7b80\u5355\u4f7f\u7528\n1.\u6dfb\u52a0\u4f9d\u8d56\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;version&gt;5.1.27&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--\u4e5f\u53ef\u4ee5\u53ea\u5f15\u5165druid\uff0c\u4f46\u662f\u914d\u7f6e\u591a\u6570\u636e\u6e90\u8981starter--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.1.20&lt;/version&gt;\n        &lt;/dependency&gt;\n\n2.\u914d\u7f6e\u6570\u636e\u6e90\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/test\nspring.datasource.username=root\nspring.datasource.password=root\n\n3.\u5199\u4ee3\u7801\n//bean\n@Data\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n}\n\n@Service\npublic class UserService {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n    //\u6dfb\u52a0\n    public Integer adduser(User user) {\n        return jdbcTemplate.update(&quot;insert into user (username,address) values (?,?)&quot;,\n                user.getUsername(), user.getAddress());\n    }\n    //\u66f4\u65b0\n    public Integer updateUserById(User user) {\n        return jdbcTemplate.update(&quot;update user set username = ?,address = ? where id = ? &quot;,\n                user.getUsername(), user.getAddress(), user.getId());\n\n    }\n    //\u5220\u9664\n    public Integer delUserById(Integer id) {\n        return jdbcTemplate.update(&quot;delete from user where id = ? &quot;, id);\n    }\n\n    //\u67e5\u8be2\n    //\u5b57\u6bb5\u540d\u4e0e\u5c5e\u6027\u540d\u4e0d\u4e00\u81f4\u65f6\uff0c\u9700\u8981\u624b\u52a8\u6620\u5c04\n    public List&lt;User&gt; getAllUsers01() {\n        return jdbcTemplate.query(&quot;select * from user&quot;, new RowMapper&lt;User&gt;() {\n            @Override\n            public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n                //ResultSet\u5df2\u7ecf\u8fdb\u884c\u4e86\u6e38\u6807\u79fb\u52a8\u4e86\uff08\u4e0d\u7528\u518d\u8c03\u7528next()\uff09\n                User user = new User();\n                int id = rs.getInt(&quot;id&quot;);\n                String username = rs.getString(&quot;username&quot;);\n                String address = rs.getString(&quot;address&quot;);\n                user.setId(id);\n                user.setUsername(username);\n                user.setAddress(address);\n                return user;\n            }\n        });\n    }\n\n    //\u5b57\u6bb5\u540d\u4e0e\u5c5e\u6027\u540d\u4e00\u81f4\u65f6\uff0c\u81ea\u52a8\u6620\u5c04\n    public List&lt;User&gt; getAllUsers() {\n        return jdbcTemplate.query(&quot;select * from user&quot;, new BeanPropertyRowMapper&lt;&gt;(User.class));\n    }\n\n    //\u67e5\u8be2\u5355\u4e2a\n    public User getUserById(Integer id) {\n        return jdbcTemplate.queryForObject(&quot;select * from user where id = ? &quot;, new BeanPropertyRowMapper&lt;&gt;(User.class), id);\n    }\n}\n\n@SpringBootTest\nclass JdbctemplateApplicationTests {\n    @Autowired\n    private UserService userService;\n\n    @Test\n    void contextLoads1() {\n        User user = new User();\n        user.setUsername(&quot;xuxx&quot;);\n        user.setAddress(&quot;\u56db\u5ddd&quot;);\n        Integer adduser = userService.adduser(user);\n        if (adduser == 1) {\n            System.out.println(&quot;\u6dfb\u52a0\u6267\u884c\u6210\u529f&quot;);\n        }\n    }\n\n    @Test\n    void contextLoads2() {\n        User user = new User();\n        user.setId(4);\n        user.setUsername(&quot;xuxx02&quot;);\n        user.setAddress(&quot;\u56db\u5ddd02&quot;);\n        Integer adduser = userService.updateUserById(user);\n        if (adduser == 1) {\n            System.out.println(&quot;\u66f4\u65b0\u6267\u884c\u6210\u529f&quot;);\n        }\n    }\n\n    @Test\n    void contextLoads3() {\n        if (userService.delUserById(4) == 1) {\n            System.out.println(&quot;\u5220\u9664\u6267\u884c\u6210\u529f&quot;);\n        }\n    }\n\n    @Test\n    void contextLoads5() {\n        User user = userService.getUserById(1);\n        System.out.println(user);\n    }\n}\n\n2.\u6574\u5408\u591a\u6570\u636e\u6e90\n1.\u6dfb\u52a0\u4f9d\u8d56\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;version&gt;5.1.27&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--\u4e5f\u53ef\u4ee5\u53ea\u5f15\u5165druid\uff0c\u4f46\u662f\u914d\u7f6e\u591a\u6570\u636e\u6e90\u8981starter--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.1.20&lt;/version&gt;\n        &lt;/dependency&gt;\n\n2.\u914d\u7f6e\u591a\u6570\u636e\u6e90\n#\u914d\u7f6e\u591a\u6570\u636e\u6e90\uff0c\u6b64\u65f6\u6570\u636e\u6e90\u76f8\u5173\u7684\u81ea\u52a8\u5316\u914d\u7f6e\u5931\u6548\uff08key\u4e0d\u80fd\u88ab\u8bc6\u522b\u4e86\uff09\nspring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.one.url=jdbc:mysql://127.0.0.1:3306/test\nspring.datasource.one.username=root\nspring.datasource.one.password=root\n\nspring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.two.url=jdbc:mysql://127.0.0.1:3306/test2\nspring.datasource.two.username=root\nspring.datasource.two.password=root\n\n3.\u5199\u4ee3\u7801\n\n\u914d\u7f6eDataSource\n\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource.one&quot;)\n    DataSource dataSource1() {\n        return DruidDataSourceBuilder.create().build();\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = &quot;spring.datasource.two&quot;)\n    DataSource dataSource2() {\n        return DruidDataSourceBuilder.create().build();\n    }\n\n}\n\n\n\u914d\u7f6eJdbcTemplate\n\n@Configuration\npublic class JdbcTemplateConfig {\n\n    @Bean\n    JdbcTemplate jdbcTemplate1(@Qualifier(&quot;dataSource1&quot;) DataSource ds1) {\n        return new JdbcTemplate(ds1);\n    }\n\n    @Bean\n    JdbcTemplate jdbcTemplate2(@Qualifier(&quot;dataSource2&quot;) DataSource ds2) {\n        return new JdbcTemplate(ds2);\n    }\n}\n\n\nService\uff08beanh\u8fd8\u662fUser\uff09\n\n@Service\npublic class UserService2 {\n    @Autowired\n    @Qualifier(&quot;jdbcTemplate1&quot;)\n    JdbcTemplate jdbcTemplate1;\n\n    @Resource(name = &quot;jdbcTemplate2&quot;)\n    JdbcTemplate jdbcTemplate2;\n\n    public List&lt;User&gt; getAllUsers1() {\n        return jdbcTemplate1.query(&quot;select * from user&quot;, new BeanPropertyRowMapper&lt;&gt;(User.class));\n    }\n\n    public List&lt;User&gt; getAllUsers2() {\n        return jdbcTemplate2.query(&quot;select * from user&quot;, new BeanPropertyRowMapper&lt;&gt;(User.class));\n    }\n}\n\n\n\u6d4b\u8bd5\n\n@SpringBootTest\nclass JdbctemplateApplicationTests2 {\n    @Autowired\n    private UserService2 userService2;\n\n    @Test\n    void test1() {\n        List&lt;User&gt; users1 = userService2.getAllUsers1();\n        System.out.println(users1);\n        System.out.println(&quot;----------------------&quot;);\n        List&lt;User&gt; users2 = userService2.getAllUsers2();\n        System.out.println(users2);\n    }\n}\n\n\u8865\u5145\uff1a\u7531\u4e8e\u914d\u7f6e\u4e86\u591a\u6570\u636e\u6e90\uff0c\u6240\u4ee5\u5728\u6ce8\u5165JdbcTemplate\u65f6\uff0c\u9700\u8981\u5982\u4e0b\n@Autowired\n@Qualifier(&quot;jdbcTemplate1&quot;)//\u914d\u7f6e\u4e86\u591a\u6570\u636e\u6e90\u540e\nprivate JdbcTemplate jdbcTemplate;\n//\u6216\u8005\n@Resource(name = &quot;jdbcTemplate2&quot;)\nprivate JdbcTemplate jdbcTemplate2;\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}, {"name": "Jdbc Template", "slug": "Jdbc Template", "permalink": "/Xuxx_Blogs/tag/Jdbc Template/"}]}, {"title": "Spring Boot\u6574\u5408AOP", "date": "2020-05-11T02:10:00-00.00", "path": "/Xuxx_Blogs/archives/bj16/", "text": "\u4e00\u3001\u524d\u8a00\n\u4f17\u6240\u5468\u77e5\uff0cspring\u6700\u6838\u5fc3\u7684\u4e24\u4e2a\u529f\u80fd\u662faop\u548cioc\uff0c\u5373\u9762\u5411\u5207\u9762\u548c\u63a7\u5236\u53cd\u8f6c\u3002\u672c\u6587\u4f1a\u8bb2\u4e00\u8bb2SpringBoot\u5982\u4f55\u4f7f\u7528AOP\u5b9e\u73b0\u9762\u5411\u5207\u9762\u7684\u8fc7\u7a0b\u539f\u7406\u3002\n\u4e8c\u3001\u4f55\u4e3aaop\naop\u5168\u79f0Aspect Oriented Programming\uff0c\u9762\u5411\u5207\u9762\uff0cAOP\u4e3b\u8981\u5b9e\u73b0\u7684\u76ee\u7684\u662f\u9488\u5bf9\u4e1a\u52a1\u5904\u7406\u8fc7\u7a0b\u4e2d\u7684\u5207\u9762\u8fdb\u884c\u63d0\u53d6\uff0c\u5b83\u6240\u9762\u5bf9\u7684\u662f\u5904\u7406\u8fc7\u7a0b\u4e2d\u7684\u67d0\u4e2a\u6b65\u9aa4\u6216\u9636\u6bb5\uff0c\u4ee5\u83b7\u5f97\u903b\u8f91\u8fc7\u7a0b\u4e2d\u5404\u90e8\u5206\u4e4b\u95f4\u4f4e\u8026\u5408\u6027\u7684\u9694\u79bb\u6548\u679c\u3002\u5176\u4e0e\u8bbe\u8ba1\u6a21\u5f0f\u5b8c\u6210\u7684\u4efb\u52a1\u5dee\u4e0d\u591a\uff0c\u662f\u63d0\u4f9b\u53e6\u4e00\u79cd\u89d2\u5ea6\u6765\u601d\u8003\u7a0b\u5e8f\u7684\u7ed3\u6784\uff0c\u6765\u5f25\u8865\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u4e0d\u8db3\u3002\n\u3000\u3000\u901a\u4fd7\u70b9\u8bb2\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u4e3a\u4e00\u4e2a\u4e1a\u52a1\u5b9e\u73b0\u63d0\u4f9b\u5207\u9762\u6ce8\u5165\u7684\u673a\u5236\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5728\u4e1a\u52a1\u8fd0\u884c\u4e2d\u5c06\u5b9a\u4e49\u597d\u7684\u5207\u9762\u901a\u8fc7\u5207\u5165\u70b9\u7ed1\u5b9a\u5230\u4e1a\u52a1\u4e2d\uff0c\u4ee5\u5b9e\u73b0\u5c06\u4e00\u4e9b\u7279\u6b8a\u7684\u903b\u8f91\u7ed1\u5b9a\u5230\u6b64\u4e1a\u52a1\u4e2d\u3002\n\u3000\u3000\u4e3e\u4e2a\u6817\u5b50\uff0c\u9879\u76ee\u4e2d\u6709\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\u7684\u9700\u6c42\u3001\u6216\u8005\u6d41\u7a0b\u53d8\u66f4\u662f\u8bb0\u5f55\u53d8\u66f4\u5c65\u5386\uff0c\u65e0\u975e\u5c31\u662f\u63d2\u8868\u64cd\u4f5c\uff0c\u5f88\u7b80\u5355\u7684\u4e00\u4e2asave\u64cd\u4f5c\uff0c\u90fd\u662f\u4e00\u4e9b\u8bb0\u5f55\u65e5\u5fd7\u6216\u8005\u5176\u4ed6\u8f85\u52a9\u6027\u7684\u4ee3\u7801\u3002\u4e00\u904d\u53c8\u4e00\u904d\u7684\u91cd\u5199\u548c\u8c03\u7528\u3002\u4e0d\u4ec5\u6d6a\u8d39\u4e86\u65f6\u95f4\uff0c\u53c8\u5c06\u9879\u76ee\u53d8\u5f97\u66f4\u52a0\u7684\u5197\u4f59\uff0c\u5b9e\u5728\u5f97\u4e0d\u507f\u5931\u3002\n\u3000\u3000\u6240\u4ee5\u5c31\u9700\u8981\u9762\u5411\u5207\u9762aop\u5c31\u51fa\u573a\u4e86\u3002\n\u4e09\u3001aop\u76f8\u5173\u540d\u8bcd\n\u8981\u7406\u89e3SpringBoot\u6574\u5408aop\u7684\u5b9e\u73b0\uff0c\u5c31\u5fc5\u987b\u5148\u5bf9\u9762\u5411\u5207\u9762\u5b9e\u73b0\u7684\u4e00\u4e9baop\u7684\u540d\u79f0\u6709\u6240\u4e86\u89e3\uff0c\u4e0d\u7136\u4e5f\u662f\u4e91\u91cc\u96fe\u91cc\u3002\n\n\u5207\u9762\uff08Aspect\uff09\uff1a\u4e00\u4e2a\u5173\u6ce8\u70b9\u7684\u6a21\u5757\u5316\u3002\u4ee5\u6ce8\u89e3@Aspect\u7684\u5f62\u5f0f\u653e\u5728\u7c7b\u4e0a\u65b9\uff0c\u58f0\u660e\u4e00\u4e2a\u5207\u9762\u3002\n\n\u8fde\u63a5\u70b9\uff08Joinpoint\uff09\uff1a\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u67d0\u4e2a\u7279\u5b9a\u7684\u70b9\uff0c\u6bd4\u5982\u67d0\u65b9\u6cd5\u8c03\u7528\u7684\u65f6\u5019\u6216\u8005\u5904\u7406\u5f02\u5e38\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u662f\u8fde\u63a5\u70b9\u3002\n\n\u901a\u77e5\uff08Advice\uff09\uff1a\u901a\u77e5\u589e\u5f3a\uff0c\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u53eb\u505a\u901a\u77e5\uff0c\u5c31\u662f\u4f60\u5199\u7684\u4e1a\u52a1\u903b\u8f91\u4e2d\u9700\u8981\u6bd4\u5982\u4e8b\u52a1\u3001\u65e5\u5fd7\u7b49\u5148\u5b9a\u4e49\u597d\uff0c\u7136\u540e\u9700\u8981\u7684\u5730\u65b9\u518d\u53bb\u7528\u3002\n\u4e3b\u8981\u5305\u62ec5\u4e2a\u6ce8\u89e3\uff1aBefore\uff0cAfter\uff0cAfterReturning\uff0cAfterThrowing\uff0cAround\u3002\n@Before\uff1a\u5728\u5207\u70b9\u65b9\u6cd5\u4e4b\u524d\u6267\u884c\u3002\n@After\uff1a\u5728\u5207\u70b9\u65b9\u6cd5\u4e4b\u540e\u6267\u884c\n@AfterReturning\uff1a\u5207\u70b9\u65b9\u6cd5\u8fd4\u56de\u540e\u6267\u884c\n@AfterThrowing\uff1a\u5207\u70b9\u65b9\u6cd5\u629b\u5f02\u5e38\u6267\u884c\n@Around\uff1a\u5c5e\u4e8e\u73af\u7ed5\u589e\u5f3a\uff0c\u80fd\u63a7\u5236\u5207\u70b9\u6267\u884c\u524d\uff0c\u6267\u884c\u540e\uff0c\u7528\u8fd9\u4e2a\u6ce8\u89e3\u540e\uff0c\u7a0b\u5e8f\u629b\u5f02\u5e38\uff0c\u4f1a\u5f71\u54cd@AfterThrowing\u8fd9\u4e2a\u6ce8\u89e3\n\n\u5207\u70b9\uff08Pointcut\uff09\uff1a\u5176\u5b9e\u5c31\u662f\u7b5b\u9009\u51fa\u7684\u8fde\u63a5\u70b9\uff0c\u5339\u914d\u8fde\u63a5\u70b9\u7684\u65ad\u8a00\uff0c\u4e00\u4e2a\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u8fde\u63a5\u70b9\uff0c\u4f46\u53c8\u4e0d\u5168\u9700\u8981\uff0c\u4f1a\u7b5b\u9009\u51fa\u67d0\u4e9b\u4f5c\u4e3a\u8fde\u63a5\u70b9\u505a\u4e3a\u5207\u70b9\u3002\u5982\u679c\u8bf4\u901a\u77e5\u5b9a\u4e49\u4e86\u5207\u9762\u7684\u52a8\u4f5c\u6216\u8005\u6267\u884c\u65f6\u673a\u7684\u8bdd\uff0c\u5207\u70b9\u5219\u5b9a\u4e49\u4e86\u6267\u884c\u7684\u5730\u70b9\u3002\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u5982\u4f55\u548c\u8fde\u63a5\u70b9\u5339\u914d\u662fAOP\u7684\u6838\u5fc3\uff1aSpring\u7f3a\u7701\u4f7f\u7528AspectJ\u5207\u5165\u70b9\u8bed\u6cd5\u3002\n\n\u5f15\u5165\uff08Introduction\uff09\uff1a\u5728\u4e0d\u6539\u53d8\u4e00\u4e2a\u73b0\u6709\u7c7b\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u8be5\u7c7b\u6dfb\u52a0\u5c5e\u6027\u548c\u65b9\u6cd5,\u53ef\u4ee5\u5728\u65e0\u9700\u4fee\u6539\u73b0\u6709\u7c7b\u7684\u524d\u63d0\u4e0b\uff0c\u8ba9\u5b83\u4eec\u5177\u6709\u65b0\u7684\u884c\u4e3a\u548c\u72b6\u6001\u3002\u5176\u5b9e\u5c31\u662f\u628a\u5207\u9762\uff08\u4e5f\u5c31\u662f\u65b0\u65b9\u6cd5\u5c5e\u6027\uff1a\u901a\u77e5\u5b9a\u4e49\u7684\uff09\u7528\u5230\u76ee\u6807\u7c7b\u4e2d\u53bb\u3002\n\n\u76ee\u6807\u5bf9\u8c61\uff08Target Object\uff09\uff1a\u88ab\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5207\u9762\u6240\u901a\u77e5\u7684\u5bf9\u8c61\u3002\u4e5f\u88ab\u79f0\u505a\u88ab\u901a\u77e5\uff08adviced\uff09\u5bf9\u8c61\u3002\u65e2\u7136Spring AOP\u662f\u901a\u8fc7\u8fd0\u884c\u65f6\u4ee3\u7406\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u6c38\u8fdc\u662f\u4e00\u4e2a\u88ab\u4ee3\u7406\uff08proxied\uff09\u5bf9\u8c61\u3002\n\nAOP\u4ee3\u7406\uff08AOP Proxy\uff09\uff1aAOP\u6846\u67b6\u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u7528\u6765\u5b9e\u73b0\u5207\u9762\u5951\u7ea6\uff08\u4f8b\u5982\u901a\u77e5\u65b9\u6cd5\u6267\u884c\u7b49\u7b49\uff09\u3002\u5728Spring\u4e2d\uff0cAOP\u4ee3\u7406\u53ef\u4ee5\u662fJDK\u52a8\u6001\u4ee3\u7406\u6216\u8005CGLIB\u4ee3\u7406\u3002\n\n\u7ec7\u5165\uff08Weaving\uff09\uff1a\u628a\u5207\u9762\u8fde\u63a5\u5230\u5176\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u6216\u8005\u5bf9\u8c61\u4e0a\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u88ab\u901a\u77e5\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\uff08\u4f8b\u5982\u4f7f\u7528AspectJ\u7f16\u8bd1\u5668\uff09\uff0c\u7c7b\u52a0\u8f7d\u65f6\u548c\u8fd0\u884c\u65f6\u5b8c\u6210\u3002Spring\u548c\u5176\u4ed6\u7eafJava AOP\u6846\u67b6\u4e00\u6837\uff0c\u5728\u8fd0\u884c\u65f6\u5b8c\u6210\u7ec7\u5165\u3002\n\u5176\u4e2d\u91cd\u8981\u7684\u540d\u8bcd\u6709\uff1a\u5207\u9762\uff08Aspect\uff09\uff0c\u5207\u5165\u70b9\uff08Pointcut\uff09\n\n\n\u56db\u3001\u4ee3\u7801\u5b9e\u73b0\n&lt;!--\u5f15\u5165AOP\u4f9d\u8d56--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n    &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n//\u6a21\u62df\u4e00\u4e0bservice\n@Service\npublic class UserService {\n    public String getUsernameById(Integer id) {\n        System.out.println(&quot;\u88ab\u589e\u5f3a\u65b9\u6cd5&gt;&gt;&gt;   getUsernameById&quot;);\n//        int i = 1 / 0;\n        return &quot;xuxx - &quot; + id;\n    }\n\n    public void deleteUserById(Integer id) {\n        System.out.println(&quot;deleteUserById  &quot; + id);\n    }\n}\n\n@RestController\npublic class UserController {\n    @Autowired\n    UserService service;\n\n    @GetMapping(&quot;/getuser&quot;)\n    public String getUsernameById(Integer id) {\n        return service.getUsernameById(1);\n    }\n\n    @DeleteMapping(&quot;/deluser&quot;)\n    public void deleteUserById(Integer id) {\n        service.deleteUserById(1);\n    }\n}\n\n//\u5207\u9762\u7c7b\n@Component\n@Aspect//\u5207\u9762\npublic class LogComponent {\n    /**\n     * \u5b9a\u4e49\u5207\u5165\u70b9\n     * \u6b64\u5904\u662fcom.xuxx.aop.service\u5305\u4e0b\u7684\u4efb\u610f\u53c2\u6570\u3001\u4efb\u610f\u8fd4\u56de\u503c\u7684\u4efb\u610f\u65b9\u6cd5\n     */\n    @Pointcut(&quot;execution(* com.xuxx.aop.service.*.*(..))&quot;)\n    public void pc1() {\n    }\n\n    /**\n     * \u524d\u7f6e\u901a\u77e5\uff0c\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u6267\u884c\n     */\n    @Before(&quot;pc1()&quot;)\n    public void before(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(&quot;Before&gt;&gt;&gt;   &quot; + methodName);\n    }\n\n    /**\n     * \u540e\u7f6e\u901a\u77e5\uff0c\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u6267\u884c\uff08\u65e0\u8bba\u662f\u5426\u53d1\u751f\u5f02\u5e38\uff09\u8fd8\u4e0d\u80fd\u8bbf\u95ee\u76ee\u6807\u65b9\u6cd5\u6267\u884c\u7684\u7ed3\u679c\n     */\n    @After(&quot;pc1()&quot;)\n    public void after(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(&quot;After&gt;&gt;&gt;   &quot; + methodName);\n    }\n\n    /**\n     * \u8fd4\u56de\u901a\u77e5\uff0c\u5728\u65b9\u6cd5\u6b63\u5e38\u7ed3\u675f\u540e \u8fd4\u56de\u7ed3\u679c\u4e4b\u540e\u6267\u884c \u53ef\u4ee5\u8bbf\u95ee\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\n     */\n    @AfterReturning(value = &quot;pc1()&quot;, returning = &quot;result&quot;)\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(&quot;AfterReturning&gt;&gt;&gt;   &quot; + methodName + &quot;-----result&gt;&gt;&gt;&quot; + result);\n    }\n\n    /**\n     * \u5f02\u5e38\u901a\u77e5\uff0c\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u4e4b\u540e\u6267\u884c\n     * \u53ef\u4ee5\u8bbf\u95ee\u5230\u5f02\u5e38\u5bf9\u8c61\uff0c\u800c\u4e14\u53ef\u4ee5\u6307\u5b9a\u5728\u51fa\u73b0\u7279\u5b9a\u5f02\u5e38\u65f6\u518d\u901a\u77e5\u4ee3\u7801\u3002\n     */\n    @AfterThrowing(value = &quot;pc1()&quot;, throwing = &quot;t&quot;)\n    public void afterThrowing(JoinPoint joinPoint, Throwable t) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(&quot;AfterThrowing&gt;&gt;&gt;   &quot; + methodName + &quot; -----Throwable&gt;&gt;&gt;   &quot; + t.getMessage());\n    }\n\n    /**\n     * \u73af\u7ed5\u901a\u77e5\uff0c\u56f4\u7ed5\u7740\u65b9\u6cd5\u6267\u884c\n     * \u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u52a8\u6001\u4ee3\u7406\uff0c\u5305\u542b\u4e86\u6574\u4e2a\u901a\u77e5\u7684\u8fc7\u7a0b\u3002\n     * proceed\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u52a8\u6001\u4ee3\u7406\u65f6\u7684invoke\u65b9\u6cd5\n     * \u73af\u7ed5\u901a\u77e5\u548c\u5176\u4ed6\u901a\u77e5\u4e00\u8d77\u4f7f\u7528\u65f6\u8981\u8003\u8651\u987a\u5e8f\u95ee\u9898\n     */\n    @Around(value = &quot;pc1()&quot;)\n    public Object around(ProceedingJoinPoint pjp) {\n        Object result = null;\n        String methodName = pjp.getSignature().getName();\n        try {\n            System.out.println(&quot;Around&gt;&gt;&gt;  \u524d\u7f6e\u901a\u77e5\u8fd4\u56de\u6267\u884c\u7684\u65b9\u6cd5:&quot; + methodName + &quot; --- \u65b9\u6cd5\u53c2\u6570:&quot; + Arrays.asList(pjp.getArgs()));\n            result = pjp.proceed();\n            System.out.println(&quot;Around&gt;&gt;&gt;  \u8fd4\u56de\u901a\u77e5\u7684\u7ed3\u679c\u662f:&quot; + result);\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n            System.out.println(&quot;Around&gt;&gt;&gt;  \u5f02\u5e38\u8fd4\u56de&quot;);\n        }\n        System.out.println(&quot;Around&gt;&gt;&gt;  \u540e\u7f6e\u901a\u77e5:&quot; + methodName);\n        result = &quot;Around&gt;&gt;&gt;  \u5982\u679c\u8981\u6539\u53d8\u8fd4\u56de\u503c\uff0c\u6ce8\u610f\u7c7b\u578b\u8f6c\u6362\u5f02\u5e38&quot;;\n        return result;\n    }\n}\n\nSpring \u57fa\u4e8e\u6ce8\u89e3\u7684AOP\u914d\u7f6e\u6ce8\u610f\u4e8b\u9879\n\u901a\u77e5\u7c7b\u65b9\u6cd5\u7684\u6267\u884c\u987a\u5e8f\n\n\u57fa\u4e8eXML:\n\u524d\u7f6e\u901a\u77e5(Before) \u2192 \u8fd4\u56de\u901a\u77e5(AfterRunning)/\u5f02\u5e38\u901a\u77e5(AfterThrowing) \u2192 \u540e\u7f6e\u901a\u77e5(After)\n\u57fa\u4e8e\u6ce8\u89e3\n\u524d\u7f6e\u901a\u77e5(Before) \u2192 \u540e\u7f6e\u901a\u77e5(After) \u2192 \u8fd4\u56de\u901a\u77e5(AfterRunning)/\u5f02\u5e38\u901a\u77e5(AfterThrowing)\n\n\u6240\u4ee5,\u57fa\u4e8e\u6ce8\u89e3\u7684AOP\u914d\u7f6e\u901a\u77e5\u7c7b\u7684\u65b9\u6cd5\u6700\u597d\u5355\u72ec\u4f7f\u7528\u73af\u7ed5\u901a\u77e5(Around)\n\u8865\u5145\uff1a\u57fa\u4e8e\u6ce8\u89e3\u7684\u6267\u884c\u987a\u5e8f\n1.\u8fdb\u5165\u73af\u7ed5\u901a\u77e5(Around)\n2.\u524d\u7f6e\u901a\u77e5(Before)\n3.\u9000\u51fa\u73af\u7ed5\u901a\u77e5(Around)\n4.\u540e\u7f6e\u901a\u77e5(After)\n5.\u8fd4\u56de\u901a\u77e5(AfterRunning)/\u5f02\u5e38\u901a\u77e5(AfterThrowing)\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "JSP\u548cMVC\u5f00\u53d1\u6a21\u5f0f", "date": "2020-05-08T22:10:00-00.00", "path": "/Xuxx_Blogs/archives/bj15/", "text": "1.JSP\n\n1. \u6307\u4ee4\n    * \u4f5c\u7528\uff1a\u7528\u4e8e\u914d\u7f6eJSP\u9875\u9762\uff0c\u5bfc\u5165\u8d44\u6e90\u6587\u4ef6\n    * \u683c\u5f0f\uff1a\n        &lt;%@ \u6307\u4ee4\u540d\u79f0 \u5c5e\u6027\u540d1=\u5c5e\u6027\u503c1 \u5c5e\u6027\u540d2=\u5c5e\u6027\u503c2 ... %&gt;\n    * \u5206\u7c7b\uff1a\n        1. page     \uff1a \u914d\u7f6eJSP\u9875\u9762\u7684\n            * contentType\uff1a\u7b49\u540c\u4e8eresponse.setContentType()\n                1. \u8bbe\u7f6e\u54cd\u5e94\u4f53\u7684mime\u7c7b\u578b\u4ee5\u53ca\u5b57\u7b26\u96c6\n                2. \u8bbe\u7f6e\u5f53\u524djsp\u9875\u9762\u7684\u7f16\u7801\uff08\u53ea\u80fd\u662f\u9ad8\u7ea7\u7684IDE\u624d\u80fd\u751f\u6548\uff0c\u5982\u679c\u4f7f\u7528\u4f4e\u7ea7\u5de5\u5177\uff0c\u5219\u9700\u8981\u8bbe\u7f6epageEncoding\u5c5e\u6027\u8bbe\u7f6e\u5f53\u524d\u9875\u9762\u7684\u5b57\u7b26\u96c6\uff09\n            * import\uff1a\u5bfc\u5305\n            * errorPage\uff1a\u5f53\u524d\u9875\u9762\u53d1\u751f\u5f02\u5e38\u540e\uff0c\u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u9519\u8bef\u9875\u9762\n            * isErrorPage\uff1a\u6807\u8bc6\u5f53\u524d\u4e5f\u662f\u662f\u5426\u662f\u9519\u8bef\u9875\u9762\u3002\n                * true\uff1a\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u5bf9\u8c61exception\n                * false\uff1a\u5426\u3002\u9ed8\u8ba4\u503c\u3002\u4e0d\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u5bf9\u8c61exception\n        2. include  \uff1a \u9875\u9762\u5305\u542b\u7684\u3002\u5bfc\u5165\u9875\u9762\u7684\u8d44\u6e90\u6587\u4ef6\n            * &lt;%@include file=\"top.jsp\"%&gt;\n        3. taglib   \uff1a \u5bfc\u5165\u8d44\u6e90\n            * &lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n                * prefix\uff1a\u524d\u7f00\uff0c\u81ea\u5b9a\u4e49\u7684\n2. \u6ce8\u91ca:\n    1. html\u6ce8\u91ca\uff1a\n        &lt;!-- --&gt;:\u53ea\u80fd\u6ce8\u91cahtml\u4ee3\u7801\u7247\u6bb5\n    2. jsp\u6ce8\u91ca\uff1a\u63a8\u8350\u4f7f\u7528\n        &lt;%-- --%&gt;\uff1a\u53ef\u4ee5\u6ce8\u91ca\u6240\u6709\n3. \u5185\u7f6e\u5bf9\u8c61\n    * \u5728jsp\u9875\u9762\u4e2d\u4e0d\u9700\u8981\u521b\u5efa\uff0c\u76f4\u63a5\u4f7f\u7528\u7684\u5bf9\u8c61\n    * \u4e00\u5171\u67099\u4e2a\uff1a\n            \u53d8\u91cf\u540d                 \u771f\u5b9e\u7c7b\u578b                        \u4f5c\u7528\n        * pageContext               PageContext                 \u5f53\u524d\u9875\u9762\u5171\u4eab\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u83b7\u53d6\u5176\u4ed6\u516b\u4e2a\u5185\u7f6e\u5bf9\u8c61\n        * request                   HttpServletRequest          \u4e00\u6b21\u8bf7\u6c42\u8bbf\u95ee\u7684\u591a\u4e2a\u8d44\u6e90(\u8f6c\u53d1)\n        * session                   HttpSession                 \u4e00\u6b21\u4f1a\u8bdd\u7684\u591a\u4e2a\u8bf7\u6c42\u95f4\n        * application               ServletContext              \u6240\u6709\u7528\u6237\u95f4\u5171\u4eab\u6570\u636e\n        * response                  HttpServletResponse         \u54cd\u5e94\u5bf9\u8c61\n        * page                      Object                      \u5f53\u524d\u9875\u9762(Servlet)\u7684\u5bf9\u8c61  this\n        * out                       JspWriter                   \u8f93\u51fa\u5bf9\u8c61\uff0c\u6570\u636e\u8f93\u51fa\u5230\u9875\u9762\u4e0a\n        * config                    ServletConfig               Servlet\u7684\u914d\u7f6e\u5bf9\u8c61\n        * exception                 Throwable                   \u5f02\u5e38\u5bf9\u8c61\n\n\n\n\u200b\n2.MVC\uff1a\u5f00\u53d1\u6a21\u5f0f\n\n1. jsp\u6f14\u53d8\u5386\u53f2\n    1. \u65e9\u671f\u53ea\u6709servlet\uff0c\u53ea\u80fd\u4f7f\u7528response\u8f93\u51fa\u6807\u7b7e\u6570\u636e\uff0c\u975e\u5e38\u9ebb\u70e6\n    2. \u540e\u6765\u53c8jsp\uff0c\u7b80\u5316\u4e86Servlet\u7684\u5f00\u53d1\uff0c\u5982\u679c\u8fc7\u5ea6\u4f7f\u7528jsp\uff0c\u5728jsp\u4e2d\u5373\u5199\u5927\u91cf\u7684java\u4ee3\u7801\uff0c\u6709\u5199html\u8868\uff0c\u9020\u6210\u96be\u4e8e\u7ef4\u62a4\uff0c\u96be\u4e8e\u5206\u5de5\u534f\u4f5c\n    3. \u518d\u540e\u6765\uff0cjava\u7684web\u5f00\u53d1\uff0c\u501f\u9274mvc\u5f00\u53d1\u6a21\u5f0f\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u66f4\u52a0\u5408\u7406\u6027\n\n2. MVC\uff1a\n    1. M\uff1aModel\uff0c\u6a21\u578b\u3002JavaBean\n        * \u5b8c\u6210\u5177\u4f53\u7684\u4e1a\u52a1\u64cd\u4f5c\uff0c\u5982\uff1a\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5c01\u88c5\u5bf9\u8c61\n    2. V\uff1aView\uff0c\u89c6\u56fe\u3002JSP\n        * \u5c55\u793a\u6570\u636e\n    3. C\uff1aController\uff0c\u63a7\u5236\u5668\u3002Servlet\n        * \u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165\n        * \u8c03\u7528\u6a21\u578b\n        * \u5c06\u6570\u636e\u4ea4\u7ed9\u89c6\u56fe\u8fdb\u884c\u5c55\u793a\n    * \u4f18\u7f3a\u70b9\uff1a\n        1. \u4f18\u70b9\uff1a\n            1. \u8026\u5408\u6027\u4f4e\uff0c\u65b9\u4fbf\u7ef4\u62a4\uff0c\u53ef\u4ee5\u5229\u4e8e\u5206\u5de5\u534f\u4f5c\n            2. \u91cd\u7528\u6027\u9ad8\n\n        2. \u7f3a\u70b9\uff1a\n            1. \u4f7f\u5f97\u9879\u76ee\u67b6\u6784\u53d8\u5f97\u590d\u6742\uff0c\u5bf9\u5f00\u53d1\u4eba\u5458\u8981\u6c42\u9ad8\n\n\n\n\n\n\n3.EL\u8868\u8fbe\u5f0f\n\n1. \u6982\u5ff5\uff1aExpression Language \u8868\u8fbe\u5f0f\u8bed\u8a00\n2. \u4f5c\u7528\uff1a\u66ff\u6362\u548c\u7b80\u5316jsp\u9875\u9762\u4e2djava\u4ee3\u7801\u7684\u7f16\u5199\n3. \u8bed\u6cd5\uff1a${\u8868\u8fbe\u5f0f}\n4. \u6ce8\u610f\uff1a\n    * jsp\u9ed8\u8ba4\u652f\u6301el\u8868\u8fbe\u5f0f\u7684\u3002\u5982\u679c\u8981\u5ffd\u7565el\u8868\u8fbe\u5f0f\n        1. \u8bbe\u7f6ejsp\u4e2dpage\u6307\u4ee4\u4e2d\uff1aisELIgnored=\"true\" \u5ffd\u7565\u5f53\u524djsp\u9875\u9762\u4e2d\u6240\u6709\u7684el\u8868\u8fbe\u5f0f\n        2. \\${\u8868\u8fbe\u5f0f} \uff1a\u5ffd\u7565\u5f53\u524d\u8fd9\u4e2ael\u8868\u8fbe\u5f0f\n5. \u4f7f\u7528\uff1a\n    1. \u8fd0\u7b97\uff1a\n        * \u8fd0\u7b97\u7b26\uff1a\n            1. \u7b97\u6570\u8fd0\u7b97\u7b26\uff1a + - * /(div) %(mod)\n            2. \u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a &gt; &lt; &gt;= &lt;= == !=\n            3. \u903b\u8f91\u8fd0\u7b97\u7b26\uff1a &amp;&amp;(and) ||(or) !(not)\n            4. \u7a7a\u8fd0\u7b97\u7b26\uff1a empty\n                * \u529f\u80fd\uff1a\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u3001\u96c6\u5408\u3001\u6570\u7ec4\u5bf9\u8c61\u662f\u5426\u4e3anull\u6216\u8005\u957f\u5ea6\u662f\u5426\u4e3a0\n                * ${empty list}:\u5224\u65ad\u5b57\u7b26\u4e32\u3001\u96c6\u5408\u3001\u6570\u7ec4\u5bf9\u8c61\u662f\u5426\u4e3anull\u6216\u8005\u957f\u5ea6\u4e3a0\n                * ${not empty str}:\u8868\u793a\u5224\u65ad\u5b57\u7b26\u4e32\u3001\u96c6\u5408\u3001\u6570\u7ec4\u5bf9\u8c61\u662f\u5426\u4e0d\u4e3anull \u5e76\u4e14 \u957f\u5ea6&gt;0\n    2. \u83b7\u53d6\u503c\n        1. el\u8868\u8fbe\u5f0f\u53ea\u80fd\u4ece\u57df\u5bf9\u8c61\u4e2d\u83b7\u53d6\u503c\n        2. \u8bed\u6cd5\uff1a\n            1. ${\u57df\u540d\u79f0.\u952e\u540d}\uff1a\u4ece\u6307\u5b9a\u57df\u4e2d\u83b7\u53d6\u6307\u5b9a\u952e\u7684\u503c\n                * \u57df\u540d\u79f0\uff1a\n                    1. pageScope        --&gt; pageContext\n                    2. requestScope     --&gt; request\n                    3. sessionScope     --&gt; session\n                    4. applicationScope --&gt; application\uff08ServletContext\uff09\n                * \u4e3e\u4f8b\uff1a\u5728request\u57df\u4e2d\u5b58\u50a8\u4e86name=\u5f20\u4e09\n                * \u83b7\u53d6\uff1a${requestScope.name}\n\n            2. ${\u952e\u540d}\uff1a\u8868\u793a\u4f9d\u6b21\u4ece\u6700\u5c0f\u7684\u57df\u4e2d\u67e5\u627e\u662f\u5426\u6709\u8be5\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u76f4\u5230\u627e\u5230\u4e3a\u6b62\u3002\n        3. \u83b7\u53d6\u5bf9\u8c61\u3001List\u96c6\u5408\u3001Map\u96c6\u5408\u7684\u503c\n            1. \u5bf9\u8c61\uff1a${\u57df\u540d\u79f0.\u952e\u540d.\u5c5e\u6027\u540d}\n                    * \u672c\u8d28\u4e0a\u4f1a\u53bb\u8c03\u7528\u5bf9\u8c61\u7684getter\u65b9\u6cd5\n\n            2. List\u96c6\u5408\uff1a${\u57df\u540d\u79f0.\u952e\u540d[\u7d22\u5f15]}\n\n            3. Map\u96c6\u5408\uff1a\n                    * ${\u57df\u540d\u79f0.\u952e\u540d.key\u540d\u79f0}\n                    * ${\u57df\u540d\u79f0.\u952e\u540d[\"key\u540d\u79f0\"]}\n    3. \u9690\u5f0f\u5bf9\u8c61\uff1a\n        * el\u8868\u8fbe\u5f0f\u4e2d\u670911\u4e2a\u9690\u5f0f\u5bf9\u8c61\n        * pageContext\uff1a\n            * \u83b7\u53d6jsp\u5176\u4ed6\u516b\u4e2a\u5185\u7f6e\u5bf9\u8c61\n             * ${pageContext.request.contextPath}\uff1a\u52a8\u6001\u83b7\u53d6\u865a\u62df\u76ee\u5f55\n\n\n\n\u200b\n4.JSTL\n\n1. \u6982\u5ff5\uff1aJavaServer Pages Tag Library  JSP\u6807\u51c6\u6807\u7b7e\u5e93\n    * \u662f\u7531Apache\u7ec4\u7ec7\u63d0\u4f9b\u7684\u5f00\u6e90\u7684\u514d\u8d39\u7684jsp\u6807\u7b7e      &lt;\u6807\u7b7e&gt;\n\n2. \u4f5c\u7528\uff1a\u7528\u4e8e\u7b80\u5316\u548c\u66ff\u6362jsp\u9875\u9762\u4e0a\u7684java\u4ee3\u7801      \n\n3. \u4f7f\u7528\u6b65\u9aa4\uff1a\n    1. \u5bfc\u5165jstl\u76f8\u5173jar\u5305\n    2. \u5f15\u5165\u6807\u7b7e\u5e93\uff1ataglib\u6307\u4ee4\uff1a  &lt;%@ taglib %&gt;\n    3. \u4f7f\u7528\u6807\u7b7e\n\n4. \u5e38\u7528\u7684JSTL\u6807\u7b7e\n    1. if:\u76f8\u5f53\u4e8ejava\u4ee3\u7801\u7684if\u8bed\u53e5\n        1. \u5c5e\u6027\uff1a\n            * test \u5fc5\u987b\u5c5e\u6027\uff0c\u63a5\u53d7boolean\u8868\u8fbe\u5f0f\n                * \u5982\u679c\u8868\u8fbe\u5f0f\u4e3atrue\uff0c\u5219\u663e\u793aif\u6807\u7b7e\u4f53\u5185\u5bb9\uff0c\u5982\u679c\u4e3afalse\uff0c\u5219\u4e0d\u663e\u793a\u6807\u7b7e\u4f53\u5185\u5bb9\n                * \u4e00\u822c\u60c5\u51b5\u4e0b\uff0ctest\u5c5e\u6027\u503c\u4f1a\u7ed3\u5408el\u8868\u8fbe\u5f0f\u4e00\u8d77\u4f7f\u7528\n         2. \u6ce8\u610f\uff1a\n             * c:if\u6807\u7b7e\u6ca1\u6709else\u60c5\u51b5\uff0c\u60f3\u8981else\u60c5\u51b5\uff0c\u5219\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e00\u4e2ac:if\u6807\u7b7e\n    2. choose:\u76f8\u5f53\u4e8ejava\u4ee3\u7801\u7684switch\u8bed\u53e5\n        1. \u4f7f\u7528choose\u6807\u7b7e\u58f0\u660e                     \u76f8\u5f53\u4e8eswitch\u58f0\u660e\n        2. \u4f7f\u7528when\u6807\u7b7e\u505a\u5224\u65ad                  \u76f8\u5f53\u4e8ecase\n        3. \u4f7f\u7528otherwise\u6807\u7b7e\u505a\u5176\u4ed6\u60c5\u51b5\u7684\u58f0\u660e        \u76f8\u5f53\u4e8edefault\n\n    3. foreach:\u76f8\u5f53\u4e8ejava\u4ee3\u7801\u7684for\u8bed\u53e5\n        1.\u5b8c\u6210\u91cd\u590d\u7684\u64cd\u4f5c\n            for(inti=0;i&lt;10;i++){...}\n            *\u5c5e\u6027:\n                begin:\u5f00\u59cb\u503c\n                end:\u7ed3\u675f\u503c\n                var:\u4e34\u65f6\u53d8\u91cf\n                step:\u6b65\u957f\n                varStatus :\u5faa\u73af\u72b6\u6001\u5bf9\u8c61\n                    index:\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u4ecee\u5f00\u59cb\n                    count :\u5faa\u73af\u6b21\u6570\uff0c\u4ece1\u5f00\u59cb\n        2. \u4fbf\u5386\u5bb9\u5668\n            List&lt;User&gt; list;\n            for(User user : list){...}\n            *\u5c5e\u6027:\n                items :\u5bb9\u5668\u5bf9\u8c61\n                var :\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u4e34\u65f6\u53d8\u91cf\n                varStatus :\u5faa\u73af\u72b6\u6001\u5bf9\u8c61\n                index:\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u4eceo\u5f00\u59cb\n                count :\u5faa\u73af\u6b21\u6570\uff0c\u4ece1\u5f00\u59cb\n\n5. \u7ec3\u4e60\uff1a\n    * \u9700\u6c42\uff1a\u5728request\u57df\u4e2d\u6709\u4e00\u4e2a\u5b58\u6709User\u5bf9\u8c61\u7684List\u96c6\u5408\u3002\u9700\u8981\u4f7f\u7528jstl+el\u5c06list\u96c6\u5408\u6570\u636e\u5c55\u793a\u5230jsp\u9875\u9762\u7684\u8868\u683ctable\u4e2d\n\n\n\n\n5.\u4e09\u5c42\u67b6\u6784\uff1a\u8f6f\u4ef6\u8bbe\u8ba1\u67b6\u6784\n\n1. \u754c\u9762\u5c42(\u8868\u793a\u5c42)\uff1a\u7528\u6237\u770b\u7684\u5f97\u754c\u9762\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u754c\u9762\u4e0a\u7684\u7ec4\u4ef6\u548c\u670d\u52a1\u5668\u8fdb\u884c\u4ea4\u4e92\n2. \u4e1a\u52a1\u903b\u8f91\u5c42\uff1a\u5904\u7406\u4e1a\u52a1\u903b\u8f91\u7684\u3002\n3. \u6570\u636e\u8bbf\u95ee\u5c42\uff1a\u64cd\u4f5c\u6570\u636e\u5b58\u50a8\u6587\u4ef6\u3002\n\n\n\n\n6.\u6848\u4f8b\uff1a\u7528\u6237\u4fe1\u606f\u5217\u8868\u5c55\u793a\n\n1. \u9700\u6c42\uff1a\u7528\u6237\u4fe1\u606f\u7684\u589e\u5220\u6539\u67e5\u64cd\u4f5c\n2. \u8bbe\u8ba1\uff1a\n    1. \u6280\u672f\u9009\u578b\uff1aServlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat\n    2. \u6570\u636e\u5e93\u8bbe\u8ba1\uff1a\n        create database day17; -- \u521b\u5efa\u6570\u636e\u5e93\n        use day17;             -- \u4f7f\u7528\u6570\u636e\u5e93\n        create table user(   -- \u521b\u5efa\u8868\n            id int primary key auto_increment,\n            name varchar(20) not null,\n            gender varchar(5),\n            age int,\n            address varchar(32),\n            qq  varchar(20),\n            email varchar(50)\n        );\n\n3. \u5f00\u53d1\uff1a\n    1. \u73af\u5883\u642d\u5efa\n        1. \u521b\u5efa\u6570\u636e\u5e93\u73af\u5883\n        2. \u521b\u5efa\u9879\u76ee\uff0c\u5bfc\u5165\u9700\u8981\u7684jar\u5305\n\n    2. \u7f16\u7801\n4. \u6d4b\u8bd5\n5. \u90e8\u7f72\u8fd0\u7ef4\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Jsp", "slug": "Jsp", "permalink": "/Xuxx_Blogs/tag/Jsp/"}]}, {"title": "\u4f1a\u8bdd\u6280\u672f", "date": "2020-05-07T02:10:00-00.00", "path": "/Xuxx_Blogs/archives/bj14/", "text": "\n\u4f1a\u8bdd:\u4e00\u6b21\u4f1a\u8bdd\u4e2d\u5305\u542b\u591a\u6b21\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\n\n \u4e00\u6b21\u4f1a\u8bdd:\u6d4f\u89c8\u5668\u7b2c\u4e00\u6b21\u7ed9\u670d\u52a1\u5668\u8d44\u6e90\u53d1\u9001\u8bf7\u6c42\uff0c\u4f1a\u8bdd\u5efa\u7acb\uff0c\u76f4\u5230\u6709\u4e00\u65b9\u65ad\u5f00\u4e3a\u6b62\n\n\u529f\u80fd:\u5728\u4e00\u6b21\u4f1a\u8bdd\u7684\u8303\u56f4\u5185\u7684\u591a\u6b21\u8bf7\u6c42\u95f4\uff0c\u5171\u4eab\u6570\u636e\n\n\u65b9\u5f0f:\n\n\u5ba2\u6237\u7aef\u4f1a\u8bdd\u6280\u672f: Cookie\n\u670d\u52a1\u5668\u7aef\u4f1a\u8bdd\u6280\u672f: Session\n\n\n\n1. Cookie\n1. \u6982\u5ff5:\n\u5ba2\u6237\u7aef\u4f1a\u8bdd\u6280\u672f\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u5ba2\u6237\u7aef\n2. \u5feb\u901f\u5165\u95e8:\n\u4f7f\u7528\u6b65\u9aa4:\n\n\u521b\u5efacookie\u5bf9\u8c61\uff0c \u7ed1\u5b9a\u6570\u636e\n\n new Cookie(String name, String value)\n\n\u53d1\u9001Cookie\u5bf9\u8c61\n\nresponse. addCookie(Cookie cookie)\n\n\u83b7\u53d6Cookie, \u5230\u6570\u636e\n\nCookie[] request. getColkies()\n\n\n3. \u5b9e\u73b0\u539f\u7406\n\u57fa\u4e8e\u54cd\u5e94\u5934set-cookie\u548c\u8bf7\u6c42\u5934cookie\u5b9e\u73b0\n4. cookie\u7684\u7ec6\u8282\n\n\u4e00\u6b21\u53ef\u4e0d\u53ef\u4ee5\u53d1\u9001\u591a\u4e2acookie?\n\u53ef\u4ee5\uff0c\u521b\u5efa\u591a\u4e2aCookie\u5bf9\u8c61\uff0c\u4f7f\u7528response\u8c03\u7528\u591a\u6b21addCookie\u65b9\u6cd5\u53d1\u9001cookie\u5373\u53ef\u3002\n\ncookie\u5728\u6d4f\u89c8\u5668\u4e2d\u4fdd\u5b58\u591a\u957f\u65f6\u95f4?\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u6d4f\u89c8\u5668\u5173\u95ed\u540e\uff0cCookie\u6570\u636e\u88ab\u9500\u6bc1\n\n\u6301\u4e45\u5316\u5b58\u50a8:\nsetMaxAge(int seconds )\n\n\u6b63\u6570:\u5c06Cooki e\u6570\u636e\u5199\u5230\u786c\u76d8\u7684\u6587\u4ef6\u4e2d\u3002\u6301\u4e45\u5316\u5b58\u50a8\u3002\u5e76\u6307\u5b9acookie\u5b58\u6d3b\u65f6\u95f4\uff0c\u65f6\u95f4\u5230\u540e\uff0ccookie\u6587\u4ef6\u81ea\u52a8\u5931\u6548\n\u8d1f\u6570:\u9ed8\u8ba4\u503c\n\u96f6:\u5220\u9664cookie\u4fe1\u606f\n\n\n\n\ncookie\u80fd\u4e0d\u80fd\u5b58\u4e2d\u6587?\n\u5728tomcat 8\u4e4b\u524dcookie\u4e2d\u4e0d\u80fd\u76f4\u63a5\u5b58\u50a8\u4e2d\u6587\u6570\u636e\u3002 \u2014\u2014\u9700\u8981\u5c06\u4e2d\u6587\u6570\u636e\u8f6c\u7801---- -\u822c\u91c7\u7528URL\u7f16\u7801\n\n\n\u5728tomcat 8\u4e4b\u540e\uff0ccookie\u652f\u6301\u4e2d\u6587\u6570\u636e\u3002\n\ncookie\u5171\u4eab\u95ee\u9898 ?\n\n\u5047\u8bbe\u5728\u4e00\u4e2atomcat\u670d\u52a1\u5668\u4e2d\uff0c\u90e8\u7f72\u4e86\u591a\u4e2aweb\u9879\u76ee\uff0c\u90a3\u4e48\u5728\u8fd9\u4e9bweb\u9879\u76ee\u4e2dcookie\u80fd\u4e0d\u80fd\u5171\u4eab?\n  \u9ed8\u8ba4\u60c5\u51b5\u4e0bcookie\u4e0d\u80fd\u5171\u4eab\nsetPath(String path) :\u8bbe\u7f6ecookie\u7684\u83b7\u53d6\u8303\u56f4\u3002\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684\u865a\u62df\u76ee\u5f55\n\n      \u5982\u679c\u8981\u5171\u4eab\u7ed9\u540c\u4e00\u53f0\u670d\u52a1\u5668\u7684\u4e0a\u7684\u5176\u4ed6\u9879\u76ee\uff0c\u5219\u53ef\u4ee5\u5c06path\u8bbe\u7f6e\u4e3a\"/\" \n\n\n\n\u4e0d\u540c\u7684tomcat\u670d\u52a1\u5668\u95f4cookie\u5171\u4eab\u95ee\u9898?\n\n\u200b     setDomain(String path) :\u5982\u679c\u8bbe\u7f6e\u4e00\u7ea7\u57df\u540d\u76f8\u540c\uff0c \u90a3\u4e48\u591a\u4e2a\u670d\u52a1\u5668\u4e4b\u95f4cookie\u53ef\u4ee5\u5171\u4eab\n\u200b     \u4f8b\uff1asetDomain(\" .baidu. com\") ,\u90a3\u4e48tieba. baidu. com\u548cnews . baidu. com\u4e2dcookie\u53ef\u4ee5\u5171\u4eab\n\n\n\nCookie\u7684\u7279\u70b9\u548c\u4f5c\u7528\n\u7279\u70b9:\n\ncookie\u5b58\u50a8\u6570\u636e\u5728\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\n\u6d4f\u89c8\u5668\u5bf9\u4e8e\u5355\u4e2acookie\u7684\u5927\u5c0f\u6709\u9650\u5236(4kb)\u4ee5\u53ca\u5bf9\u540c\u4e00\u4e2a\u57df\u540d\u4e0b\u7684\u603bcookie\u6570\u91cf\u4e5f\u6709\u9650\u5236(20\u4e2a)\n\n\u4f5c\u7528:\n\ncookie- \u822c\u7528\u4e8e\u5b58 \u51fa\u5c11\u91cf\u7684\u4e0d\u592a\u654f\u611f\u7684\u6570\u636e\n\u5728\u4e0d\u767b\u5f55\u7684\u60c5\u51b5\u4e0b\uff0c\u5b8c\u6210\u670d\u52a1\u5668\u5bf9\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\u8bc6\u522b\n\n\n\n2. Session\n1. \u6982\u5ff5:\n\u670d\u52a1\u5668\u7aef\u4f1a\u8bdd\u6280\u672f\uff0c\u5728\u4e00\u6b21\u4f1a\u8bdd\u7684\u591a\u6b21\u8bf7\u6c42\u95f4\u5171\u4eab\u6570\u636e\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u7aef\u7684\u5bf9\u8c61\u4e2d\u3002\n2.\u5feb\u901f\u5165\u95e8\n\n\u83b7\u53d6HttpSession\u5bf9\u8c61:\n\nHttpSession session = request. getSession();\n\n\u4f7f\u7528HttpSession\u5bf9\u8c61:\n\nObject getAttribute( String name);\nvoid setAttribute(string name, object value);\nvoid removeAttribute(String name);\n\n\n3. \u539f\u7406\nSession\u7684\u5b9e\u73b0\u662f\u4f9d\u8d56\u4e8ecookie\u7684\u3002\n4. \u7ec6\u8282\n\n\u5f53\u5ba2\u6237\u7aef\u5173\u95ed\u540e,\u670d\u52a1\u5668\u4e0d\u5173\u95ed\uff0c\u4e24\u6b21\u83b7\u53d6session\u662f\u5426\u4e3a\u540c\u4e00\u4e2a?\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u3002\u4e0d\u662f\u3002\n\u5982\u679c\u9700\u8981\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u521b\u5efaCookie,\u952e\u4e3aJSESSIONID\uff0c\u8bbe\u7f6e\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff0c\u8ba9cookie\u6301\u4e45\u5316\u4fdd\u5b58\u3002\n\nCookie C = new Cookie(\"ISESSIONID\" , session. getId());\nC. setMaxAge(60* 60) ;\nresponse. addcookie(c);\n\n\n\n\u5ba2\u6237\u7aef\u4e0d\u5173\u95ed\uff0c\u670d\u52a1\u5668\u5173\u95ed\u540e\uff0c\u4e24\u6b21\u83b7\u53d6\u7684session\u662f\u540c\u4e00\u4e2a\u5417?\n\n         \u4e0d\u662f\u540c\u4e00\u4e2a\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u6570\u636e\u4e0d\u4e22\u5931\u3002\n\nsession\u7684\u949d\u5316(\u5e8f\u5217\u5316):\n\n \u5728\u670d\u52a1\u5668\u6b63\u5e38\u5173\u95ed\u4e4b\u524d\uff0c\u5c06session\u5bf9\u8c61\u5e8f\u5217\u5316\u5230\u786c\u76d8\u4e0a\u3002\n\nsession\u7684\u6d3b\u5316(\u53cd\u5e8f\u5217\u5316):\n\n   \u5728\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5c06session\u6587\u4ef6\u8f6c\u5316\u4e3a\u5185\u5b58\u4e2d\u7684session\u5bf9\u8c61\u5373\u53ef\u3002\n\nsession\u4ec0\u4e48\u65f6\u5019\u88ab\u9500\u6bc1?\n\n\u670d\u52a1\u5668\u5173\u95ed\n\n\nsession\u5bf9\u8c61\u8c03\u7528invalidate()\n\nsession\u9ed8\u8ba4\u5931\u6548\u65f6\u95f430\u5206\u949f\n\u5728web.xml\u4e2d\uff08\u53ef\u4ee5\u662f\u9879\u76ee\u7684web.xml,\u4e5f\u53ef\u4ee5\u662ftomcat\u7684conf\u4e0b\u7684web.xml\uff09\u9009\u62e9\u6027\u914d\u7f6e\u4fee\u6539\n&lt;session-config&gt;\n&lt;session-timeout&gt;30&lt;/session-timeout&gt;\n&lt;/session-config&gt;\n\n\n\n\n\n5. session\u7684\u7279\u70b9\n\nsession\u7528\u4e8e\u5b58\u50a8\u4e00\u6b21\u4f1a\u8bdd\u7684\u591a\u6b21\u8bf7\u6c42\u7684\u6570\u636e\uff0c \u5b58\u5728\u670d\u52a1\u5668\u7aef\nsession\u53ef\u4ee5\u5b58 \u50a8\u4efb\u610f\u7c7b\u578b\uff0c\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\n\nsession\u4e0ecookie\u7684\u533a\u522b:\n\nsession\u5b58 \u50a8\u6570\u636e\u5728\u670d\u52a1\u5668\u7aef\uff0cCookie\u5728\u5ba2\u6237\u7aef\nsession\u6ca1\u6709\u6570\u636e\u5927\u5c0f\u9650\u5236\uff0cCookie\u6709\nsession\u6570\u636e\u5b89\u5168\uff0cCookie\u76f8\u5bf9\u4e8e\u4e0d\u5b89\u5168\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Cookie", "slug": "Cookie", "permalink": "/Xuxx_Blogs/tag/Cookie/"}, {"name": "Session", "slug": "Session", "permalink": "/Xuxx_Blogs/tag/Session/"}]}, {"title": "Spring Boot\u6ce8\u518c\u62e6\u622a\u5668", "date": "2020-05-07T01:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj13/", "text": "1. \u7f16\u5199Controller\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;/hello&quot;)\n    public String hello() {\n        return &quot;Hello&quot;;\n    }\n}\n\n2.  \u7f16\u5199\u62e6\u622a\u5668\n/**\n * \u5b9a\u4e49\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\n */\npublic class MyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(&quot;preHandle\u65b9\u6cd5&quot;);\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        System.out.println(&quot;postHandle\u65b9\u6cd5&quot;);\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        System.out.println(&quot;afterCompletion\u65b9\u6cd5&quot;);\n    }\n}\n\n3.\u914d\u7f6e\u62e6\u622a\u5668\n/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\n */\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    //\u6ce8\u5165\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\n    @Bean\n    MyInterceptor myInterceptor() {\n        return new MyInterceptor();\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        //\u62e6\u622a\u6240\u6709\u8def\u5f84 \u5b58\u5728\u591a\u4e2a\u62e6\u622a\u5668\u65f6\u8981\u914d\u7f6e\u4f18\u5148\u7ea7\n        registry.addInterceptor(myInterceptor()).addPathPatterns(&quot;/**&quot;);\n    }\n}\n\n4. \u6d4b\u8bd5\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring Boot\u901a\u8fc7CORS\u5b9e\u73b0\u8de8\u57df", "date": "2020-05-07T00:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj12/", "text": "CORS\u6982\u8ff0\n\u5f53\u4e00\u4e2a\u8d44\u6e90\u4ece\u4e0e\u8be5\u8d44\u6e90\u672c\u8eab\u6240\u5728\u7684\u670d\u52a1\u5668\u4e0d\u540c\u7684\u57df\u3001\u534f\u8bae\u3001\u7aef\u53e3\u8bf7\u6c42\u4e00\u4e2a\u8d44\u6e90\u65f6\uff0c\u8d44\u6e90\u4f1a\u53d1\u8d77\u4e00\u4e2a\u8de8\u57df HTTP \u8bf7\u6c42\u3002\u540c\u6e90\u7b56\u7565\u53c2\u8003\u6d4f\u89c8\u5668\u7684\u540c\u6e90\u7b56\u7565 | MDN\n\u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u6d4f\u89c8\u5668\u9650\u5236\u4ece\u811a\u672c\u5185\u53d1\u8d77\u7684\u8de8\u6e90HTTP\u8bf7\u6c42\uff0cXMLHttpRequest\u548cFetch API\uff0c\u53ea\u80fd\u4ece\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u7684\u540c\u4e00\u4e2a\u57df\u8bf7\u6c42HTTP\u8d44\u6e90\uff0c\u9664\u975e\u4f7f\u7528CORS\u5934\u6587\u4ef6\n\u5bf9\u4e8e\u6d4f\u89c8\u5668\u9650\u5236\u8fd9\u4e2a\u8bcd\uff0c\u8981\u7740\u91cd\u89e3\u91ca\u4e00\u4e0b\uff1a\u4e0d\u4e00\u5b9a\u662f\u6d4f\u89c8\u5668\u9650\u5236\u4e86\u53d1\u8d77\u8de8\u7ad9\u8bf7\u6c42\uff0c\u4e5f\u53ef\u80fd\u662f\u8de8\u7ad9\u8bf7\u6c42\u53ef\u4ee5\u6b63\u5e38\u53d1\u8d77\uff0c\u4f46\u662f\u8fd4\u56de\u7ed3\u679c\u88ab\u6d4f\u89c8\u5668\u62e6\u622a\u4e86\u3002\n\u7b80\u5355\u8bf7\u6c42\n\u4e0d\u4f1a\u89e6\u53d1CORS\u9884\u68c0\u7684\u8bf7\u6c42\u79f0\u4e3a\u7b80\u5355\u8bf7\u6c42\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6240\u6709\u6761\u4ef6\u7684\u624d\u4f1a\u88ab\u89c6\u4e3a\u7b80\u5355\u8bf7\u6c42\uff0c\u57fa\u672c\u4e0a\u6211\u4eec\u65e5\u5e38\u5f00\u53d1\u53ea\u4f1a\u5173\u6ce8\u524d\u4e24\u70b9\n\n\u4f7f\u7528GET\u3001POST\u3001HEAD\u5176\u4e2d\u4e00\u79cd\u65b9\u6cd5\n\n\u53ea\u4f7f\u7528\u4e86\u5982\u4e0b\u7684\u5b89\u5168\u9996\u90e8\u5b57\u6bb5\uff0c\u4e0d\u5f97\u4eba\u4e3a\u8bbe\u7f6e\u5176\u4ed6\u9996\u90e8\u5b57\u6bb5\n\nAccept\n\nAccept-Language\n\nContent-Language\n\nContent-Type\n\u4ec5\u9650\u4ee5\u4e0b\u4e09\u79cd\n\ntext/plain\n\n\n\n\n\n\nmultipart/form-data\n\napplication/x-www-form-urlencoded\n\nHTML\u5934\u90e8header field\u5b57\u6bb5\uff1aDPR\u3001Download\u3001Save-Data\u3001Viewport-Width\u3001WIdth\n\n\n\n\n\n\n\u8bf7\u6c42\u4e2d\u7684\u4efb\u610fXMLHttpRequestUpload \u5bf9\u8c61\u5747\u6ca1\u6709\u6ce8\u518c\u4efb\u4f55\u4e8b\u4ef6\u76d1\u542c\u5668\uff1bXMLHttpRequestUpload \u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 XMLHttpRequest.upload \u5c5e\u6027\u8bbf\u95ee\n\n\u8bf7\u6c42\u4e2d\u6ca1\u6709\u4f7f\u7528 ReadableStream \u5bf9\u8c61\n\n\n\u9884\u68c0\u8bf7\u6c42\n\u9700\u9884\u68c0\u7684\u8bf7\u6c42\u8981\u6c42\u5fc5\u987b\u9996\u5148\u4f7f\u7528 OPTIONS \u65b9\u6cd5\u53d1\u8d77\u4e00\u4e2a\u9884\u68c0\u8bf7\u6c42\u5230\u670d\u52a1\u5668\uff0c\u4ee5\u83b7\u77e5\u670d\u52a1\u5668\u662f\u5426\u5141\u8bb8\u8be5\u5b9e\u9645\u8bf7\u6c42\u3002\"\u9884\u68c0\u8bf7\u6c42\u201c\u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u907f\u514d\u8de8\u57df\u8bf7\u6c42\u5bf9\u670d\u52a1\u5668\u7684\u7528\u6237\u6570\u636e\u4ea7\u751f\u672a\u9884\u671f\u7684\u5f71\u54cd\n\u4e0b\u9762\u7684\u8bf7\u6c42\u4f1a\u89e6\u53d1\u9884\u68c0\u8bf7\u6c42\uff0c\u5176\u5b9e\u975e\u7b80\u5355\u8bf7\u6c42\u4e4b\u5916\u7684\u5c31\u4f1a\u89e6\u53d1\u9884\u68c0\uff0c\u5c31\u4e0d\u7528\u8bb0\u90a3\u4e48\u591a\u4e86\n\n\u4f7f\u7528\u4e86PUT\u3001DELETE\u3001CONNECT\u3001OPTIONS\u3001TRACE\u3001PATCH\u65b9\u6cd5\n\n\u4eba\u4e3a\u8bbe\u7f6e\u4e86\u975e\u89c4\u5b9a\u5185\u7684\u5176\u4ed6\u9996\u90e8\u5b57\u6bb5\uff0c\u53c2\u8003\u4e0a\u9762\u7b80\u5355\u8bf7\u6c42\u7684\u5b89\u5168\u5b57\u6bb5\u96c6\u5408\uff0c\u8fd8\u8981\u7279\u522b\u6ce8\u610fContent-Type\u7684\u7c7b\u578b\n\nXMLHttpRequestUpload \u5bf9\u8c61\u6ce8\u518c\u4e86\u4efb\u4f55\u4e8b\u4ef6\u76d1\u542c\u5668\n\n#### \u8bf7\u6c42\u4e2d\u4f7f\u7528\u4e86ReadableStream\u5bf9\u8c61\n\n\n1. \u95ee\u9898\u6f14\u793a\n\u521b\u5efa\u4e24\u4e2aSpring Boot\u9879\u76ee\uff0c\u4e00\u4e2a\u63d0\u4f9b\u63a5\u53e3\uff0c\u53e6\u4e00\u4e2a\u6765\u8bbf\u95ee\u3002\ncors1(\u7aef\u53e3\u4e3a8080)\u63d0\u4f9b\u7684\u63a5\u53e3 \u8bbf\u95eeURL:http://localhost:8080/hello\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;/hello&quot;)\n    public String hello() {\n        return &quot;Hello cors1&quot;;\n    }\n}\n\ncors2(\u7aef\u53e3\u4e3a8081)\u7f16\u5199\u4e00\u4e2aHTML\u6765\u8bbf\u95eehttp://localhost:8080/hello\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;script src=&quot;jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;input type=&quot;button&quot; value=&quot;GET&quot; onclick=&quot;getData()&quot;&gt;\n&lt;script&gt;\n    function getData() {\n        $.get(&#39;http://localhost:8080/hello&#39;, function (msg) {\n            $(&quot;#app&quot;).html(msg);\n        })\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\u8bbf\u95ee\u7ed3\u679c\uff1a\n\u8bbf\u95ee\u7ed3\u679c\n\u70b9\u51fbget\u6309\u94ae\u65f6\u62a5\u9519 \uff08\u4ece\u6e90\u5730\u5740http://localhost:8080/hello\u8bbf\u95eeXMLHttpRequest\u5df2\u88abCORS\u7b56\u7565\u963b\u585e:\u5728\u88ab\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0a\u6ca1\u6709Access-Control-Allow-Origin\u62a5\u5934\u3002\uff09\n2. \u89e3\u51b3\u95ee\u9898\n\u4e0a\u9762\u7684\u62a5\u9519\u662f\u56e0\u4e3a\u5728\u88ab\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0a\u6ca1\u6709Access-Control-Allow-Origin\u62a5\u5934\uff0c\u5728Spring Boot\u4e2d\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7@CrossOrigin\u6ce8\u89e3\u4e3a\u63a5\u53e3\u914d\u7f6e\u3002\n\u6539\u5199cros1\u7684Controller\uff0c\u6dfb\u52a0@CrossOrigin\u6ce8\u89e3\n\u5176\u4e2d@CrossOrigin\u4e2d\u76842\u4e2a\u5e38\u7528\u53c2\u6570\uff1a\norigins  \uff1a \u5141\u8bb8\u53ef\u8bbf\u95ee\u7684\u57df\u5217\u8868\nmaxAge\uff1a\u51c6\u5907\u54cd\u5e94\u524d\u7684\u7f13\u5b58\u6301\u7eed\u7684\u6700\u5927\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\n@CrossOrigin\u6ce8\u89e3\u4e0d\u4ec5\u80fd\u5728\u65b9\u6cd5\u4e0a\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e0a\u4f7f\u7528\u3002\n\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    @CrossOrigin(origins = {\"http://localhost:8081\"})\n    public String hello() {\n        return \"Hello cors1\";\n    }\n}\n\u8bbf\u95ee\u7ed3\u679c\uff1a\u54cd\u5e94\u5934\u4e2d\u591a\u4e86Access-Control-Allow-Origin: http://localhost:8081\n\u8bbf\u95ee\u7ed3\u679c\n3. \u5168\u5c40CORS\u914d\u7f6e\n\u7f16\u5199\u914d\u7f6e\u7c7b\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(&quot;/**&quot;)//\u5141\u8bb8\u8de8\u57df\u7684\u63a5\u53e3\n                .allowedOrigins(&quot;http://localhost:8081&quot;)//\u5141\u8bb8\u7684\u6765\u6e90\n                .allowedHeaders(&quot;*&quot;)//\u5141\u8bb8\u7684Headers,\u9ed8\u8ba4\u5141\u8bb8\u6240\u6709\n                .allowedMethods(&quot;*&quot;)//\u5141\u8bb8\u7684Methods\uff0c\u9ed8\u8ba4\u5141\u8bb8GET\u3001HEAD\u3001POST\n                .maxAge(1800);//\u6700\u5927\u6709\u6548\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a1800\u79d2(30\u5206\u949f)\n    }\n}\n\n\u6b64\u65f6cros1\u4e2d\u6240\u6709\u7684\u63a5\u53e3\u90fd\u5f00\u542f\u4e86CORS\uff0c\u53ef\u4ee5\u8de8\u57df\u8bbf\u95ee\u4e86\u3002\n4. \u9884\u68c0\u8bf7\u6c42\uff08\u63a2\u6d4b\u8bf7\u6c42\uff09\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring Boot\u4e2d\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406", "date": "2020-05-06T02:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj11/", "text": "1. Spring Boot\u5b9e\u73b0\u81ea\u5b9a\u4e49\u9519\u8bef\u9875\n\u6f14\u793a\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;/hello&quot;)\n    public String hello() {\n        int i = 1 / 0;\n        return &quot;hello&quot;;\n    }\n}\n\n\u8bbf\u95ee\u7ed3\u679c\n\u8bbf\u95ee\u7ed3\u679c\n\u914d\u7f6e\u9ed8\u8ba4\u7684error\u9875\u9762\n\u5728src\\main\\resources\\static\u76ee\u5f55\u4e0b\u521b\u5efaerror\u76ee\u5f55,\u521b\u5efa\u5982\uff1a404.HTML,500.HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;404&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;404\u9519\u8bef\u9875\u9762&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n--------------------------------\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;500&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;500\u9519\u8bef\u9875\u9762&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\u518d\u6b21\u8bbf\u95ee\u4fbf\u4f1a\u770b\u5230500.HTML\u4e2d\u7684\u5185\u5bb9\uff08Controller\u4e2d\u6709int i = 1 / 0\uff09;\u5982\u679c\u8bbf\u95eehttp://localhost:8080/hello2\u7b49\u4f1a\u51fa\u73b0404\u9519\u8bef\u7684\u8def\u5f84\u4fbf\u4f1a\u770b\u5230404.HTML\u7684\u5185\u5bb9\u3002\n\u5373Spring Boot\u4f1a\u6839\u636e\u72b6\u6001\u7801\u53bb\u5bfb\u627e\u5bf9\u5e94\u7684\u9875\u9762\u6765\u66ff\u6362\u5176\u9ed8\u8ba4\u7684\u9519\u8bef\u9875\u3002\n\u9519\u8bef\u9875\u9762\u67e5\u627e\u987a\u5e8f\uff1a\u7cbe\u786e&gt;\u6a21\u7cca\uff0c\u52a8\u6001&gt;\u9759\u6001\nSpring Boot\u8fd8\u652f\u6301\u6a21\u7cca\u7684\u9519\u8bef\u9875\u5339\u914d\uff0c\u4f8b\u5982\u53ea\u5b9a\u4e49\u4e864xx.HTML\uff0c\u51fa\u73b04XX\u9519\u8bef\u65f6\uff0c\u90fd\u4f1a\u5c55\u793a4xx.HTML\u7684\u5185\u5bb9\u3002\n\u5f53\u7136\uff0c\u5982\u679c\u5b9a\u4e49\u4e86404.HTML\u548c4xx.HTML\u9875\u9762\uff0c\u51fa\u73b0404\u9519\u8bef\u65f6\uff0cSpring Boot\u4f1a\u4f18\u5148\u5c55\u793a404.HTML\u7684\u5185\u5bb9\u3002\n\u4ee5\u4e0a\u90fd\u662f\u4f7f\u7528\u9759\u6001\u9875\u9762(static\u76ee\u5f55\u4e0b)\u5c55\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662fSpring Boot\u8fd8\u652f\u6301\u52a8\u6001\u9875\u9762(templates\u76ee\u5f55\u4e0b),\u5982\uff1athymeleaf\u3001freemarker\u3002\n\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u4f7f\u7528thymeleaf\u6765\u81ea\u5b9a\u4e49\u9519\u8bef\u9875\u9762\n\n\u5bfc\u5165thymeleaf\u4f9d\u8d56\n&lt;dependency&gt;\n &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n\u5728src\\main\\resources\\templates\u76ee\u5f55\u4e0b\u521b\u5efaerror\u76ee\u5f55,\u5e76\u521b\u5efa\u81ea\u5b9a\u4e49\u9519\u8bef\u9875\n\u521b\u5efa\u5982\u4e0b3\u4e2a\u9875\u9762\n&lt;!--4xx.HTML--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;4xx&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;thymeleaf:4xx\u9875\u9762&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n-------------------------------------\n&lt;!--404.HTML--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;404&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;thymeleaf:404\u9875\u9762&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n-------------------------------------\n&lt;!--5xx.HTML--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;5xx&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;thymeleaf: 5xx\u9875\u9762&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\u4e0e\u9759\u6001\u9519\u8bef\u9875\u4e00\u6837\uff0c\u52a8\u6001\u9519\u8bef\u9875\u4e5f\u662f\u4f18\u5148\u5c55\u793a\u66f4\u4e3a\u7cbe\u786e\u7684\u72b6\u6001\u7801\u6240\u5bf9\u5e94\u7684\u9519\u8bef\u9875\u5185\u5bb9\u3002\n\u4f8b\uff1a\u5728\u5b58\u5728\u4ee5\u4e0a3\u4e2a\u52a8\u6001\u9519\u8bef\u9875\u65f6\uff0c\u5982\u679c\u51fa\u73b0404\u9519\u8bef\uff0c\u4f18\u5148\u5c55\u793a\u7684\u4e5f\u662f404.HTML\u7684\u5185\u5bb9\u3002\n\u6b64\u65f6\u5df2\u7ecf\u521b\u5efa\u4e86\u9759\u6001\u9519\u8bef\u9875\u548c\u52a8\u6001\u9519\u8bef\u9875\uff0c\u90a3\u4e48\u6b64\u65f6\u4f1a\u4f18\u5148\u5c55\u793a\u52a8\u6001\u9519\u8bef\u9875\u3002\n\n\n2. Spring Boot\u5f02\u5e38\u5904\u7406\u6e90\u7801\u5206\u6790\n\u6253\u5f00Spring Boot\u5f02\u5e38\u5904\u7406\u7684\u81ea\u52a8\u914d\u7f6e\u7c7borg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\n\u5176\u4e2d\u914d\u7f6e\u4e86DefaultErrorAttributes(\u9ed8\u8ba4\u9519\u8bef\u5c5e\u6027)\u3001DefaultErrorViewResolver(\u9ed8\u8ba4\u9519\u8bef\u89c6\u56fe\u89e3\u6790\u5668)\u7b49\u7b49\n\u4e3a\u4ec0\u4e48\u5728error\u76ee\u5f55\u4e0b\u521b\u5efa\u81ea\u5b9a\u4e49\u9519\u8bef\u9875\u4f1a\u88ab\u89e3\u6790\u5462\uff1f\n\u4e3a\u4ec0\u4e48\u9519\u8bef\u9875\u9762\u67e5\u627e\u987a\u5e8f\uff1a\u7cbe\u786e&gt;\u6a21\u7cca\uff0c\u52a8\u6001&gt;\u9759\u6001 \u5462\uff1f\n\u7b54\u6848\u5728DefaultErrorViewResolver\u7c7b\u4e2d\u3002\n//DefaultErrorViewResolver\u7c7b\n\n@Override\n    public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model) {\n        //status.value()\u8fd4\u56de\u7684\u662fint\u7c7b\u578b\u7684\u72b6\u6001\u7801\uff0cmodel\u662f\u5f02\u5e38\u6570\u636e\n        ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n        //\u5728\u9759\u6001\u8d44\u6e90\u8def\u5f84\u4e0b\u6ca1\u6709\u627e\u5230\u7cbe\u786e\u5bf9\u5e94\u7684\u9519\u8bef\u9875\u9762\u65f6\u518d\u5224\u65ad\u662f\u5426\u5b58\u5728\u6a21\u7cca\u5bf9\u5e94\u7684\u9519\u8bef\u9875\u9762\n        //SERIES_VIEWS\u4e2d\u53ea\u6709&quot;4xx&quot;\u548c&quot;5xx&quot;\n        if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {\n            //\u5b58\u5728\u6a21\u7cca\u5bf9\u5e94\u7684\u9519\u8bef\u9875\u9762\u65f6\uff0c\u518d\u6b21\u4f7f\u7528\u6a21\u7cca\u7684\u72b6\u6001\u7801\u8fdb\u884c\u5904\u7406\n            modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n        }\n        //\u5982\u679c\u7cbe\u786e\u7684\u548c\u6a21\u7cca\u7684\u9519\u8bef\u9875\u90fd\u4e0d\u5b58\u5728\uff0c\u4fbf\u4f7f\u7528\u81ea\u8eab\u9ed8\u8ba4\u7684\u9519\u8bef\u9875\u9762\n        return modelAndView;\n    }\n...\n\nprivate ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) {\n        String errorViewName = &quot;error/&quot; + viewName;\n        //\u5224\u65ad\u662f\u5426\u5b58\u5728\u52a8\u6001\u9875\u9762\n        TemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName,\n                this.applicationContext);\n        //\u5b58\u5728\u52a8\u6001\u9875\u9762\u5c31\u4f18\u5148\u4f7f\u7528\u52a8\u6001\u9875\u9762\n        if (provider != null) {\n            return new ModelAndView(errorViewName, model);\n        }\n        return resolveResource(errorViewName, model);\n    }\n\n\n        private ModelAndView resolveResource(String viewName, Map&lt;String, Object&gt; model) {\n        for (String location : this.resourceProperties.getStaticLocations()) {\n            try {\n                //\u67e5\u627e\u9759\u6001\u8d44\u6e90\u8def\u5f84 4\u4e2a \n                /*{ &quot;classpath:/META-INF/resources/&quot;,\n                &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; }*/\n                Resource resource = this.applicationContext.getResource(location);\n                resource = resource.createRelative(viewName + &quot;.html&quot;);\n                if (resource.exists()) {\n                    return new ModelAndView(new HtmlResourceView(resource), model);\n                }\n            }\n            catch (Exception ex) {\n            }\n        }\n        //\u5728\u9759\u6001\u8d44\u6e90\u8def\u5f84\u4e0b\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u9519\u8bef\u9875\u9762\u5c31\u8fd4\u56denull\n        return null;\n    }\n\n3. Spring Boot\u81ea\u5b9a\u4e49\u5f02\u5e38\u6570\u636e\n\u7ecf\u8fc7\u67e5\u770bSpring Boot\u5f02\u5e38\u5904\u7406\u7684\u81ea\u52a8\u914d\u7f6e\u7c7borg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\u53ef\u77e5DefaultErrorAttributes\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u5f02\u5e38\u6570\u636e\u5904\u7406\u903b\u8f91\u3002\n\u5305\u542b\u4e86\u4ee5\u4e0b\u5f02\u5e38\u6570\u636e:\n\ntimestamp - The time that the errors were extracted(\u51fa\u73b0\u9519\u8bef\u7684\u65f6\u95f4)\nstatus - The status code\uff08\u72b6\u6001\u7801\uff09\nerror - The error reason\uff08\u9519\u8bef\u539f\u56e0\uff09\nexception - The class name of the root exception (if configured)\uff08\u6839\u5f02\u5e38\u7684\u7c7b\u540d\uff08\u5982\u679c\u5df2\u914d\u7f6e\uff09\uff09\nmessage - The exception message\uff08\u5f02\u5e38\u6d88\u606f\uff09\nerrors - Any ObjectErrors from a BindingResult exception\uff08BindingResult\u5f02\u5e38\u4e2d\u7684\u4efb\u4f55ObjectError\uff09\ntrace - The exception stack trace\uff08\u5f02\u5e38\u5806\u6808\u8ddf\u8e2a\uff09\npath - The URL path when the exception was raised\uff08\u5f15\u53d1\u5f02\u5e38\u65f6\u7684URL\u8def\u5f84\uff09\n\u7f16\u5199\u81ea\u5b9a\u4e49\u9519\u8bef\u98755xx.HTML\u6765\u67e5\u770b\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;5xx&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;thymeleaf: 5xx\u9875\u9762&lt;/h2&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;path&lt;/td&gt;\n        &lt;td th:text=&quot;${path}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;timestamp&lt;/td&gt;\n        &lt;td th:text=&quot;${timestamp}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;message&lt;/td&gt;\n        &lt;td th:text=&quot;${message}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;error&lt;/td&gt;\n        &lt;td th:text=&quot;${error}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;status&lt;/td&gt;\n        &lt;td th:text=&quot;${status}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;exception&lt;/td&gt;\n        &lt;td th:text=&quot;${exception}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\u8bbf\u95ee\u7ed3\u679c:(\u8bbf\u95ee\u7684Controller\u4e2d\u6709by zero\u9519\u8bef)\n\u8bbf\u95ee\u7ed3\u679c\n\u4e3a\u4e86\u81ea\u5b9a\u4e49\u5f02\u5e38\u6570\u636e\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627fDefaultErrorAttributes\u7c7b\uff0c\u7136\u540e\u65b0\u589e\u6216\u91cd\u5199\u5176\u65b9\u6cd5\u3002\n/* \u6ce8\u518c\u5230spring\u4ee5\u66ff\u6362DefaultErrorAttributes\nErrorMvcAutoConfiguration\u4e2d\u6709\u6761\u4ef6\u5224\u65ad:\u5f53\u5b58\u5728ErrorAttributes.class(DefaultErrorAttributes\u5b9e\u73b0\u7684\u63a5\u53e3)\u65f6\uff0cDefaultErrorAttributes\u4e0d\u751f\u6548.\n...\n@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n    public DefaultErrorAttributes errorAttributes() {\n        return new DefaultErrorAttributes(this.serverProperties.getError().isIncludeException());\n    }\n*/\n@Component\npublic class MyErrorAttribute extends DefaultErrorAttributes {\n    @Override\n    public Map&lt;String, Object&gt; getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {\n        //\u62ff\u5230DefaultErrorAttributes\u7c7b\u4e2d\u6536\u96c6\u597d\u7684\u5f02\u5e38\u4fe1\u606f\n        Map&lt;String, Object&gt; map = super.getErrorAttributes(webRequest, includeStackTrace);\n        //\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5f02\u5e38\u4fe1\u606f\n        map.put(&quot;myerror&quot;, &quot;\u81ea\u5b9a\u4e49\u5f02\u5e38\u4fe1\u606f&quot;);\n        return map;\n}\n\n\u57285xx.HTML\u4e2d\u6dfb\u52a0\u4e00\u5217\n...\n&lt;h2&gt;thymeleaf: 500\u9875\u9762&lt;/h2&gt;\n...\n    &lt;tr&gt;\n        &lt;td&gt;myerror&lt;/td&gt;\n        &lt;td th:text=&quot;${myerror}&quot;&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n...\n\n\u8bbf\u95ee\u7ed3\u679c:(\u8bbf\u95ee\u7684Controller\u4e2d\u6709by zero\u9519\u8bef)\n\u8bbf\u95ee\u7ed3\u679c\n4. Spring Boot\u81ea\u5b9a\u4e49\u5f02\u5e38\u89c6\u56fe\n\u4e0e\u81ea\u5b9a\u4e49\u5f02\u5e38\u6570\u636e\u7c7b\u4f3c\uff0cSpring Boot\u5f02\u5e38\u5904\u7406\u7684\u81ea\u52a8\u914d\u7f6e\u7c7borg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\u4e2d\u5b9a\u4e49\u4e86DefaultErrorViewResolver\u7c7b\u4e2d\u7528\u4e8e\u5f02\u5e38\u89c6\u56fe\u5904\u7406\u3002\u8981\u81ea\u5b9a\u4e49\u5f02\u5e38\u89c6\u56fe\u5904\u7406\uff0c\u7ee7\u627fDefaultErrorViewResolver\u7c7b\uff0c\u7136\u540e\u65b0\u589e\u6216\u91cd\u5199\u5176\u65b9\u6cd5\u5c31\u884c\u4e86\u3002\n@Component\npublic class MyErrorViewResolver extends DefaultErrorViewResolver {\n    public MyErrorViewResolver(ApplicationContext applicationContext, ResourceProperties resourceProperties) {\n        super(applicationContext, resourceProperties);\n    }\n\n    @Override\n    public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model) {\n        //\u8fd9\u91cc\u7684model\u5c31\u662f\u5f02\u5e38\u6570\u636e\uff0c\u4f46\u662f\u5b83\u662f\u4e00\u4e2a\u4e0d\u53ef\u4fee\u6539\u7684map\uff0c\u8981\u5728\u8fd9\u4fee\u6539\u53ef\u4ee5new\u4e00\u4e2amap\uff0c\u5c06model\u7684\u6570\u636e\u590d\u5236\u8fdb\u6765\u518d\u6dfb\u52a0\u5230mv\u8fd4\u56de\n        ModelAndView mv = new ModelAndView();\n        mv.setViewName(&quot;xuxx&quot;);\n        mv.addAllObjects(model);\n        return mv;\n    }\n}\n\n\u65b0\u5efaxuxx.HTML\u76f4\u63a5\u653e\u5728src\\main\\resources\\templates\u76ee\u5f55\u4e0b\u5373\u53ef\uff08\u56e0\u4e3a\u81ea\u5b9a\u4e49\u7684MyErrorViewResolver\u4e2d\u8bbe\u7f6e\u7684ViewName\u4e0d\u5e26\u8def\u5f84\u4e86\uff0c\u53c8\u56e0\u4e3a\u662f\u7528thymeleaf\uff09\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;xuxx\u9875\u9762&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;xuxx: 5xx&lt;/h2&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;path&lt;/td&gt;\n        &lt;td th:text=\"${path}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;timestamp&lt;/td&gt;\n        &lt;td th:text=\"${timestamp}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;message&lt;/td&gt;\n        &lt;td th:text=\"${message}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;error&lt;/td&gt;\n        &lt;td th:text=\"${error}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;status&lt;/td&gt;\n        &lt;td th:text=\"${status}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;myerror&lt;/td&gt;\n        &lt;td th:text=\"${myerror}\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\u8bbf\u95ee\u7ed3\u679c\uff1a\n\u8bbf\u95ee\u7ed3\u679c\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring\u6ce8\u89e3-@ControllerAdvice\u7684\u4f7f\u7528", "date": "2020-05-05T02:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj10/", "text": "\u6839\u636e\u6e90\u7801\u4e2d\u7684\u4ecb\u7ecd\uff1a\n@ControllerAdvice\u662f\u4e00\u4e2a\u7279\u6b8a\u7684@Component\uff0c\u7528\u4e8e\u6807\u8bc6\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u88ab\u4ee5\u4e0b\u4e09\u79cd\u6ce8\u89e3\u6807\u8bc6\u7684\u65b9\u6cd5\uff1a@ExceptionHandler\uff0c@InitBinder\uff0c@ModelAttribute\uff0c\u5c06\u4f5c\u7528\u4e8e\u6240\u6709\u7684@Controller\u7c7b\u7684\u63a5\u53e3\u4e0a\u3002\n@ControllerAdvice\u7684\u529f\u80fd:\n\n\u5904\u7406\u5168\u5c40\u5f02\n\u9884\u8bbe\u5168\u5c40\u6570\u636e\n\u8bf7\u6c42\u53c2\u6570\u9884\u5904\u7406\n\n1. @ControllerAdvice\u5904\u7406\u5168\u5c40\u5f02\u5e38\n\u4f7f\u7528Spring\u65f6\uff0c\u540e\u7aef\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u5728\u524d\u7aef\u7684\u62a5\u9519\u63d0\u793a\u5bf9\u7528\u6237\u6765\u8bf4\u76f8\u5f53\u4e0d\u53cb\u597d\uff0c\u6240\u4ee5\u5e94\u8be5\u5bf9\u5f02\u5e38\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u65f6\u5bf9\u6bcf\u4e00\u4e2aController\u5355\u72ec\u8fdb\u884c\u5904\u7406\u8fc7\u4e8e\u91cd\u590d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528@ControllerAdvice\u5904\u7406\u5168\u5c40\u5f02\u5e38\n\u4f8b\u5982\uff1a\u5f53\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u8d85\u51fa\u9650\u65f6\uff0c\u524d\u7aef\u663e\u793a\u5982\u4e0b\n\n\u89e3\u51b3\uff1a\n@ControllerAdvice//@Controller\u7684\u589e\u5f3a\npublic class MyCustomException {\n    //\u914d\u7f6e\u8981\u62e6\u622a\u7684\u5f02\u5e38\n    @ExceptionHandler(MaxUploadSizeExceededException.class)\n    //\u5176\u4e2d\u7684\u53c2\u6570\u4e0eController\u7684\u53c2\u6570\u76f8\u4f3c\n    public void myexception(MaxUploadSizeExceededException exception, HttpServletResponse response) throws IOException {\n        response.setContentType(&quot;text/html:charset=utf-8&quot;);\n        PrintWriter out = response.getWriter();\n        out.write(&quot;\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u8d85\u51fa\u9650\u5236\uff0c\u8bf7\u91cd\u8bd5&quot;);\n        out.flush();\n        out.close();\n    }\n}\n\n\u6b64\u65f6\u518d\u51fa\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u65f6\uff0c\u524d\u7aef\u4fbf\u4f1a\u663e\u793a\u6307\u5b9a\u7684\u5185\u5bb9\n\n\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u8d85\u51fa\u9650\u5236\uff0c\u8bf7\u91cd\u8bd5\n\u4f7f\u7528thymeleaf\u81ea\u5b9a\u4e49\u9519\u8bef\u9875\u9762\n\n\u5f15\u5165thymeleaf\u4f9d\u8d56\n\n&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n\u521b\u5efa\u9519\u8bef\u9875\u9762\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\u9519\u8bef\u9875&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div th:text=&quot;${error}&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\u7f16\u5199\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u7c7b\n\n@ControllerAdvice\npublic class MyCustomException {\n    @ExceptionHandler(MaxUploadSizeExceededException.class)\n    public ModelAndView myexception(MaxUploadSizeExceededException e) throws IOException {\n        ModelAndView mv = new ModelAndView(&quot;myerror&quot;);\n        mv.addObject(&quot;error&quot;, &quot;\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u8d85\u51fa\u9650\u5236&quot;);\n        return mv;\n    }\n}\n\n\n\u6548\u679c\n\n\u4e0a\u4f20\u6587\u4ef6\u5927\u5c0f\u8d85\u51fa\u9650\u5236\uff0c\u8bf7\u91cd\u8bd5\n\n2. @ControllerAdvice\u9884\u8bbe\u5168\u5c40\u6570\u636e\n\n\u7f16\u5199\u9884\u8bbe\u5168\u5c40\u6570\u636e\u7c7b\n@ControllerAdvice\npublic class GlobalData {\n    @ModelAttribute(value = &quot;info&quot;)\n    public Map&lt;String, Object&gt; mydata() {\n        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;name&quot;, &quot;xuxx&quot;);\n        map.put(&quot;addr&quot;, &quot;\u56db\u5ddd&quot;);\n        return map;\n    }\n}\n\n\u5728\u8fd9\u4e2a\u7c7b\u4e2d\uff0c\u4f7f\u7528\u4e86@ModelAttribute\u6ce8\u89e3\uff0c\u6b64\u6ce8\u89e3\u5c06\u65b9\u6cd5\u8fd4\u56de\u503c\u6dfb\u52a0\u5230Model\u5bf9\u8c61\uff0c\u8981\u4f7f\u7528\u5b58\u5165\u7684\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u4eceModel\u5bf9\u8c61\u4e2d\u53d6\u51fa\u3002\n\n\u4f7f\u7528\u9884\u8bbe\u5168\u5c40\u6570\u636e\n@RestController\npublic class HelloController {\n    @GetMapping(&quot;/hello&quot;)\n    public void hello(Model model) {\n        Map&lt;String, Object&gt; map = model.asMap();\n        Set&lt;String&gt; keySet = map.keySet();\n        for (String kay : keySet) {\n            System.out.println(kay + &quot; : &quot; + map.get(kay));\n        }\n        return;\n    }\n}\n\n\u63a7\u5236\u53f0\u8f93\u51fa\ninfo : {name=xuxx, addr=\u56db\u5ddd}\n\n\u8865\u5145\uff1a\n@ModelAttribute\u6ce8\u89e3\n\u4f5c\u7528\uff1a\n\n\u51fa\u73b0\u5728\u65b9\u6cd5\u4e0a:\u8868\u793a\u5f53\u524d\u65b9\u6cd5\u4f1a\u5728\u63a7\u5236\u5668\u65b9\u6cd5\u6267\u884c\u524d\u7ebf\u6267\u884c\u3002\n\u51fa\u73b0\u5728\u53c2\u6570\u4e0a:\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e\u7ed9\u53c2\u6570\u8d4b\u503c\u3002\n\n\u5e94\u7528\u573a\u666f\uff1a\n   \u5f53\u63d0\u4ea4\u8868\u5355\u6570\u636e\u4e0d\u662f\u5b8c\u6574\u7684\u5b9e\u4f53\u6570\u636e\u65f6,\u4fdd\u8bc1\u6ca1\u6709\u63d0\u4ea4\u7684\u5b57\u6bb5\u4f7f\u7528\u6570\u636e\u5e93\u539f\u6765\u7684\u6570\u636e\u3002\n\n\n3.  @ControllerAdvice\u8bf7\u6c42\u53c2\u6570\u9884\u5904\u7406\n\n\u95ee\u9898\u6f14\u793a\n\u7f16\u5199\u5b9e\u4f53\u7c7b\n@Data\npublic class Book {\n    private String name;\n    private Double price;\n}\n\n@Data\npublic class Auther {\n    private String name;\n    private Integer age;\n}\n\n\u7f16\u5199Controller\n@RestController\npublic class BookController {\n    @PostMapping(&quot;/book&quot;)\n    public void addbook(Book book,Auther auther) {\n        System.out.println(book);\n        System.out.println(auther);\n    }\n}\n\n\u53d1\u9001\u8bf7\u6c42\n\u63a7\u5236\u53f0\uff1a\nBook{name=&#39;\u4e66\u540d,\u4f5c\u8005\u540d&#39;, price=100.0}\nAuther{name=&#39;\u4e66\u540d,\u4f5c\u8005\u540d&#39;, age=21}\n\n\u8fd9\u662f\u7531\u4e8e\u4e24\u4e2a\u5bf9\u8c61\u5c5e\u6027\u540d\u76f8\u540c(\u6b64\u5904\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u95ee\u9898\uff0c\u5b9e\u9645\u5f00\u53d1\u65f6\u8981\u6ce8\u610f)\u5bfc\u81f4\u7684\u3002\n\n\u89e3\u51b3\u95ee\u9898\n\u6539\u5199Controller\n\n@RestController\npublic class BookController {\n    @PostMapping(\"/book\")\n    public void addbook(@ModelAttribute(\"b\") Book book,\n                        @ModelAttribute(\"a\") Auther auther) {\n        System.out.println(book);\n        System.out.println(auther);\n    }\n}\n\u7f16\u5199ControllerAdvice\u7c7b\n\n@ControllerAdvice\npublic class GlobalData {\n    @InitBinder(\"a\")\n    public void initA(WebDataBinder binder) {\n        binder.setFieldDefaultPrefix(\"a.\");\n    }\n\n    @InitBinder(\"b\")\n    public void initB(WebDataBinder binder) {\n        binder.setFieldDefaultPrefix(\"b.\");\n    }\n}\nWebDataBinder\u5bf9\u8c61\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u4eceweb request\u91cc\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u6307\u7684web\u8bf7\u6c42\uff0c\u5e76\u4e0d\u4e00\u5b9a\u5c31\u662fServletRequest\u8bf7\u6c42\u54df~\uff09\u628aweb\u8bf7\u6c42\u7684parameters\u7ed1\u5b9a\u5230JavaBean\u4e0a\u3002\nWebDataBinder\u5bf9\u8c61\u8fd8\u6709\u8bb8\u591a\u65b9\u6cd5~~\nController\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c01\u88c5\u540e\u7684\u666e\u901aJava\u7c7b\u578b\u3002\u82e5\u8fd9\u4e2a\u666e\u901aJava\u7c7b\u578b\u6ca1\u6709\u58f0\u660e\u4efb\u4f55\u6ce8\u89e3\uff0c\u5219\u610f\u5473\u7740\u5b83\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u90fd\u9700\u8981\u5230Request\u4e2d\u53bb\u67e5\u627e\u5bf9\u5e94\u7684\u8bf7\u6c42\u53c2\u6570\u3002\n\n\n\u53d1\u9001\u8bf7\u6c42\n\n\u63a7\u5236\u53f0\uff1a\nBook{name=&#39;\u4e66\u540d&#39;, price=100.0}\n   Auther{name=&#39;\u4f5c\u8005\u540d&#39;, age=21}\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring Boot\u6587\u4ef6\u4e0a\u4f20", "date": "2020-05-05T00:20:00-00.00", "path": "/Xuxx_Blogs/archives/bj09/", "text": "\u5728Spring Boot\u4e2d\u8fdb\u884c\u6587\u4ef6\u4e0a\u4f20\u53ea\u9700\u8981\u989d\u5916\u5f15\u5165web\u4f9d\u8d56\uff0c\u4e0d\u518d\u9700\u8981\u50cfSpring MVC\u90a3\u6837\u989d\u5916\u5f15\u5165commons-fileupload\u548ccommons-io\u4f9d\u8d56\u3002\n\u5728Spring Boot\u4e2d,\u9ed8\u8ba4\u4f7f\u7528StandardServletMultipartResolver(\u652f\u6301servlet3.0\u4ee5\u540e\u7684\u7248\u672c)\u4ee3\u66ffCommonsMultipartResolver(\u517c\u5bb9\u65e9\u671f\u7684servlet)\u89e3\u6790Multipart\u8bf7\u6c42\uff0c\u5982\u679c\u5fc5\u987b\u4f7f\u7528CommonsMultipartResolver\u5219\u9700\u8981\u81ea\u5df1\u6dfb\u52a0commons-fileupload\u548ccommons-io\u4f9d\u8d56\u3002\n\u56de\u987e\n@Controller\n@RequestMapping(&quot;/user&quot;)\npublic class FileUploadControll {\n    /**\n     * \u4f20\u7edf\u6587\u4ef6\u4e0a\u4f20\n     *\n     * @return\n     */\n    @RequestMapping(&quot;/fileupload01&quot;)\n    public String fileupload01(HttpServletRequest request) throws Exception {\n        System.out.println(&quot;fileupload01\u65b9\u6cd5\u6267\u884c\u4e86---\u4f20\u7edf\u6587\u4ef6\u4e0a\u4f20&quot;);\n        //\u4f7f\u7528fileupload\u7ec4\u4ef6\u5b8c\u6210\u6587\u4ef6\u4e0a\u4f20\n        //\u6307\u5b9a\u4e0a\u4f20\u4f4d\u7f6e\uff08\u8def\u5f84\uff09\n        String path = request.getSession().getServletContext().getRealPath(&quot;/uploads/&quot;);\n        //\u5224\u65ad\u8be5\u8def\u5f84\u662f\u5426\u5b58\u5728\n        File file = new File(path);\n        //\u5982\u679c\u4e0d\u5b58\u5728\n        if (!file.exists()) {\n            //\u521b\u5efa\u8be5\u6587\u4ef6\u5939\n            file.mkdirs();\n        }\n        //\u89e3\u6790request\u5bf9\u8c61\uff0c\u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\u9879            \u78c1\u76d8\u6587\u4ef6\u9879\u76ee\u5de5\u5382\n        DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();\n        ServletFileUpload upload = new ServletFileUpload(fileItemFactory);\n        //\u89e3\u6790request\n        List&lt;FileItem&gt; fileItems = upload.parseRequest(request);\n        //\u904d\u5386\n        for (FileItem fileItem : fileItems) {\n            //\u8fdb\u884c\u5224\u65ad\uff0c\u5f53\u524d\u7684fileItem\u5bf9\u8c61\u662f\u5426\u662f\u4e0a\u4f20\u6587\u4ef6\u9879\n            if (fileItem.isFormField()) {\n                //\u662f\u666e\u901a\u8868\u5355\u9879\n            } else {\n                //\u662f\u4e0a\u4f20\u6587\u4ef6\u9879\n                //\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u540d\u79f0\n                String fileName = fileItem.getName();\n                //\u628a\u6587\u4ef6\u540d\u79f0\u8bbe\u7f6e\u4e3a\u552f\u4e00\u7684\n                String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);\n                fileName = uuid + &quot;_&quot; + fileName;\n                //\u5b8c\u6210\u4e0a\u4f20\n                fileItem.write(new File(path, fileName));\n                //\u5220\u9664\u4e34\u65f6\u6587\u4ef6\n                fileItem.delete();\n            }\n        }\n        return &quot;success&quot;;\n    }\n\n\n    /**\n     * springmvc\u6587\u4ef6\u4e0a\u4f20\n     * \u9700\u8981commons-fileupload\u548ccommons-io\u4f9d\u8d56\n     * @param request\n     * @return\n     */\n    @RequestMapping(&quot;/fileupload02&quot;)\n    public String fileupload02(HttpServletRequest request, MultipartFile upload) throws IOException {\n        System.out.println(&quot;fileupload02\u65b9\u6cd5\u6267\u884c\u4e86---springmvc\u6587\u4ef6\u4e0a\u4f20&quot;);\n        //\u6307\u5b9a\u4e0a\u4f20\u4f4d\u7f6e\uff08\u8def\u5f84\uff09\n        String path = request.getSession().getServletContext().getRealPath(&quot;/uploads/&quot;);\n        //\u5224\u65ad\u8be5\u8def\u5f84\u662f\u5426\u5b58\u5728\n        File file = new File(path);\n        //\u5982\u679c\u4e0d\u5b58\u5728\n        if (!file.exists()) {\n            //\u521b\u5efa\u8be5\u6587\u4ef6\u5939\n            file.mkdirs();\n        }\n\n        //\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u540d\u79f0\n        String filename = upload.getOriginalFilename();\n        //\u628a\u6587\u4ef6\u540d\u79f0\u8bbe\u7f6e\u4e3a\u552f\u4e00\u7684\n        String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);\n        filename = uuid + &quot;_&quot; + filename;\n        //\u5b8c\u6210\u4e0a\u4f20\n        upload.transferTo(new File(path, filename));\n        return &quot;success&quot;;\n    }\n\n    /**\n     * springmvc\u8de8\u670d\u52a1\u5668\u4e0a\u4f20\n     * \u9700\u8981\u989d\u5916\u7684\u4e24\u4e2a\u4f9d\u8d56:jersey-core\u548cjersey-client\n     */\n    @RequestMapping(&quot;/fileupload03&quot;)\n    public String fileupload03(MultipartFile upload) throws Exception {\n        System.out.println(&quot;fileupload03\u65b9\u6cd5\u6267\u884c\u4e86---springmvc\u8de8\u670d\u52a1\u5668\u4e0a\u4f20&quot;);\n        //\u8bbe\u7f6e\u8981\u4e0a\u4f20\u7684\u6587\u4ef6\u670d\u52a1\u5668\u7684\u8def\u5f84\n        String path = &quot;http://localhost:8081/fileupload/uploads/&quot;;\n        //\u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\u79f0\n        String filename = upload.getOriginalFilename();\n        //\u628a\u6587\u4ef6\u540d\u79f0\u8bbe\u7f6e\u4e3a\u552f\u4e00\n        String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);\n        filename = uuid + &quot;_&quot; + filename;\n        // \u521b\u5efa\u5ba2\u6237\u7aef\u7684\u5bf9\u8c61\n        Client client = Client.create();\n        // \u548c\u56fe\u7247\u670d\u52a1\u5668\u8fdb\u884c\u8fde\u63a5\n        WebResource webResource = client.resource(path + filename);\n        // \u4e0a\u4f20\u6587\u4ef6\n        webResource.put(upload.getBytes());\n        return &quot;success&quot;;\n    }\n}\n\n1. \u4f7f\u7528form\u8868\u5355\u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\n1.1 \u7f16\u5199HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;fileupload_form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;\u63d0\u4ea4&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n1.2 \u7f16\u5199Controller\n@RestController\npublic class FileUploadController {\n\n    //\u6309\u65e5\u671f\u5206\u7c7b\n    SimpleDateFormat sdf = new SimpleDateFormat(&quot;/yyyy/MM/dd/&quot;);\n\n    /**\n     * \u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\uff0c\u8fd4\u56de\u4e0a\u4f20\u6587\u4ef6\u7684URL\n     */\n    @PostMapping(&quot;/upload&quot;)\n    public String upload(MultipartFile file, HttpServletRequest request) {\n        String format = sdf.format(new Date());\n        String realpath = request.getServletContext().getRealPath(&quot;/img&quot;) + format;\n        File folder = new File(realpath);\n        if (!folder.exists()) {\n            folder.mkdirs();\n        }\n        //\u9632\u6b62\u6587\u4ef6\u91cd\u540d\n        String oldName = file.getOriginalFilename();\n        String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(&quot;.&quot;));\n        try {\n            //\u4fdd\u5b58\u4e0a\u4f20\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4f4d\u7f6e\n            file.transferTo(new File(folder, newName));\n            String url = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + &quot;/img&quot; + format + newName;\n            //  http://localhost:8080/img/2020/01/05/d0a64514-b990-4bf6-8297-563f66ca3530.jpg\n            return url;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return &quot;error&quot;;\n    }\n}\n\n2. \u4f7f\u7528ajax\u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\n2.1 \u7f16\u5199HTML\n\u4e3a\u65b9\u4fbf\u64cd\u4f5c\uff0c\u4f7f\u7528JQuery.js\n\n\u8865\u5145\uff1aXMLHttpRequest Level2\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3FormData. \u5229\u7528FormData\u5bf9\u8c61,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7JavaScript\u7528\u4e00\u4e9b\u952e\u503c\u5bf9\u6765\u6a21\u62df\u4e00\u7cfb\u5217\u8868\u5355\u63a7\u4ef6,\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528XMLHttpRequest\u7684send()\u65b9\u6cd5\u6765\u5f02\u6b65\u7684\u63d0\u4ea4\u8fd9\u4e2a\"\u8868\u5355\".\n\u6bd4\u8d77\u666e\u901a\u7684ajax,\u4f7f\u7528FormData\u7684\u6700\u5927\u4f18\u70b9\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5f02\u6b65\u4e0a\u4f20\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;fileupload_ajax&lt;/title&gt;\n    &lt;script src=&quot;jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n&lt;input type=&quot;file&quot; id=&quot;file&quot;&gt;\n&lt;input type=&quot;button&quot; value=&quot;\u4e0a\u4f20&quot; onclick=&quot;uploadFile()&quot;&gt;\n&lt;script&gt;\n    function uploadFile() {\n        var file = $(&quot;#file&quot;)[0].files[0];//files\u662f\u6587\u4ef6\u6570\u7ec4\n        var formData = new FormData();//html5\n        formData.append(&quot;file&quot;, file);\n        $.ajax({\n            type: &quot;post&quot;,\n            url: &quot;/upload&quot;,\n            processData: false,//\u662f\u5426\u8981\u4e0a\u4f20\u7684\u6570\u636e\u5904\u7406\u4e3a\u5bf9\u8c61\n            contentType: false,//\u53ef\u80fd\u7834\u574f\u5206\u9694\u7b26\uff0c\u4e0d\u8ba9jquery\u8bbe\u7f6e\u8bf7\u6c42\u5934\n            data: formData,\n            success: function (msg) {\n                $(&quot;#result&quot;).html(msg);\n            }\n        });\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n2.2 \u7f16\u5199Controller\n@RestController\npublic class FileUploadController {\n\n    //\u6309\u65e5\u671f\u5206\u7c7b\n    SimpleDateFormat sdf = new SimpleDateFormat(&quot;/yyyy/MM/dd/&quot;);\n\n    /**\n     * \u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\uff0c\u8fd4\u56de\u4e0a\u4f20\u6587\u4ef6\u7684URL\n     */\n    @PostMapping(&quot;/upload&quot;)\n    public String upload(MultipartFile file, HttpServletRequest request) {\n        String format = sdf.format(new Date());\n        String realpath = request.getServletContext().getRealPath(&quot;/img&quot;) + format;\n        File folder = new File(realpath);\n        if (!folder.exists()) {\n            folder.mkdirs();\n        }\n        //\u9632\u6b62\u6587\u4ef6\u91cd\u540d\n        String oldName = file.getOriginalFilename();\n        String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(&quot;.&quot;));\n        try {\n            //\u4fdd\u5b58\u4e0a\u4f20\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4f4d\u7f6e\n            file.transferTo(new File(folder, newName));\n            String url = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + &quot;/img&quot; + format + newName;\n            //  http://localhost:8080/img/2020/01/05/d0a64514-b990-4bf6-8297-563f66ca3530.jpg\n            return url;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return &quot;error&quot;;\n    }\n}\n\n3. \u591a\u6587\u4ef6\u4e0a\u4f20\n\u76f8\u8f83\u4e8e\u5355\u4e2a\u6587\u4ef6\u4e0a\u4f20\uff0c\u591a\u6587\u4ef6\u4e0a\u4f20\u4e0a\u4f20\u65f6\uff0c\u540e\u7aef\u53ef\u4ee5\u7528\u591a\u4e2aMultipartFile\u6765\u63a5\u6536\uff0c\u6216\u8005\u76f4\u63a5\u7528MultipartFile\u6570\u7ec4\u6765\u63a5\u6536\u3002\n3.1 \u7f16\u5199HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;fileupload_form_02&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=&quot;/uploads&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; multiple&gt;&lt;!--multiple\u8868\u793a\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u6587\u4ef6--&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;\u63d0\u4ea4&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\u5982\u679c\u4f7f\u7528ajax,\u53ef\u4ee5\u5411FormData\u591aappend\u51e0\u4e2a\u6587\u4ef6\uff08name\u5c5e\u6027\u4e0d\u8981\u76f8\u540c\uff09\uff0c\u7136\u540e\u5728Controller\u4e2d\u4f7f\u7528\u591a\u4e2aMultipartFile\u6765\u63a5\u6536\u3002\n3.2 \u7f16\u5199Controller\n@RestController\npublic class FileUploadController {\n\n    SimpleDateFormat sdf = new SimpleDateFormat(&quot;/yyyy/MM/dd/&quot;);\n\n    /**\n     * \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\n     * @param files\n     * @param request\n     * @return\n     */\n    @PostMapping(&quot;/uploads&quot;)\n    public String uploads(MultipartFile[] files, HttpServletRequest request) {\n        String format = sdf.format(new Date());\n        String realpath = request.getServletContext().getRealPath(&quot;/img&quot;) + format;\n        File folder = new File(realpath);\n        if (!folder.exists()) {\n            folder.mkdirs();\n        }\n        String url = null;\n        for (MultipartFile file : files) {\n            String oldName = file.getOriginalFilename();\n            String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(&quot;.&quot;));\n            try {\n                file.transferTo(new File(folder, newName));\n                url = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + &quot;/img&quot; + format + newName;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(url);\n        return &quot;success&quot;;\n    }\n}\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "SpringBoot\u6574\u5408Freemarker", "date": "2020-05-04T00:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj04/", "text": "\u4e00.\u57fa\u672c\u6b65\u9aa4\n\n\u6dfb\u52a0pom\u4f9d\u8d56\n\u5728application.yml\u4e2d\u6dfb\u52a0\u76f8\u5173\u914d\u7f6e\n\u521b\u5efafreemarker\u6a21\u677f\n\u521b\u5efa\u63a7\u5236\u5c42\n\u6d4b\u8bd5\u8bbf\u95ee\n\n1. \u6dfb\u52a0pom\u4f9d\u8d56\n&lt;!-- springboot\u6574\u5408freemarker --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n2. \u5728application.yml\u4e2d\u6dfb\u52a0\u76f8\u5173\u914d\u7f6e\n\n# \u914d\u7f6efreemarker\nspring:\n  freemarker:\n    # \u8bbe\u7f6e\u6a21\u677f\u540e\u7f00\u540d \u9ed8\u8ba4.ftl (\u73b0\u5df2\u6539\u4e3aftlh)\n    #suffix: .ftlh\n    # \u8bbe\u7f6e\u6587\u6863\u7c7b\u578b  \u9ed8\u8ba4 text/html\n    #content-type: text/html\n    # \u8bbe\u7f6e\u9875\u9762\u7f16\u7801\u683c\u5f0f  \u9ed8\u8ba4 UTF-8\n    #charset: UTF-8\n    # \u8bbe\u7f6e\u9875\u9762\u7f13\u5b58  \u9ed8\u8ba4false\n    #cache: false\n    # \u8bbe\u7f6eftl\u6587\u4ef6\u8def\u5f84 \u9ed8\u8ba4classpath:/templates\n    #template-loader-path:\n    # - classpath:/templates\n\n  # \u8bbe\u7f6e\u9759\u6001\u6587\u4ef6\u8def\u5f84\uff0cjs,css\u7b49\n  mvc:\n    static-path-pattern: /static/**\n3. \u521b\u5efafreemarker\u6a21\u677f\n\u76ee\u5f55\uff1asrc/main/resources \u521b\u5efatemplates\u6587\u4ef6\u5939\uff0c\u6587\u4ef6\u5939\u91cc\u65b0\u5efafreemarker.ftlh\u6587\u4ef6\n&lt;!DOCTYPE&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;freemark&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello ${name} from resource freemark!&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n4. \u521b\u5efa\u63a7\u5236\u5c42\n@Controller\n@RequestMapping(value = &quot;/freemarker&quot;)\npublic class FreemarkerAction {\n    /**\n     * \u8df3\u8f6cfreemarker\u9875\u9762\n     */\n    @RequestMapping(value = &quot;/toDemo&quot;)\n    public String toDemo(Model model) {\n        model.addAttribute(&quot;name&quot;, &quot;Xuxx&quot;);\n        return &quot;freemarker&quot;;\n    }\n}\n\n5. \u6d4b\u8bd5\u8bbf\u95ee\n\u542f\u52a8\u9879\u76ee\uff0c\u8f93\u5165http://localhost:8080/freemarker/toDemo\n\u4e8c.FreeMarker\u5e38\u7528\u6307\u4ee4\n1.if, else, elseif\n\u8bed\u6cd5\n&lt;#if \u6761\u4ef6&gt;...\n    &lt;#elseif \u6761\u4ef6&gt;...\n    &lt;#elseif \u6761\u4ef6&gt;...\n    &lt;#else&gt;...\n&lt;/#if&gt;\n\n\u7528\u4f8b\n&lt;#if user.gender==1&gt;\u7537\n    &lt;#elseif user.gender==0&gt;\u5973\n    &lt;#else&gt;\u672a\u77e5\n&lt;/#if&gt;\n\n2.switch, case, default, break\n\u8bed\u6cd5\n&lt;#switch value&gt;\n  &lt;#case refValue1&gt;\n    ...\n    &lt;#break&gt;\n  &lt;#case refValue2&gt;\n    ...\n    &lt;#break&gt;\n  &lt;#case refValueN&gt;\n    ...\n    &lt;#break&gt;\n  &lt;#default&gt;\n    ...\n&lt;/#switch&gt;\n\n\u7528\u4f8b\n&lt;#switch user.gender&gt;\n    &lt;#case 1&gt;\u7537&lt;#break&gt;\n    &lt;#case 0&gt;\u5973&lt;#break&gt;\n    &lt;#default&gt;\u672a\u77e5\n&lt;/#switch&gt;\n\n3.list, break\n\u8bed\u6cd5\n&lt;#list sequence as item&gt;\n    ...\n    &lt;#if item = &quot;spring&quot;&gt;&lt;#break&gt;&lt;/#if&gt;\n    ...\n&lt;/#list&gt;\n\n\u5173\u952e\u5b57\n\nitem_index:\u662flist\u5f53\u524d\u503c\u7684\u4e0b\u6807\nitem_has_next:\u5224\u65adlist\u662f\u5426\u8fd8\u6709\u503c\n\n\u7528\u4f8b\n\n&lt;#assign seq = [\"winter\", \"spring\", \"summer\", \"autumn\"]&gt;\n&lt;#list seq as x&gt;\n  ${x_index + 1}. ${x}&lt;#if x_has_next&gt;,&lt;/#if&gt;\n&lt;/#list&gt;\n\u8f93\u51fa\n\nwinter,\n\nspring,\n\nsummer,\n\nautumn  \n\n\n\n4.include\n\u8bed\u6cd5\n&lt;#include filename&gt;\nor\n&lt;#include filename options&gt;\n\noptions\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\n\nencoding=\u201dGBK\u201d \u7f16\u7801\u683c\u5f0f\nparse=true \u662f\u5426\u4f5c\u4e3aftl\u8bed\u6cd5\u89e3\u6790,\u9ed8\u8ba4\u662ftrue\uff0cfalse\u5c31\u662f\u4ee5\u6587\u672c\u65b9\u5f0f\u5f15\u5165.\u6ce8\u610f\u5728ftl\u6587\u4ef6\u91cc\u5e03\u5c14\u503c\u90fd\u662f\u76f4\u63a5\u8d4b\u503c\u7684\u5982parse=true,\u800c\u4e0d\u662fparse=\u201dtrue\u201d\n\n\u7528\u4f8b\n/common/copyright.ftl\u5305\u542b\u5185\u5bb9\nCopyright 2001-2002 ${me}&lt;br&gt;\nAll rights reserved.\n\n\u6a21\u677f\u6587\u4ef6\n&lt;#assign me = &quot;Juila Smith&quot;&gt;\n&lt;h1&gt;Some test&lt;/h1&gt;\n&lt;p&gt;Yeah.\n&lt;hr&gt;\n&lt;#include &quot;/common/copyright.ftl&quot; encoding=\u201dGBK\u201d&gt;\n\n\u8f93\u51fa\u7ed3\u679c\n&lt;h1&gt;Some test&lt;/h1&gt;\n&lt;p&gt;Yeah.\n&lt;hr&gt;\nCopyright 2001-2002 Juila Smith\nAll rights reserved.\n\n5.Import\n\u8bed\u6cd5\n&lt;#import path as hash&gt;\n\n\u7c7b\u4f3c\u4e8ejava\u91cc\u7684import,\u5b83\u5bfc\u5165\u6587\u4ef6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u5f53\u524d\u6587\u4ef6\u91cc\u4f7f\u7528\u88ab\u5bfc\u5165\u6587\u4ef6\u91cc\u7684\u5b8f\u7ec4\u4ef6\n\u7528\u4f8b\n\u5047\u8bbemylib.ftl\u91cc\u5b9a\u4e49\u4e86\u5b8fcopyright\u90a3\u4e48\u6211\u4eec\u5728\u5176\u4ed6\u6a21\u677f\u9875\u9762\u91cc\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\n\n&lt;#import \"/libs/mylib.ftl\" as my&gt;\n&lt;@my.copyright date=\"1999-2002\"/&gt;\n\"my\"\u5728freemarker\u91cc\u88ab\u79f0\u4f5cnamespace\n6.compress\n\u8bed\u6cd5\n&lt;#compress&gt;\n  ...\n&lt;/#compress&gt;\n\n\u7528\u6765\u538b\u7f29\u7a7a\u767d\u7a7a\u95f4\u548c\u7a7a\u767d\u7684\u884c\n\u7528\u4f8b\n&lt;#assign x = &quot;    moo  \\n\\n   &quot;&gt;\n(&lt;#compress&gt;\n  1 2  3   4    5\n  ${moo}\n  test only\n  I said, test only\n&lt;/#compress&gt;)\n\n\u8f93\u51fa\n(1 2 3 4 5\nmoo\ntest only\nI said, test only)\n\n7.escape, noescape\n\u8bed\u6cd5\n&lt;#escape identifier as expression&gt;\n  ...\n  &lt;#noescape&gt;...&lt;/#noescape&gt;\n  ...\n&lt;/#escape&gt;\n\n\u7528\u4f8b\n\u4e3b\u8981\u4f7f\u7528\u5728\u76f8\u4f3c\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u8f93\u51fa\uff0c\u6bd4\u5982\u67d0\u4e00\u4e2a\u6a21\u5757\u7684\u6240\u6709\u5b57\u7b26\u4e32\u8f93\u51fa\u90fd\u5fc5\u987b\u662fhtml\u5b89\u5168\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u8868\u8fbe\u5f0f\n&lt;#escape x as x?html&gt;\n  First name: ${firstName}\n  &lt;#noescape&gt;Last name: ${lastName}&lt;/#noescape&gt;\n  Maiden name: ${maidenName}\n&lt;/#escape&gt;\n\n\u76f8\u540c\u8868\u8fbe\u5f0f\nFirst name: ${firstName?html}\n  Last name: ${lastName }\n  Maiden name: ${maidenName?html}\n\n8.assign\n\u8bed\u6cd5\n&lt;#assign name=value&gt;\nor\n&lt;#assign name1=value1 name2=value2 ... nameN=valueN&gt;\nor\n&lt;#assign same as above... in namespacehash&gt;\nor\n&lt;#assign name&gt;\n  capture this\n&lt;/#assign&gt;\nor\n&lt;#assign name in namespacehash&gt;\n  capture this\n&lt;/#assign&gt;\n\n\u7528\u4f8b\n\u751f\u6210\u53d8\u91cf,\u5e76\u4e14\u7ed9\u53d8\u91cf\u8d4b\u503c\n\u7ed9seasons\u8d4b\u4e88\u5e8f\u5217\u503c\n&lt;#assign seasons = [&quot;winter&quot;, &quot;spring&quot;, &quot;summer&quot;, &quot;autumn&quot;]&gt;\n\n\u7ed9\u53d8\u91cftest\u52a01\n&lt;#assign test = test + 1&gt;\n\n\u7ed9my namespage \u8d4b\u4e88\u4e00\u4e2a\u53d8\u91cfbgColor,\u4e0b\u9762\u53ef\u4ee5\u901a\u8fc7my.bgColor\u6765\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf\n&lt;#import &quot;/mylib.ftl&quot; as my&gt;\n&lt;#assign bgColor=&quot;red&quot; in my&gt;\n\n\u5c06\u4e00\u6bb5\u8f93\u51fa\u7684\u6587\u672c\u4f5c\u4e3a\u53d8\u91cf\u4fdd\u5b58\u5728x\u91cc\n\u4e0b\u9762\u7684\u9634\u5f71\u90e8\u5206\u8f93\u51fa\u7684\u6587\u672c\u5c06\u88ab\u8d4b\u503c\u7ed9x\n&lt;#assign x&gt;\n&lt;#list [&quot;\u661f\u671f\u4e00&quot;, &quot;\u661f\u671f\u4e8c&quot;, &quot;\u661f\u671f\u4e09&quot;, &quot;\u661f\u671f\u56db&quot;, &quot;\u661f\u671f\u4e94&quot;, &quot;\u661f\u671f\u516d&quot;, &quot;\u661f\u671f\u5929&quot;] as n&gt;\n${n}\n&lt;/#list&gt;\n&lt;/#assign&gt;\n${x}\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u4ea7\u751f\u5982\u4e0b\u8f93\u51fa:\u661f\u671f\u4e00 \u661f\u671f\u4e8c \u661f\u671f\u4e09 \u661f\u671f\u56db \u661f\u671f\u4e94 \u661f\u671f\u516d \u661f\u671f\u5929\n&lt;#assign x&gt;Hello ${user}!&lt;/#assign&gt;     error\n&lt;#assign x=\u201d Hello ${user}!\u201d&gt;         true\n\n\u540c\u65f6\u4e5f\u652f\u6301\u4e2d\u6587\u8d4b\u503c\uff0c\u5982\uff1a\n&lt;#assign \u8bed\u6cd5&gt;\n  java\n&lt;/#assign&gt;\n${\u8bed\u6cd5}\n\n\u6253\u5370\u8f93\u51fa:\njava\n9.global\n\u8bed\u6cd5\n&lt;#global name=value&gt;\nor\n&lt;#global name1=value1 name2=value2 ... nameN=valueN&gt;\nor\n&lt;#global name&gt;\n  capture this\n&lt;/#global&gt;\n\n\u5168\u5c40\u8d4b\u503c\u8bed\u6cd5\uff0c\u5229\u7528\u8fd9\u4e2a\u8bed\u6cd5\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u5728\u6240\u6709\u7684namespace\u4e2d\u662f\u53ef\u89c1\u7684,\u5982\u679c\u8fd9\u4e2a\u53d8\u91cf\u88ab\u5f53\u524d\u7684assign\u8bed\u6cd5\u8986\u76d6 \u5982&lt;#global x=2&gt; &lt;#assign x=1&gt; \u5728\u5f53\u524d\u9875\u9762\u91ccx=2\u5c06\u88ab\u9690\u85cf\uff0c\u6216\u8005\u901a\u8fc7${.global.x}\u6765\u8bbf\u95ee\n10.setting\n\u8bed\u6cd5\n&lt;#setting name=value&gt;\n\n\u7528\u6765\u8bbe\u7f6e\u6574\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e2a\u73af\u5883\n\nlocale\nnumber_format\nboolean_format\ndate_format, time_format, datetime_format\ntime_zone\nclassic_compatible\n\n\u7528\u4f8b\n\u5047\u5982\u5f53\u524d\u662f\u5308\u7259\u5229\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u4fee\u6539\u6210\u7f8e\u56fd\n${1.2}\n&lt;#setting locale=&quot;en_US&quot;&gt;\n${1.2}\n\n\u8f93\u51fa\n1,2\n1.2\n\u56e0\u4e3a\u5308\u7259\u5229\u662f\u91c7\u7528\u201c,\u201d\u4f5c\u4e3a\u5341\u8fdb\u5236\u7684\u5206\u9694\u7b26\uff0c\u7f8e\u56fd\u662f\u7528\u201c.\u201d\n11.macro, nested, return\n\u8bed\u6cd5\n&lt;#macro name param1 param2 ... paramN&gt;\n  ...\n  &lt;#nested loopvar1, loopvar2, ..., loopvarN&gt;\n  ...\n  &lt;#return&gt;\n  ...\n&lt;/#macro&gt;\n\n\u7528\u4f8b\n\n&lt;#macro test foo bar=\"Bar\" baaz=-1&gt;\n  Test text, and the params: ${foo}, ${bar}, ${baaz}\n&lt;/#macro&gt;\n&lt;@test foo=\"a\" bar=\"b\" baaz=5*5-2/&gt;\n&lt;@test foo=\"a\" bar=\"b\"/&gt;\n&lt;@test foo=\"a\" baaz=5*5-2/&gt;\n&lt;@test foo=\"a\"/&gt;\n\u8f93\u51fa\n\n  Test text, and the params: a, b, 23\n  Test text, and the params: a, b, -1\n  Test text, and the params: a, Bar, 23\n  Test text, and the params: a, Bar, -1\n\u5b9a\u4e49\u5faa\u73af\u8f93\u51fa\u7684\u5b8f\n\n&lt;#macro list title items&gt;\n  &lt;p&gt;${title?cap_first}:\n  &lt;ul&gt;\n    &lt;#list items as x&gt;\n      &lt;li&gt;${x?cap_first}\n    &lt;/#list&gt;\n  &lt;/ul&gt;\n&lt;/#macro&gt;\n&lt;@list items=[\"mouse\", \"elephant\", \"python\"] title=\"Animals\"/&gt;\n\u8f93\u51fa\u7ed3\u679c\n\n&lt;p&gt;Animals:\n  &lt;ul&gt;\n      &lt;li&gt;Mouse\n      &lt;li&gt;Elephant\n      &lt;li&gt;Python\n  &lt;/ul&gt;\n\u5305\u542bbody\u7684\u5b8f\n\n&lt;#macro repeat count&gt;\n  &lt;#list 1..count as x&gt;\n    &lt;#nested x, x/2, x==count&gt;\n  &lt;/#list&gt;\n&lt;/#macro&gt;\n&lt;@repeat count=4 ; c halfc last&gt;\n  ${c}. ${halfc}&lt;#if last&gt; Last!&lt;/#if&gt;\n&lt;/@repeat &gt;\n\u8f93\u51fa\n\n0.5\n\n1\n\n1.5\n\n2 Last!\n\n\n12.t, lt, rt\n\u8bed\u6cd5\n\n&lt;#t&gt; \u53bb\u6389\u5de6\u53f3\u7a7a\u767d\u548c\u56de\u8f66\u6362\u884c\n&lt;#lt&gt;\u53bb\u6389\u5de6\u8fb9\u7a7a\u767d\u548c\u56de\u8f66\u6362\u884c\n&lt;#rt&gt;\u53bb\u6389\u53f3\u8fb9\u7a7a\u767d\u548c\u56de\u8f66\u6362\u884c\n&lt;#nt&gt;\u53d6\u6d88\u4e0a\u9762\u7684\u6548\u679c\n\u5f53\u7136 (\u6307\u4ee4\u8fd8\u6709\u5f88\u591a)\u3002\n\u4e09\u3001\u5e38\u7528\u5185\u5efa\u51fd\u6570\n\u5185\u5efa\u51fd\u6570\u5f88\u50cf\u5b50\u53d8\u91cf(\u5982\u679c\u4e86\u89e3Java\u672f\u8bed\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u50cf\u65b9\u6cd5)\uff0c \u5b83\u4eec\u5e76\u4e0d\u662f\u6570\u636e\u6a21\u578b\u4e2d\u7684\u4e1c\u897f\uff0c\u662f FreeMarker \u5728\u6570\u503c\u4e0a\u6dfb\u52a0\u7684\u3002 \u4e3a\u4e86\u6e05\u6670\u5b50\u53d8\u91cf\u662f\u54ea\u90e8\u5206\uff0c\u4f7f\u7528 ?(\u95ee\u53f7)\u4ee3\u66ff .(\u70b9)\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u5e38\u7528\u5185\u5efa\u51fd\u6570\u7684\u793a\u4f8b\uff1a\n\nuser?html \u7ed9\u51fa user \u7684HTML\u8f6c\u4e49\u7248\u672c\uff0c \u6bd4\u5982 &amp; \u4f1a\u7531 &amp; \u6765\u4ee3\u66ff\u3002\n\n\nuser?upper_case \u7ed9\u51fa user \u503c\u7684\u5927\u5199\u7248\u672c (\u6bd4\u5982 \"JOHN DOE\" \u6765\u66ff\u4ee3 \"John Doe\")\n\n\nanimal.name?cap_first \u7ed9\u51fa animal.name \u7684\u9996\u5b57\u6bcd\u5927\u5199\u7248\u672c(\u6bd4\u5982 \"Mouse\" \u6765\u66ff\u4ee3 \"mouse\")\n\n\nuser?length \u7ed9\u51fa user \u503c\u4e2d \u5b57\u7b26\u7684\u6570\u91cf(\u5bf9\u4e8e \"John Doe\" \u6765\u8bf4\u5c31\u662f8)\n\n\nanimals?size \u7ed9\u51fa animals \u5e8f\u5217\u4e2d \u9879\u76ee \u7684\u4e2a\u6570(\u6211\u4eec\u793a\u4f8b\u6570\u636e\u6a21\u578b\u4e2d\u662f3\u4e2a)\n\n\u5982\u679c\u5728 &lt;#list animals as animal&gt; \u548c\u5bf9\u5e94\u7684 &lt;/#list&gt; \u6807\u7b7e\u4e2d\uff1a\n\nanimal?index \u7ed9\u51fa\u4e86\u5728 animals \u4e2d\u57fa\u4e8e0\u5f00\u59cb\u7684 animal\u7684\u7d22\u5f15\u503c\n\n\nanimal?counter \u4e5f\u50cf index\uff0c \u4f46\u662f\u7ed9\u51fa\u7684\u662f\u57fa\u4e8e1\u7684\u7d22\u5f15\u503c\n\n\nanimal?item_parity \u57fa\u4e8e\u5f53\u524d\u8ba1\u6570\u7684\u5947\u5076\u6027\uff0c\u7ed9\u51fa\u5b57\u7b26\u4e32 \"odd\" \u6216 \"even\"\u3002\u5728\u7ed9\u4e0d\u540c\u884c\u7740\u8272\u65f6\u975e\u5e38\u6709\u7528\uff0c\u6bd4\u5982\u5728 \u4e2d\u3002\n\n\u4e00\u4e9b\u5185\u5efa\u51fd\u6570\u9700\u8981\u53c2\u6570\u6765\u6307\u5b9a\u884c\u4e3a\uff0c\u6bd4\u5982\uff1a\n\nanimal.protected?string(\"Y\", \"N\") \u57fa\u4e8e animal.protected \u7684\u5e03\u5c14\u503c\u6765\u8fd4\u56de\u5b57\u7b26\u4e32 \"Y\" \u6216 \"N\"\u3002\n\n\nanimal?item_cycle('lightRow','darkRow') \u662f\u4e4b\u524d\u4ecb\u7ecd\u7684 item_parity \u66f4\u4e3a\u5e38\u7528\u7684\u53d8\u4f53\u5f62\u5f0f\u3002\n\n\nfruits?join(\", \") \u901a\u8fc7\u8fde\u63a5\u6240\u6709\u9879\uff0c\u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c \u5728\u6bcf\u4e2a\u9879\u4e4b\u95f4\u63d2\u5165\u53c2\u6570\u5206\u9694\u7b26(\u6bd4\u5982 \"orange,banana\")\n\n\nuser?starts_with(\"J\") \u6839\u636e user \u7684\u9996\u5b57\u6bcd\u662f\u5426\u662f \"J\" \u8fd4\u56de\u5e03\u5c14\u503ctrue\u6216false\u3002\n\n\u5185\u5efa\u51fd\u6570\u5e94\u7528\u53ef\u4ee5\u94fe\u5f0f\u64cd\u4f5c\uff0c\u6bd4\u5982user?upper_case?html \u4f1a\u5148\u8f6c\u6362\u7528\u6237\u540d\u5230\u5927\u5199\u5f62\u5f0f\uff0c\u4e4b\u540e\u518d\u8fdb\u884cHTML\u8f6c\u4e49\u3002(\u8fd9\u5c31\u50cf\u53ef\u4ee5\u94fe\u5f0f\u4f7f\u7528 .(\u70b9)\u4e00\u6837)\n\u53ef\u4ee5\u9605\u8bfb \u5168\u90e8\u5185\u5efa\u51fd\u6570\u53c2\u8003\u3002\n\u56db\u3001\u5feb\u901f\u6d4f\u89c8(\u5907\u5fd8\u5355)\n\u8fd9\u91cc\u7ed9\u5df2\u7ecf\u4e86\u89e3 FreeMarker \u7684\u4eba\u6216\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u7684\u63d0\u4e2a\u9192\uff1a\n\u76f4\u63a5\u6307\u5b9a\u503c\n\n\u5b57\u7b26\u4e32\uff1a \"Foo\" \u6216\u8005 'Foo' \u6216\u8005 \"It's \\\"quoted\\\"\" \u6216\u8005 'It\\'s \"quoted\"' \u6216\u8005 r\"C:\\raw\\string\"\n\u6570\u5b57\uff1a 123.45\n\u5e03\u5c14\u503c\uff1a true\uff0c false\n\u5e8f\u5217\uff1a [\"foo\", \"bar\", 123.45]\uff1b \u503c\u57df\uff1a 0..9, 0..&lt;10 (\u6216 0..!10), 0..\n\u54c8\u5e0c\u8868\uff1a {\"name\":\"green mouse\", \"price\":150}\n\n\u68c0\u7d22\u53d8\u91cf\n\n\u9876\u5c42\u53d8\u91cf\uff1a user\n\u4ece\u54c8\u5e0c\u8868\u4e2d\u68c0\u7d22\u6570\u636e\uff1a user.name\uff0c user[\"name\"]\n\u4ece\u5e8f\u5217\u4e2d\u68c0\u7d22\u6570\u636e\uff1a products[5]\n\u7279\u6b8a\u53d8\u91cf\uff1a .main\n\n\u5b57\u7b26\u4e32\u64cd\u4f5c\n\n\u63d2\u503c(\u6216\u8fde\u63a5)\uff1a \"Hello ${user}!\" (\u6216 \"Hello \" + user + \"!\")\n\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\uff1a name[0]\n\u5b57\u7b26\u4e32\u5207\u5206\uff1a \u5305\u542b\u7ed3\u5c3e\uff1a name[0..4]\uff0c\u4e0d\u5305\u542b\u7ed3\u5c3e\uff1a name[0..&lt;5]\uff0c\u57fa\u4e8e\u957f\u5ea6(\u5bbd\u5bb9\u5904\u7406)\uff1a name[0..*5]\uff0c\u53bb\u9664\u5f00\u5934\uff1a name[5..]\n\n\u5e8f\u5217\u64cd\u4f5c\n\n\u8fde\u63a5\uff1a users + [\"guest\"]\n\u5e8f\u5217\u5207\u5206\uff1a\u5305\u542b\u7ed3\u5c3e\uff1a products[20..29]\uff0c \u4e0d\u5305\u542b\u7ed3\u5c3e\uff1a products[20..&lt;30]\uff0c\u57fa\u4e8e\u957f\u5ea6(\u5bbd\u5bb9\u5904\u7406)\uff1a products[20..*10]\uff0c\u53bb\u9664\u5f00\u5934\uff1a products[20..]\n\n\u54c8\u5e0c\u8868\u64cd\u4f5c\n\n\u8fde\u63a5\uff1a passwords + { \"joe\": \"secret42\" }\n\n\u7b97\u672f\u8fd0\u7b97\uff1a (x * 1.5 + 10) / 2 - y % 100\n\u6bd4\u8f83\u8fd0\u7b97\uff1a x == y\uff0c x != y\uff0c x &lt; y\uff0c x &gt; y\uff0c x &gt;= y\uff0c x &lt;= y\uff0c x lt y\uff0c x lte y\uff0c x gt y\uff0c x gte y\uff0c \u7b49\u7b49\u3002\u3002\u3002\u3002\u3002\u3002\n\u903b\u8f91\u64cd\u4f5c\uff1a !registered &amp;&amp; (firstVisit || fromEurope)\n\u5185\u5efa\u51fd\u6570\uff1a name?upper_case, path?ensure_starts_with('/')\n\u65b9\u6cd5\u8c03\u7528\uff1a repeat(\"What\", 3)\n\u5904\u7406\u4e0d\u5b58\u5728\u7684\u503c\uff1a\n\n\u9ed8\u8ba4\u503c\uff1a name!\"unknown\" \u6216\u8005 (user.name)!\"unknown\" \u6216\u8005 name! \u6216\u8005 (user.name)!\n\u68c0\u6d4b\u4e0d\u5b58\u5728\u7684\u503c\uff1a name?? \u6216\u8005 (user.name)??\n\n\u8d4b\u503c\u64cd\u4f5c\uff1a =, +=, -=, *=, /=, %=, ++, --\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring  Boot \u8bb0\u5f55\u65e5\u5fd7", "date": "2020-05-03T01:55:00-00.00", "path": "/Xuxx_Blogs/archives/bj08/", "text": "1.\u57fa\u672c\u64cd\u4f5c\n1.\u5728\u7c7b\u4e2d\u6dfb\u52a0Logger\nprivate static final Logger log = LoggerFactory.getLogger(SpringbootJpaApplication.class);\n\n2.\u4f7f\u7528log\u8bb0\u5f55\u65e5\u5fd7\n\u4f8b\uff1a\n@SpringBootApplication\npublic class SpringbootApplication {\n    private static final Logger log = LoggerFactory.getLogger(SpringbootApplication.class);\n\n    public static void main(String[] args) {\n        log.debug(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        log.info(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        log.error(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        SpringApplication.run(SpringbootApplication.class, args);\n    }\n}\n\n\n2.\u4fbf\u6377\u64cd\u4f5c\n1.\u5728\u7c7b\u4e0a\u6dfb\u52a0@Slf4j\u6ce8\u89e3\n2.\u4f7f\u7528log\u8bb0\u5f55\u65e5\u5fd7\n\u4f8b\uff1a\n@Slf4j\n@SpringBootApplication\npublic class SpringbootApplication {\n    public static void main(String[] args) {\n        log.debug(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        log.info(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        log.error(&quot;\u65e5\u5fd7\u8bb0\u5f55&quot;);\n        SpringApplication.run(SpringbootApplication.class, args);\n    }\n}\n\n\n3.\u65e5\u5fd7\u914d\u7f6e\nSpring Boot\u5bf9\u5404\u79cd\u65e5\u5fd7\u6846\u67b6\u90fd\u505a\u4e86\u652f\u6301\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6765\u4fee\u6539\u9ed8\u8ba4\u7684\u65e5\u5fd7\u7684\u914d\u7f6e\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSpring Boot\u4f7f\u7528Logback\u4f5c\u4e3a\u65e5\u5fd7\u6846\u67b6\nlogging:\n    file: ../1ogs/xxx.1og                      (../\u662f\u5f53\u524d\u9879\u76ee\u7684\u4e0a\u7ea7\u76ee\u5f55)\n    level.com.xuxx.xxx.xxx: DEBUG\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "\u65e5\u5fd7", "slug": "\u65e5\u5fd7", "permalink": "/Xuxx_Blogs/tag/\u65e5\u5fd7/"}, {"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "\u6570\u636e\u5e93-\u4e8b\u52a1", "date": "2020-04-15T22:55:00-00.00", "path": "/Xuxx_Blogs/archives/bj07/", "text": "\u4e8b\u52a1\n\n\u5728\u6267\u884cSQL\u8bed\u53e5\u7684\u65f6\u5019\uff0c\u67d0\u4e9b\u4e1a\u52a1\u8981\u6c42\uff0c\u4e00\u7cfb\u5217\u64cd\u4f5c\u5fc5\u987b\u5168\u90e8\u6267\u884c\uff0c\u800c\u4e0d\u80fd\u4ec5\u6267\u884c\u4e00\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8f6c\u8d26\u64cd\u4f5c\uff1a\n\n-- \u4eceid=1\u7684\u8d26\u6237\u7ed9id=2\u7684\u8d26\u6237\u8f6c\u8d26100\u5143\n-- \u7b2c\u4e00\u6b65\uff1a\u5c06id=1\u7684A\u8d26\u6237\u4f59\u989d\u51cf\u53bb100\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\n-- \u7b2c\u4e8c\u6b65\uff1a\u5c06id=2\u7684B\u8d26\u6237\u4f59\u989d\u52a0\u4e0a100\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\n\u8fd9\u4e24\u6761SQL\u8bed\u53e5\u5fc5\u987b\u5168\u90e8\u6267\u884c\uff0c\u6216\u8005\uff0c\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u5982\u679c\u7b2c\u4e00\u6761\u8bed\u53e5\u6210\u529f\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u5931\u8d25\uff0c\u5c31\u5fc5\u987b\u5168\u90e8\u64a4\u9500\u3002\n\u8fd9\u79cd\u628a\u591a\u6761\u8bed\u53e5\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u64cd\u4f5c\u7684\u529f\u80fd\uff0c\u88ab\u79f0\u4e3a\u6570\u636e\u5e93\u4e8b\u52a1\u3002\u6570\u636e\u5e93\u4e8b\u52a1\u53ef\u4ee5\u786e\u4fdd\u8be5\u4e8b\u52a1\u8303\u56f4\u5185\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5168\u90e8\u6210\u529f\u6216\u8005\u5168\u90e8\u5931\u8d25\u3002\u5982\u679c\u4e8b\u52a1\u5931\u8d25\uff0c\u90a3\u4e48\u6548\u679c\u5c31\u548c\u6ca1\u6709\u6267\u884c\u8fd9\u4e9bSQL\u4e00\u6837\uff0c\u4e0d\u4f1a\u5bf9\u6570\u636e\u5e93\u6570\u636e\u6709\u4efb\u4f55\u6539\u52a8\u3002\n\u53ef\u89c1\uff0c\u6570\u636e\u5e93\u4e8b\u52a1\u5177\u6709ACID\u8fd94\u4e2a\u7279\u6027\uff1a\n\nA\uff1aAtomic\uff0c\u539f\u5b50\u6027\uff0c\u5c06\u6240\u6709SQL\u4f5c\u4e3a\u539f\u5b50\u5de5\u4f5c\u5355\u5143\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u4e0d\u6267\u884c\uff1b\nC\uff1aConsistent\uff0c\u4e00\u81f4\u6027\uff0c\u4e8b\u52a1\u5b8c\u6210\u540e\uff0c\u6240\u6709\u6570\u636e\u7684\u72b6\u6001\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u5373A\u8d26\u6237\u53ea\u8981\u51cf\u53bb\u4e86100\uff0cB\u8d26\u6237\u5219\u5fc5\u5b9a\u52a0\u4e0a\u4e86100\uff1b\nI\uff1aIsolation\uff0c\u9694\u79bb\u6027\uff0c\u5982\u679c\u6709\u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u4f5c\u51fa\u7684\u4fee\u6539\u5fc5\u987b\u4e0e\u5176\u4ed6\u4e8b\u52a1\u9694\u79bb\uff1b\nD\uff1aDuration\uff0c\u6301\u4e45\u6027\uff0c\u5373\u4e8b\u52a1\u5b8c\u6210\u540e\uff0c\u5bf9\u6570\u636e\u5e93\u6570\u636e\u7684\u4fee\u6539\u88ab\u6301\u4e45\u5316\u5b58\u50a8\u3002\n\n\u5bf9\u4e8e\u5355\u6761SQL\u8bed\u53e5\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u81ea\u52a8\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u6267\u884c\uff0c\u8fd9\u79cd\u4e8b\u52a1\u88ab\u79f0\u4e3a\u9690\u5f0f\u4e8b\u52a1\u3002\n\u8981\u624b\u52a8\u628a\u591a\u6761SQL\u8bed\u53e5\u4f5c\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u6267\u884c\uff0c\u4f7f\u7528BEGIN\u5f00\u542f\u4e00\u4e2a\u4e8b\u52a1\uff0c\u4f7f\u7528COMMIT\u63d0\u4ea4\u4e00\u4e2a\u4e8b\u52a1\uff0c\u8fd9\u79cd\u4e8b\u52a1\u88ab\u79f0\u4e3a\u663e\u5f0f\u4e8b\u52a1\uff0c\u4f8b\u5982\uff0c\u628a\u4e0a\u8ff0\u7684\u8f6c\u8d26\u64cd\u4f5c\u4f5c\u4e3a\u4e00\u4e2a\u663e\u5f0f\u4e8b\u52a1\uff1a\n\nBEGIN;\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\nCOMMIT;\n\u5f88\u663e\u7136\u591a\u6761SQL\u8bed\u53e5\u8981\u60f3\u4f5c\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u6267\u884c\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528\u663e\u5f0f\u4e8b\u52a1\u3002\nCOMMIT\u662f\u6307\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5373\u8bd5\u56fe\u628a\u4e8b\u52a1\u5185\u7684\u6240\u6709SQL\u6240\u505a\u7684\u4fee\u6539\u6c38\u4e45\u4fdd\u5b58\u3002\u5982\u679cCOMMIT\u8bed\u53e5\u6267\u884c\u5931\u8d25\u4e86\uff0c\u6574\u4e2a\u4e8b\u52a1\u4e5f\u4f1a\u5931\u8d25\u3002\n\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u4e3b\u52a8\u8ba9\u4e8b\u52a1\u5931\u8d25\uff0c\u8fd9\u65f6\uff0c\u53ef\u4ee5\u7528ROLLBACK\u56de\u6eda\u4e8b\u52a1\uff0c\u6574\u4e2a\u4e8b\u52a1\u4f1a\u5931\u8d25\uff1a\n\nBEGIN;\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\nROLLBACK;\n\u6570\u636e\u5e93\u4e8b\u52a1\u662f\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u4fdd\u8bc1\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u4e1a\u52a1\u903b\u8f91\u4f7f\u7528\u5b83\u5c31\u53ef\u4ee5\u3002\n\u9694\u79bb\u7ea7\u522b\n\u5bf9\u4e8e\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u6d89\u53ca\u5230\u64cd\u4f5c\u540c\u4e00\u6761\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u95ee\u9898\u3002\u56e0\u4e3a\u5e76\u53d1\u64cd\u4f5c\u4f1a\u5e26\u6765\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u6027\uff0c\u5305\u62ec\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u7b49\u3002\u6570\u636e\u5e93\u7cfb\u7edf\u63d0\u4f9b\u4e86\u9694\u79bb\u7ea7\u522b\u6765\u8ba9\u6211\u4eec\u6709\u9488\u5bf9\u6027\u5730\u9009\u62e9\u4e8b\u52a1\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u907f\u514d\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\nSQL\u6807\u51c6\u5b9a\u4e49\u4e864\u79cd\u9694\u79bb\u7ea7\u522b\uff0c\u5206\u522b\u5bf9\u5e94\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff1a\n\n\nIsolation Level\n\u810f\u8bfb\uff08Dirty Read\uff09\n\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non Repeatable Read\uff09\n\u5e7b\u8bfb\uff08Phantom Read\uff09\n\n\n\n\nRead Uncommitted\nYes\nYes\nYes\n\n\nRead Committed\n-\nYes\nYes\n\n\nRepeatable Read\n-\n-\nYes\n\n\nSerializable\n-\n-\n-\n\n\n\n\u4e0b\u9762\u4f9d\u6b21\u4ecb\u7ecd4\u79cd\u9694\u79bb\u7ea7\u522b\u7684\u6570\u636e\u4e00\u81f4\u6027\u95ee\u9898\u3002\nRead Uncommitted\n\nRead Uncommitted\u662f\u9694\u79bb\u7ea7\u522b\u6700\u4f4e\u7684\u4e00\u79cd\u4e8b\u52a1\u7ea7\u522b\u3002\u5728\u8fd9\u79cd\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e00\u4e2a\u4e8b\u52a1\u4f1a\u8bfb\u5230\u53e6\u4e00\u4e2a\u4e8b\u52a1\u66f4\u65b0\u540e\u4f46\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u5982\u679c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u56de\u6eda\uff0c\u90a3\u4e48\u5f53\u524d\u4e8b\u52a1\u8bfb\u5230\u7684\u6570\u636e\u5c31\u662f\u810f\u6570\u636e\uff0c\u8fd9\u5c31\u662f\u810f\u8bfb\uff08Dirty Read\uff09\u3002\n\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u51c6\u5907\u597dstudents\u8868\u7684\u6570\u636e\uff0c\u8be5\u8868\u4ec5\u4e00\u884c\u8bb0\u5f55\uff1a\n\nmysql&gt; select * from students;\n+----+-------+\n| id | name  |\n+----+-------+\n|  1 | Alice |\n+----+-------+\n1 row in set (0.00 sec)\n\u7136\u540e\uff0c\u5206\u522b\u5f00\u542f\u4e24\u4e2aMySQL\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u6309\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4e8b\u52a1A\u548c\u4e8b\u52a1B\uff1a\n\n\n\u65f6\u523b\n\u4e8b\u52a1A\n\u4e8b\u52a1B\n\n\n\n\n1\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n\n2\nBEGIN;\nBEGIN;\n\n\n3\nUPDATE students SET name = 'Bob' WHERE id = 1;\n\n\n\n4\n\nSELECT * FROM students WHERE id = 1;\n\n\n5\nROLLBACK;\n\n\n\n6\n\nSELECT * FROM students WHERE id = 1;\n\n\n7\n\nCOMMIT;\n\n\n\n\u5f53\u4e8b\u52a1A\u6267\u884c\u5b8c\u7b2c3\u6b65\u65f6\uff0c\u5b83\u66f4\u65b0\u4e86id=1\u7684\u8bb0\u5f55\uff0c\u4f46\u5e76\u672a\u63d0\u4ea4\uff0c\u800c\u4e8b\u52a1B\u5728\u7b2c4\u6b65\u8bfb\u53d6\u5230\u7684\u6570\u636e\u5c31\u662f\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\n\u968f\u540e\uff0c\u4e8b\u52a1A\u5728\u7b2c5\u6b65\u8fdb\u884c\u4e86\u56de\u6eda\uff0c\u4e8b\u52a1B\u518d\u6b21\u8bfb\u53d6id=1\u7684\u8bb0\u5f55\uff0c\u53d1\u73b0\u548c\u4e0a\u4e00\u6b21\u8bfb\u53d6\u5230\u7684\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u8fd9\u5c31\u662f\u810f\u8bfb\u3002\n\u53ef\u89c1\uff0c\u5728Read Uncommitted\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e00\u4e2a\u4e8b\u52a1\u53ef\u80fd\u8bfb\u53d6\u5230\u53e6\u4e00\u4e2a\u4e8b\u52a1\u66f4\u65b0\u4f46\u672a\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u6570\u636e\u6709\u53ef\u80fd\u662f\u810f\u6570\u636e\u3002\nRead Committed\n\n\u5728Read Committed\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e00\u4e2a\u4e8b\u52a1\u53ef\u80fd\u4f1a\u9047\u5230\u4e0d\u53ef\u91cd\u590d\u8bfb\uff08Non Repeatable Read\uff09\u7684\u95ee\u9898\u3002\n\u4e0d\u53ef\u91cd\u590d\u8bfb\u662f\u6307\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u5185\uff0c\u591a\u6b21\u8bfb\u540c\u4e00\u6570\u636e\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u8fd8\u6ca1\u6709\u7ed3\u675f\u65f6\uff0c\u5982\u679c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u6070\u597d\u4fee\u6539\u4e86\u8fd9\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\uff0c\u5728\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u5c31\u53ef\u80fd\u4e0d\u4e00\u81f4\u3002\n\u6211\u4eec\u4ecd\u7136\u5148\u51c6\u5907\u597dstudents\u8868\u7684\u6570\u636e\uff1a\n\nmysql&gt; select * from students;\n+----+-------+\n| id | name  |\n+----+-------+\n|  1 | Alice |\n+----+-------+\n1 row in set (0.00 sec)\n\u7136\u540e\uff0c\u5206\u522b\u5f00\u542f\u4e24\u4e2aMySQL\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u6309\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4e8b\u52a1A\u548c\u4e8b\u52a1B\uff1a\n\n\n\u65f6\u523b\n\u4e8b\u52a1A\n\u4e8b\u52a1B\n\n\n\n\n1\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n\n\n2\nBEGIN;\nBEGIN;\n\n\n3\n\nSELECT * FROM students WHERE id = 1;\n\n\n4\nUPDATE students SET name = 'Bob' WHERE id = 1;\n\n\n\n5\nCOMMIT;\n\n\n\n6\n\nSELECT * FROM students WHERE id = 1;\n\n\n7\n\nCOMMIT;\n\n\n\n\u5f53\u4e8b\u52a1B\u7b2c\u4e00\u6b21\u6267\u884c\u7b2c3\u6b65\u7684\u67e5\u8be2\u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662fAlice\uff0c\u968f\u540e\uff0c\u7531\u4e8e\u4e8b\u52a1A\u5728\u7b2c4\u6b65\u66f4\u65b0\u4e86\u8fd9\u6761\u8bb0\u5f55\u5e76\u63d0\u4ea4\uff0c\u6240\u4ee5\uff0c\u4e8b\u52a1B\u5728\u7b2c6\u6b65\u518d\u6b21\u6267\u884c\u540c\u6837\u7684\u67e5\u8be2\u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u53d8\u6210\u4e86Bob\uff0c\u56e0\u6b64\uff0c\u5728Read Committed\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e8b\u52a1\u4e0d\u53ef\u91cd\u590d\u8bfb\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u56e0\u4e3a\u5f88\u53ef\u80fd\u8bfb\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4\u3002\nRepeatable Read\n\n\u5728Repeatable Read\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e00\u4e2a\u4e8b\u52a1\u53ef\u80fd\u4f1a\u9047\u5230\u5e7b\u8bfb\uff08Phantom Read\uff09\u7684\u95ee\u9898\u3002\n\u5e7b\u8bfb\u662f\u6307\uff0c\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u7b2c\u4e00\u6b21\u67e5\u8be2\u67d0\u6761\u8bb0\u5f55\uff0c\u53d1\u73b0\u6ca1\u6709\uff0c\u4f46\u662f\uff0c\u5f53\u8bd5\u56fe\u66f4\u65b0\u8fd9\u6761\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\u65f6\uff0c\u7adf\u7136\u80fd\u6210\u529f\uff0c\u5e76\u4e14\uff0c\u518d\u6b21\u8bfb\u53d6\u540c\u4e00\u6761\u8bb0\u5f55\uff0c\u5b83\u5c31\u795e\u5947\u5730\u51fa\u73b0\u4e86\u3002\n\u6211\u4eec\u4ecd\u7136\u5148\u51c6\u5907\u597dstudents\u8868\u7684\u6570\u636e\uff1a\n\nmysql&gt; select * from students;\n+----+-------+\n| id | name  |\n+----+-------+\n|  1 | Alice |\n+----+-------+\n1 row in set (0.00 sec)\n\u7136\u540e\uff0c\u5206\u522b\u5f00\u542f\u4e24\u4e2aMySQL\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u6309\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4e8b\u52a1A\u548c\u4e8b\u52a1B\uff1a\n\n\n\u65f6\u523b\n\u4e8b\u52a1A\n\u4e8b\u52a1B\n\n\n\n\n1\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n\n\n2\nBEGIN;\nBEGIN;\n\n\n3\n\nSELECT * FROM students WHERE id = 99;\n\n\n4\nINSERT INTO students (id, name) VALUES (99, 'Bob');\n\n\n\n5\nCOMMIT;\n\n\n\n6\n\nSELECT * FROM students WHERE id = 99;\n\n\n7\n\nUPDATE students SET name = 'Alice' WHERE id = 99;\n\n\n8\n\nSELECT * FROM students WHERE id = 99;\n\n\n9\n\nCOMMIT;\n\n\n\n\u4e8b\u52a1B\u5728\u7b2c3\u6b65\u7b2c\u4e00\u6b21\u8bfb\u53d6id=99\u7684\u8bb0\u5f55\u65f6\uff0c\u8bfb\u5230\u7684\u8bb0\u5f55\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728id=99\u7684\u8bb0\u5f55\u3002\u968f\u540e\uff0c\u4e8b\u52a1A\u5728\u7b2c4\u6b65\u63d2\u5165\u4e86\u4e00\u6761id=99\u7684\u8bb0\u5f55\u5e76\u63d0\u4ea4\u3002\u4e8b\u52a1B\u5728\u7b2c6\u6b65\u518d\u6b21\u8bfb\u53d6id=99\u7684\u8bb0\u5f55\u65f6\uff0c\u8bfb\u5230\u7684\u8bb0\u5f55\u4ecd\u7136\u4e3a\u7a7a\uff0c\u4f46\u662f\uff0c\u4e8b\u52a1B\u5728\u7b2c7\u6b65\u8bd5\u56fe\u66f4\u65b0\u8fd9\u6761\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\u65f6\uff0c\u7adf\u7136\u6210\u529f\u4e86\uff0c\u5e76\u4e14\uff0c\u4e8b\u52a1B\u5728\u7b2c8\u6b65\u518d\u6b21\u8bfb\u53d6id=99\u7684\u8bb0\u5f55\u65f6\uff0c\u8bb0\u5f55\u51fa\u73b0\u4e86\u3002\n\u53ef\u89c1\uff0c\u5e7b\u8bfb\u5c31\u662f\u6ca1\u6709\u8bfb\u5230\u7684\u8bb0\u5f55\uff0c\u4ee5\u4e3a\u4e0d\u5b58\u5728\uff0c\u4f46\u5176\u5b9e\u662f\u53ef\u4ee5\u66f4\u65b0\u6210\u529f\u7684\uff0c\u5e76\u4e14\uff0c\u66f4\u65b0\u6210\u529f\u540e\uff0c\u518d\u6b21\u8bfb\u53d6\uff0c\u5c31\u51fa\u73b0\u4e86\u3002\nSerializable\n\nSerializable\u662f\u6700\u4e25\u683c\u7684\u9694\u79bb\u7ea7\u522b\u3002\u5728Serializable\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u6240\u6709\u4e8b\u52a1\u6309\u7167\u6b21\u5e8f\u4f9d\u6b21\u6267\u884c\uff0c\u56e0\u6b64\uff0c\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb\u90fd\u4e0d\u4f1a\u51fa\u73b0\u3002\n\u867d\u7136Serializable\u9694\u79bb\u7ea7\u522b\u4e0b\u7684\u4e8b\u52a1\u5177\u6709\u6700\u9ad8\u7684\u5b89\u5168\u6027\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u4e8b\u52a1\u662f\u4e32\u884c\u6267\u884c\uff0c\u6240\u4ee5\u6548\u7387\u4f1a\u5927\u5927\u4e0b\u964d\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u4f1a\u6025\u5267\u964d\u4f4e\u3002\u5982\u679c\u6ca1\u6709\u7279\u522b\u91cd\u8981\u7684\u60c5\u666f\uff0c\u4e00\u822c\u90fd\u4e0d\u4f1a\u4f7f\u7528Serializable\u9694\u79bb\u7ea7\u522b\u3002\n\u9ed8\u8ba4\u9694\u79bb\u7ea7\u522b\n\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u9694\u79bb\u7ea7\u522b\uff0c\u6570\u636e\u5e93\u5c31\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u3002\u5728MySQL\u4e2d\uff0c\u5982\u679c\u4f7f\u7528InnoDB\uff0c\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u662fRepeatable Read\u3002\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Mysql", "slug": "Mysql", "permalink": "/Xuxx_Blogs/tag/Mysql/"}, {"name": "\u6570\u636e\u5e93", "slug": "\u6570\u636e\u5e93", "permalink": "/Xuxx_Blogs/tag/\u6570\u636e\u5e93/"}]}, {"title": "\u5b9e\u7528SQL\u8bed\u53e5", "date": "2020-04-15T22:25:00-00.00", "path": "/Xuxx_Blogs/archives/bj06/", "text": "\u5728\u7f16\u5199SQL\u65f6\uff0c\u7075\u6d3b\u8fd0\u7528\u4e00\u4e9b\u6280\u5de7\uff0c\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u7a0b\u5e8f\u903b\u8f91\u3002\n\u63d2\u5165\u6216\u66ff\u6362\n\u5982\u679c\u5e0c\u671b\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff08INSERT\uff09\uff0c\u4f46\u5982\u679c\u8bb0\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5c31\u5148\u5220\u9664\u539f\u8bb0\u5f55\uff0c\u518d\u63d2\u5165\u65b0\u8bb0\u5f55\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528REPLACE\u8bed\u53e5\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u5148\u67e5\u8be2\uff0c\u518d\u51b3\u5b9a\u662f\u5426\u5148\u5220\u9664\u518d\u63d2\u5165\uff1a\n\nREPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '\u5c0f\u660e', 'F', 99);\n\u82e5id=1\u7684\u8bb0\u5f55\u4e0d\u5b58\u5728\uff0cREPLACE\u8bed\u53e5\u5c06\u63d2\u5165\u65b0\u8bb0\u5f55\uff0c\u5426\u5219\uff0c\u5f53\u524did=1\u7684\u8bb0\u5f55\u5c06\u88ab\u5220\u9664\uff0c\u7136\u540e\u518d\u63d2\u5165\u65b0\u8bb0\u5f55\u3002\n\u63d2\u5165\u6216\u66f4\u65b0\n\u5982\u679c\u5e0c\u671b\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff08INSERT\uff09\uff0c\u4f46\u5982\u679c\u8bb0\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5c31\u66f4\u65b0\u8be5\u8bb0\u5f55\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528INSERT INTO ... ON DUPLICATE KEY UPDATE ...\u8bed\u53e5\uff1a\n\nINSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '\u5c0f\u660e', 'F', 99) ON DUPLICATE KEY UPDATE name='\u5c0f\u660e', gender='F', score=99;\n\u82e5id=1\u7684\u8bb0\u5f55\u4e0d\u5b58\u5728\uff0cINSERT\u8bed\u53e5\u5c06\u63d2\u5165\u65b0\u8bb0\u5f55\uff0c\u5426\u5219\uff0c\u5f53\u524did=1\u7684\u8bb0\u5f55\u5c06\u88ab\u66f4\u65b0\uff0c\u66f4\u65b0\u7684\u5b57\u6bb5\u7531UPDATE\u6307\u5b9a\u3002\n\u63d2\u5165\u6216\u5ffd\u7565\n\u5982\u679c\u5e0c\u671b\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff08INSERT\uff09\uff0c\u4f46\u5982\u679c\u8bb0\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5c31\u5565\u4e8b\u4e5f\u4e0d\u5e72\u76f4\u63a5\u5ffd\u7565\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528INSERT IGNORE INTO ...\u8bed\u53e5\uff1a\n\nINSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '\u5c0f\u660e', 'F', 99);\n\u82e5id=1\u7684\u8bb0\u5f55\u4e0d\u5b58\u5728\uff0cINSERT\u8bed\u53e5\u5c06\u63d2\u5165\u65b0\u8bb0\u5f55\uff0c\u5426\u5219\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n\u5feb\u7167\n\u5982\u679c\u60f3\u8981\u5bf9\u4e00\u4e2a\u8868\u8fdb\u884c\u5feb\u7167\uff0c\u5373\u590d\u5236\u4e00\u4efd\u5f53\u524d\u8868\u7684\u6570\u636e\u5230\u4e00\u4e2a\u65b0\u8868\uff0c\u53ef\u4ee5\u7ed3\u5408CREATE TABLE\u548cSELECT\uff1a\n\n-- \u5bf9class_id=1\u7684\u8bb0\u5f55\u8fdb\u884c\u5feb\u7167\uff0c\u5e76\u5b58\u50a8\u4e3a\u65b0\u8868students_of_class1:\nCREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;\n\u65b0\u521b\u5efa\u7684\u8868\u7ed3\u6784\u548cSELECT\u4f7f\u7528\u7684\u8868\u7ed3\u6784\u5b8c\u5168\u4e00\u81f4\u3002\n\u5199\u5165\u67e5\u8be2\u7ed3\u679c\u96c6\n\u5982\u679c\u67e5\u8be2\u7ed3\u679c\u96c6\u9700\u8981\u5199\u5165\u5230\u8868\u4e2d\uff0c\u53ef\u4ee5\u7ed3\u5408INSERT\u548cSELECT\uff0c\u5c06SELECT\u8bed\u53e5\u7684\u7ed3\u679c\u96c6\u76f4\u63a5\u63d2\u5165\u5230\u6307\u5b9a\u8868\u4e2d\u3002\n\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u7edf\u8ba1\u6210\u7ee9\u7684\u8868statistics\uff0c\u8bb0\u5f55\u5404\u73ed\u7684\u5e73\u5747\u6210\u7ee9\uff1a\n\nCREATE TABLE statistics (\n    id BIGINT NOT NULL AUTO_INCREMENT,\n    class_id BIGINT NOT NULL,\n    average DOUBLE NOT NULL,\n    PRIMARY KEY (id)\n);\n\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7528\u4e00\u6761\u8bed\u53e5\u5199\u5165\u5404\u73ed\u7684\u5e73\u5747\u6210\u7ee9\uff1a\n\nINSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;\n\u786e\u4fddINSERT\u8bed\u53e5\u7684\u5217\u548cSELECT\u8bed\u53e5\u7684\u5217\u80fd\u4e00\u4e00\u5bf9\u5e94\uff0c\u5c31\u53ef\u4ee5\u5728statistics\u8868\u4e2d\u76f4\u63a5\u4fdd\u5b58\u67e5\u8be2\u7684\u7ed3\u679c\uff1a\n\n&gt; SELECT * FROM statistics;\n+----+----------+--------------+\n| id | class_id | average      |\n+----+----------+--------------+\n|  1 |        1 |         86.5 |\n|  2 |        2 | 73.666666666 |\n|  3 |        3 | 88.333333333 |\n+----+----------+--------------+\n3 rows in set (0.00 sec)\n\u5f3a\u5236\u4f7f\u7528\u6307\u5b9a\u7d22\u5f15\n\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5206\u6790\u67e5\u8be2\u8bed\u53e5\uff0c\u5e76\u9009\u62e9\u4e00\u4e2a\u6700\u5408\u9002\u7684\u7d22\u5f15\u3002\u4f46\u662f\u5f88\u591a\u65f6\u5019\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u67e5\u8be2\u4f18\u5316\u5668\u5e76\u4e0d\u4e00\u5b9a\u603b\u662f\u80fd\u4f7f\u7528\u6700\u4f18\u7d22\u5f15\u3002\u5982\u679c\u77e5\u9053\u5982\u4f55\u9009\u62e9\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528FORCE INDEX\u5f3a\u5236\u67e5\u8be2\u4f7f\u7528\u6307\u5b9a\u7684\u7d22\u5f15\u3002\u4f8b\u5982\uff1a\n\n&gt; SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;\n\u6307\u5b9a\u7d22\u5f15\u7684\u524d\u63d0\u662f\u7d22\u5f15idx_class_id\u5fc5\u987b\u5b58\u5728\u3002\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Mysql", "slug": "Mysql", "permalink": "/Xuxx_Blogs/tag/Mysql/"}, {"name": "\u6570\u636e\u5e93", "slug": "\u6570\u636e\u5e93", "permalink": "/Xuxx_Blogs/tag/\u6570\u636e\u5e93/"}]}, {"title": "SpringBoot\u4e2d\u5e38\u7528\u7684JSON\u89e3\u6790\u65b9\u6848", "date": "2020-01-02T03:50:00-00.00", "path": "/Xuxx_Blogs/archives/bj05/", "text": "\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e        -- SpringBoot\n\u672c\u6587\u6574\u7406\u4e86\u4e00\u4e0bSpringBoot\u4e2d\u5e38\u7528\u7684JSON\u89e3\u6790\u65b9\u6848\n\nHttpMessageConverter \uff0c\u8fd9\u662f\u4e00\u4e2a\u6d88\u606f\u8f6c\u6362\u5de5\u5177\uff0c\u6709\u4e24\u65b9\u9762\u7684\u529f\u80fd\uff1a\n\n\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u5bf9\u8c61\u5e8f\u5217\u5316\u6210 JSON \u5b57\u7b26\u4e32\n\u5c06\u524d\u7aef\u4f20\u6765\u7684 JSON \u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u6210 Java \u5bf9\u8c61\n\n\u6240\u6709\u7684 JSON \u751f\u6210\u90fd\u79bb\u4e0d\u5f00\u76f8\u5173\u7684 HttpMessageConverter\nSpringMVC \u81ea\u52a8\u914d\u7f6e\u4e86 Jackson \u548c Gson \u7684 HttpMessageConverter\uff0cSpring Boot \u4e2d\u53c8\u5bf9\u6b64\u505a\u4e86\u81ea\u52a8\u5316\u914d\u7f6e\uff1a\n\norg.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration\n\norg.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration\n\n\n\u6240\u4ee5\uff0c\u5982\u679c\u7528\u6237\u4f7f\u7528 jackson \u548c gson \u7684\u8bdd\uff0c==\u6ca1\u6709\u5176\u4ed6\u989d\u5916\u914d\u7f6e==\uff0c\u5219\u53ea\u9700\u8981\u6dfb\u52a0\u4f9d\u8d56\u5373\u53ef\u3002\n2. Jackson\n1.1 \u5f15\u5165web\u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n1.2 \u7f16\u5199bean\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n    //set/get/toString\u7565\n}\n\n1.3 \u7f16\u5199controller\n@RestController// @Controller + @ResponseBody\npublic class UserController {\n\n    @GetMapping(&quot;/user&quot;)\n    public List&lt;User&gt; getAllUaer() {\n        List&lt;User&gt; users = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 10; i++) {\n            User user = new User();\n            user.setId(i);\n            user.setUsername(&quot;Xuxx&gt;&gt;&quot; + i);\n            user.setAddress(&quot;\u4e2d\u56fd&gt;&gt;&quot; + i);\n            users.add(user);\n        }\n        return users;\n    }\n}\n\n1.4 \u6d4b\u8bd5\uff0c\u67e5\u770b\u7ed3\u679c\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;\n  },...\n]\n\n3. \u914d\u7f6eJackson\n1.\u95ee\u9898 - \u5355\u72ec\u914d\u7f6e Jackson\n\u4fee\u6539bean\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n    @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)\n    private Date birthday;\n    //set/get/toString\u7565\n}\n\n\u8bbf\u95ee\u7ed3\u679c\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2019-12-30&quot;\n  },...\n]\n\n2.\u89e3\u51b3 - Jackson\u7684\u5168\u5c40\u914d\u7f6e\n\u5148\u6ce8\u91ca\u4e0a\u4e00\u6b65\u4e2d\u7684@JsonFormat(pattern = \"yyyy-MM-dd\")\n2.1 \u914d\u7f6eMappingJackson2HttpMessageConverter\n\u65b0\u5efa\u914d\u7f6e\u7c7bWebMvcConfig.java\n@Configuration\npublic class WebMvcConfig {\n\n    @Bean\n    MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n        //\u914d\u7f6eJackson         \u6b64\u5904\u53ef\u914d\u7f6e\u5f88\u591a\u4e1c\u897f\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy\u5e74MM\u6708dd\u65e5&quot;));\n\n        //\u5c06\u914d\u7f6e\u597d\u7684Jackson\u6ce8\u5165\u56deMappingJackson2HttpMessageConverter\n        converter.setObjectMapper(mapper);\n        return converter;\n    }\n}\n\n\u518d\u6b21\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e3a\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2019\u5e7412\u670831\u65e5&quot;\n  },...\n]\n\n\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u6211\u53ea\u9700\u8981\u914d\u7f6e ObjectMapper\uff0c\u4e0eMappingJackson2HttpMessageConverter\u6ca1\u592a\u5927\u5173\u7cfb\uff08\u5f53\u7136\uff0c\u5b83\u6709\u5b83\u7684\u7528\u5904\uff0c\u4f8b\u5982\u8fd9\u4e9b\uff1a\uff09\n\u6240\u4ee5\u6211\u53ef\u4ee5\u91c7\u53d6\u53e6\u4e00\u79cd\u65b9\u5f0f\u6765\u914d\u7f6eJackson\u2014\u2014\u76f4\u63a5\u6ce8\u5165\u81ea\u5df1\u5b9a\u4e49\u7684ObjectMapper\uff0c\u66ff\u6362\u6389springboot\u4e2d\u81ea\u52a8\u914d\u7f6e\u7684ObjectMapper\u3002\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u6ce8\u5165\u81ea\u5df1\u914d\u7f6e\u7684\u7c7b\u6765\u66ff\u6362\u6389springboot\u4e2d\u81ea\u52a8\u914d\u7f6e\u7684\u7c7b\u7684\uff0c\u4e5f\u5c31\u662fspringboot\u4e2d\u7684\u201c\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e \u201d\u3002\n\n2.2 \u76f4\u63a5\u914d\u7f6eObjectMapper\n\u6ce8\u91ca\u4e0a\u4e00\u6b65\u7684\u914d\u7f6e\uff0c\u4fee\u6539\u914d\u7f6e\u7c7b\u4e3a\n@Configuration\npublic class WebMvcConfig {\n   @Bean\n    ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy/MM/dd&quot;));\n        return mapper;\n    }\n}\n\n\u518d\u6b21\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e3a\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2019/12/31&quot;\n  },...\n]\n\n3. Gson\n1. \u57fa\u672c\u4f7f\u7528\n\u81ea\u52a8\u5316\u914d\u7f6e\u7c7b\uff1a\norg.springframework.boot.autoconfigure.http.Gson Configuration\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration\n\n1. \u914d\u7f6e\u4f9d\u8d56\n1.1 \u6392\u9664\u9ed8\u8ba4\u7684Jackson\n&lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;!--\u6392\u9664\u9ed8\u8ba4\u7684Jackson--&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n&lt;/dependency&gt;\n\n1.2 \u5f15\u5165Gson\u4f9d\u8d56\n&lt;!--Gson--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n    &lt;artifactId&gt;gson&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n2. Bean\npublic class User {\n    private Integer id;\n    private String username;\n    private String address;\n    private Date birthday;\n    //set/get/toString\u7565\n}\n\n3. Controller\n@RestController// @Controller + @ResponseBody\npublic class UserController {\n\n    @GetMapping(&quot;/user&quot;)\n    public List&lt;User&gt; getAllUaer() {\n        List&lt;User&gt; users = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 10; i++) {\n            User user = new User();\n            user.setId(i);\n            user.setUsername(&quot;Xuxx&gt;&gt;&quot; + i);\n            user.setAddress(&quot;\u4e2d\u56fd&gt;&gt;&quot; + i);\n            user.setBirthday(new Date());\n            users.add(user);\n        }\n        return users;\n    }\n}\n\n4.\u6d4b\u8bd5\u7ed3\u679c\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;Dec 31, 2019 3:37:48 AM&quot;\n  },...\n]\n\n2. Gson\u914d\u7f6e\n1.\u914d\u7f6eGsonHttpMessageConverter\n1.1 \u521b\u5efa\u914d\u7f6e\u7c7b WebMvcConfig\n\u4e0e\u914d\u7f6eJackson\u7c7b\u4f3c\n@Configuration\npublic class WebMvcConfig {\n\n    @Bean\n    GsonHttpMessageConverter gsonHttpMessageConverter() {\n        GsonHttpMessageConverter converter = new GsonHttpMessageConverter();\n        converter.setGson(new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd&quot;).create());\n        return converter;\n    }\n\n}\n\n1.2 \u6d4b\u8bd5\u7ed3\u679c\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2019-12-31&quot;\n  },...\n]\n\n2.\u76f4\u63a5\u914d\u7f6eGson\n2.1 \u914d\u7f6e\u7c7b\n@Configuration\npublic class WebMvcConfig {\n    @Bean\n    Gson gson() {\n        return new GsonBuilder().setDateFormat(&quot;yyyy\u5e74MM\u6708dd\u65e5&quot;).create();\n    }\n}\n\n2.2 \u6d4b\u8bd5\n[\n  {\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;,\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2019\u5e7412\u670831\u65e5&quot;\n  },...\n]\n\n4. Fastjson\n1. \u4f9d\u8d56\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n    &lt;version&gt;1.2.49&lt;/version&gt;\n&lt;/dependency&gt;\n\nBean\u548cController\u90fd\u4e0e\u4e0a\u4f8b\u76f8\u540c\n2.\u914d\u7f6e\u7c7b\nFastjson\u5fc5\u987b\u81ea\u5df1\u624b\u52a8\u63d0\u4f9bHttpMessageConverter\n@Configuration\npublic class WebMvcConfig {\n    /*Fastjson\u914d\u7f6e*/\n    @Bean\n    //Fastjson\u5fc5\u987b\u81ea\u5df1\u624b\u52a8\u63d0\u4f9bHttpMessageConverter\n    FastJsonHttpMessageConverter fastJsonHttpMessageConverter() {\n        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();\n        converter.setDefaultCharset(Charset.forName(&quot;utf8&quot;));//\u9ed8\u8ba4\u7f16\u7801\u65f6\u4e2d\u6587\u4e71\u7801\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setDateFormat(&quot;yyyy/MM/dd&quot;);//\u8bbe\u7f6e\u65e5\u671f\u683c\u5f0f\n        converter.setFastJsonConfig(fastJsonConfig);\n        return converter;\n    }\n\n3.\u6d4b\u8bd5\u7ed3\u679c\n[\n  {\n    &quot;address&quot;: &quot;\u4e2d\u56fd&gt;&gt;0&quot;,\n    &quot;birthday&quot;: &quot;2020/01/02&quot;,\n    &quot;id&quot;: 0,\n    &quot;username&quot;: &quot;Xuxx&gt;&gt;0&quot;\n  },..\n]\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "SpringBoot\u57fa\u7840\u914d\u7f6e/\u6ce8\u89e3", "date": "2019-12-30T00:58:00-00.00", "path": "/Xuxx_Blogs/archives/bj03/", "text": "1. \u5c5e\u6027\u6ce8\u5165\n1. @Value\n\u5b9e\u4f53\u7c7b\n@Component\npublic class Book {\n\n    @Value(&quot;${book.id}&quot;)\n    private Long id;\n    @Value(&quot;${book.name}&quot;)\n    private String name;\n    @Value(&quot;${book.author}&quot;)\n    private String author;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u914d\u7f6e\u6587\u4ef6\nbook.id=1\nbook.name=Java\u5f00\u53d1\nbook.author=Xuxx\n\n\u6d4b\u8bd5\n@Autowired\n    Book book;\n\n    @Test\n    void contextLoads() {\n        System.out.println(book);\n    }\n\n2.  @PropertySource\n\u521b\u5efa\u914d\u7f6e\u6587\u4ef6book.properties\nbook.id=1\nbook.name=Java\u5f00\u53d12.0\nbook.author=Xuxx\n\n\u5b9e\u4f53\u7c7b\n@Component\n@PropertySource(value = &quot;classpath:book.properties&quot;)\npublic class Book {\n\n    @Value(&quot;${book.id}&quot;)\n    private Long id;\n    @Value(&quot;${book.name}&quot;)\n    private String name;\n    @Value(&quot;${book.author}&quot;)\n    private String author;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u6d4b\u8bd5\n@Autowired\n    Book book;\n\n    @Test\n    void contextLoads() {\n        System.out.println(book);\n    }\n\n3. \u7c7b\u578b\u5b89\u5168\u7684\u5c5e\u6027\u6ce8\u5165  @ConfigurationProperties\n\u5c5e\u4e8espringboot\n\u521b\u5efa\u914d\u7f6e\u6587\u4ef6book.properties\nbook.id=1\nbook.name=Java\u5f00\u53d13.0\nbook.author=Xuxx\n\n\u5b9e\u4f53\u7c7b\n@Component\n@PropertySource(value = &quot;classpath:book.properties&quot;)\n@ConfigurationProperties(prefix = &quot;book&quot;)\npublic class Book {\n    private Long id;\n    private String name;\n    private String author;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u6d4b\u8bd5\n@Autowired\n    Book book;\n\n    @Test\n    void contextLoads() {\n        System.out.println(book);\n    }\n\n2. yaml\u5c5e\u6027\u6ce8\u5165\n\u5b9e\u4f53\u7c7b\n@Component\n@ConfigurationProperties(prefix = &quot;student&quot;)\npublic class Student {\n    private Long id;\n    private String name;\n    private int age;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u914d\u7f6e\u6587\u4ef6 application.yaml\n\u5907\u6ce8\uff1aspringboot2.16\u6682\u65f6\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49yaml\nstudent:\n  id: 1\n  name: xuxx\n  age: 21\n\n\u6d4b\u8bd5\n@Autowired\n    Student student;\n\n    @Test\n    void contextLoads02() {\n        System.out.println(student);\n    }\n\n1. \u6570\u7ec4\n\u5b9e\u4f53\u7c7b\n@Component\n@ConfigurationProperties(prefix = &quot;class&quot;)\npublic class Class {\n    private String class_name;\n     private List&lt;String&gt; teachers;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u914d\u7f6e\u6587\u4ef6 application.yaml\nclass:\n  class_name: java\u4e00\u73ed\n  teachers:\n    - \u5f20\u4e09\n    - \u674e\u56db\n    - \u738b\u4e94\n\n2. \u6570\u7ec4+\u5bf9\u8c61\n\u5b9e\u4f53\u7c7b\n@Component\n@ConfigurationProperties(prefix = &quot;class&quot;)\npublic class Class {\n    private String class_name;\n    private List&lt;String&gt; teachers;\n    private List&lt;Student&gt; students;\n    //get/set/toString\u65b9\u6cd5\u7565\n\n\u914d\u7f6e\u6587\u4ef6 application.yaml\nclass:\n  class_name: java\u4e00\u73ed\n  teachers:\n    - \u5f20\u4e09\n    - \u674e\u56db\n    - \u738b\u4e94\n  students:\n    - id: 1\n      name: xuxx_01\n      age: 18\n    - id: 2\n      name: xuxx_02\n      age: 19\n\n3. Profile\n1. properties \u914d\u7f6e\n\u4e00\u4e2a\u5e94\u7528\u4e3a\u4e86\u5728\u4e0d\u540c\u7684\u73af\u5883\u4e0b\u5de5\u4f5c\uff0c\u5e38\u5e38\u4f1a\u6709\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u4ee3\u7801\u903b\u8f91\u5904\u7406\u3002Spring Boot \u5bf9\u6b64\u63d0\u4f9b\u4e86\u7b80\u4fbf\u7684\u652f\u6301\u3002\n\u5173\u952e\u8bcd\uff1a @Profile\u3001spring.profiles.active\n\u5047\u8bbe\uff0c\u4e00\u4e2a\u5e94\u7528\u7684\u5de5\u4f5c\u73af\u5883\u6709\uff1adev\u3001test\u3001prod\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0 4 \u4e2a\u914d\u7f6e\u6587\u4ef6\uff1a\n\napplcation.properties - \u516c\u5171\u914d\u7f6e\napplication-dev.properties - \u5f00\u53d1\u73af\u5883\u914d\u7f6e\napplication-test.properties - \u6d4b\u8bd5\u73af\u5883\u914d\u7f6e\napplication-prod.properties - \u751f\u4ea7\u73af\u5883\u914d\u7f6e\n\n\u5728 applcation.properties \u6587\u4ef6\u4e2d\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u6765\u6fc0\u6d3b profile\uff1a\n\nspring.profiles.active = test\n2. yml \u914d\u7f6e\n\u4e0e properties \u6587\u4ef6\u7c7b\u4f3c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6dfb\u52a0 4 \u4e2a\u914d\u7f6e\u6587\u4ef6\uff1a\n\napplcation.yml - \u516c\u5171\u914d\u7f6e\napplication-dev.yml - \u5f00\u53d1\u73af\u5883\u914d\u7f6e\napplication-test.yml - \u6d4b\u8bd5\u73af\u5883\u914d\u7f6e\napplication-prod.yml - \u751f\u4ea7\u73af\u5883\u914d\u7f6e\n\n\u5728 applcation.yml \u6587\u4ef6\u4e2d\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u6765\u6fc0\u6d3b profile\uff1a\n\nspring:\n  profiles:\n    active: prod\n\u6b64\u5916\uff0cyml \u6587\u4ef6\u4e5f\u53ef\u4ee5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b8c\u6210\u6240\u6709 profile \u7684\u914d\u7f6e\uff1a\n\n# \u6fc0\u6d3b prod\nspring:\n  profiles:\n    active: prod\n# \u4e5f\u53ef\u4ee5\u540c\u65f6\u6fc0\u6d3b\u591a\u4e2a profile\n# spring.profiles.active: prod,proddb,prodlog\n---\n# dev \u914d\u7f6e\nspring:\n  profiles: dev\n\n# \u7565\u53bb\u914d\u7f6e\n\n---\nspring:\n  profiles: test\n\n# \u7565\u53bb\u914d\u7f6e\n\n---\nspring.profiles: prod\nspring.profiles.include:\n  - proddb\n  - prodlog\n\n---\nspring:\n  profiles: proddb\n\n# \u7565\u53bb\u914d\u7f6e\n\n---\nspring:\n  profiles: prodlog\n# \u7565\u53bb\u914d\u7f6e\n\u6ce8\u610f\uff1a\u4e0d\u540c profile \u4e4b\u95f4\u901a\u8fc7 --- \u5206\u5272\n3. \u4f7f\u7528 @Profile\n\u4f7f\u7528 @Profile \u6ce8\u89e3\u53ef\u4ee5\u6307\u5b9a\u7c7b\u6216\u65b9\u6cd5\u5728\u7279\u5b9a\u7684 Profile \u73af\u5883\u751f\u6548\u3002\n\u4fee\u9970\u7c7b\n\n@Configuration\n@Profile(\"production\")\npublic class JndiDataConfig {\n\n    @Bean(destroyMethod=\"\")\n    public DataSource dataSource() throws Exception {\n        Context ctx = new InitialContext();\n        return (DataSource) ctx.lookup(\"java:comp/env/jdbc/datasource\");\n    }\n}\n\u4fee\u9970\u6ce8\u89e3\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Profile(\"production\")\npublic @interface Production {\n}\n\u4fee\u9970\u65b9\u6cd5\n\n@Configuration\npublic class AppConfig {\n\n    @Bean(\"dataSource\")\n    @Profile(\"development\")\n    public DataSource standaloneDataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .setType(EmbeddedDatabaseType.HSQL)\n            .addScript(\"classpath:com/bank/config/sql/schema.sql\")\n            .addScript(\"classpath:com/bank/config/sql/test-data.sql\")\n            .build();\n    }\n\n    @Bean(\"dataSource\")\n    @Profile(\"production\")\n    public DataSource jndiDataSource() throws Exception {\n        Context ctx = new InitialContext();\n        return (DataSource) ctx.lookup(\"java:comp/env/jdbc/datasource\");\n    }\n}\n4. \u6fc0\u6d3b profile\u7684\u65b9\u5f0f\n\u63d2\u4ef6\u6fc0\u6d3b profile\n\nspring-boot:run -Drun.profiles=prod\nmain \u65b9\u6cd5\u6fc0\u6d3b profile\n\n--spring.profiles.active=prod\njar \u6fc0\u6d3b profile\n\njava -jar -Dspring.profiles.active=prod *.jar\n\u5728 Java \u4ee3\u7801\u4e2d\u6fc0\u6d3b profile\n\u76f4\u63a5\u6307\u5b9a\u73af\u5883\u53d8\u91cf\u6765\u6fc0\u6d3b profile\uff1a\n\nSystem.setProperty(\"spring.profiles.active\", \"test\");\n\u5728 Spring \u5bb9\u5668\u4e2d\u6fc0\u6d3b profile\uff1a\n\nAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\nctx.getEnvironment().setActiveProfiles(\"development\");\nctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);\nctx.refresh();\n4. Banner\n\u53ea\u8981\u4f60\u5728 resources \u76ee\u5f55\u4e0b\u653e\u7f6e\u540d\u4e3a banner.txt\u3001banner.gif \u3001banner.jpg \u6216 banner.png \u7684\u6587\u4ef6\uff0cSpring Boot \u4f1a\u81ea\u52a8\u52a0\u8f7d\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u542f\u52a8\u65f6\u6253\u5370\u7684 logo\u3002\n\n\u5bf9\u4e8e\u6587\u672c\u6587\u4ef6\uff0cSpring Boot \u4f1a\u5c06\u5176\u76f4\u63a5\u8f93\u51fa\u3002\n\u5bf9\u4e8e\u56fe\u50cf\u6587\u4ef6\uff08 banner.gif \u3001banner.jpg \u6216 banner.png \uff09\uff0cSpring Boot \u4f1a\u5c06\u56fe\u50cf\u8f6c\u4e3a ASCII \u5b57\u7b26\uff0c\u7136\u540e\u8f93\u51fa\u3002\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}, {"name": "Spring Boot", "slug": "Spring Boot", "permalink": "/Xuxx_Blogs/tag/Spring Boot/"}]}, {"title": "Spring+Spring MVC\u73af\u5883\uff08Java\u914d\u7f6e\uff09\u642d\u5efa", "date": "2019-12-29T05:58:00-00.00", "path": "/Xuxx_Blogs/archives/bj02/", "text": "1.\u521b\u5efa\u5de5\u7a0b\n\u6dfb\u52a0spring-webmvc\u4f9d\u8d56\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.xuxx&lt;/groupId&gt;\n    &lt;artifactId&gt;java_ssm&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n\n2.\u521b\u5efajava\u914d\u7f6e\u7c7b\n1. Spring\u914d\u7f6e\u7c7b\npackage com.xuxx.controller;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.stereotype.Controller;\n\n@Configuration\n@ComponentScan(basePackages = &quot;com.xuxx&quot;,useDefaultFilters = true,\n        excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class)})\npublic class SpringConfig {\n\n}\n\n2.SpringMvc\u914d\u7f6e\u7c7b\npackage com.xuxx.controller;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.stereotype.Controller;\n\n@Configuration\n@ComponentScan(basePackages = &quot;com.xuxx&quot;,useDefaultFilters = false,\n        includeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class)})\npublic class SpringMvcConfig {\n}\n\n3.web.xml \u914d\u7f6e\u7c7b\npackage com.xuxx.controller;\n\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\n\n/**\n * web.xml \u914d\u7f6e\u7c7b\n */\npublic class WebInit implements WebApplicationInitializer {\n    @Override\n    public void onStartup(javax.servlet.ServletContext servletContext) throws ServletException {\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.setServletContext(servletContext);\n        context.register(SpringMvcConfig.class);\n\n        ServletRegistration.Dynamic springmvc = servletContext.addServlet(&quot;springmvc&quot;, new DispatcherServlet(context));\n        springmvc.addMapping(&quot;/&quot;);\n        springmvc.setLoadOnStartup(1);\n    }\n}\n\n3.\u6d4b\u8bd5\n1.\u672a\u6ce8\u5165service\n1.controller\npackage com.xuxx.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @GetMapping(value = &quot;/hello&quot;, produces = &quot;text/html;charset=utf-8&quot;)\n    public String hello() {\n        return &quot;hello \u671f\u672b\u8003\u8bd5&quot;;\n    }\n}\n\n\u6b64\u65f6\u6ca1\u95ee\u9898\n\u4f46\u662f\n2.\u6ce8\u5165service\n@RestController\npublic class HelloController {\n    @Autowired\n    HelloService helloService;\n    @GetMapping(value = &quot;/hello&quot;, produces = &quot;text/html;charset=utf-8&quot;)\n    public String hello() {\n        //        return &quot;hello \u671f\u672b\u8003\u8bd5&quot;;\n        return helloService.sayHello();\n    }\n}\n\n@Service\npublic class HelloService {\n    public String sayHello() {\n        return &quot;Hello \u671f\u672b\u8003\u8bd5&quot;;\n    }\n}\n\n\u6267\u884c\u62a5\u9519\n29-Dec-2019 05:01:12.457 \u4e25\u91cd [RMI TCP Connection(3)-127.0.0.1] org.springframework.web.servlet.FrameworkServlet.initServletBean Context initialization failed\n    org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;helloController&#39;: Unsatisfied dependency expressed through field &#39;helloService&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;com.xuxx.service.HelloService&#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n\n\u539f\u56e0\u662fservice\u6ca1\u6709\u6ce8\u5165\u8fdb\u6765\uff0c\u6b64\u65f6\u53ea\u52a0\u8f7d\u4e86springmvc\u7684\u914d\u7f6e\u7c7b\uff0c\u8fd8\u9700\u8981\u52a0\u8f7dspring\u7684\u914d\u7f6e\u7c7b\n/**\n * spring mvc\u914d\u7f6e\u7c7b\n */\n@Configuration\n@ComponentScan(basePackages = &quot;com.xuxx&quot;,useDefaultFilters = false,\n        includeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class),\n                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Configuration.class)})\npublic class SpringMvcConfig {\n}\n\n\u6b64\u65f6\u5728\u8fd0\u884c\u5c31\u6ca1\u95ee\u9898\u4e86\uff08\u6ce8\uff1a\u5f00\u53d1\u4e2d\u76f4\u63a5\u5168\u90e8\u6ce8\u5165\u5c31\u884c\uff0c\u4e0d\u7528\u518d\u5355\u72ec\u914d\u7f6e@ComponentScan.Filter\uff09\n4.\u6269\u5c55    WebMvcConfigurationSupport\n\u6ce8\uff1aWebMvcConfigurationSupport\u4e2d\u53ef\u4ee5\u914d\u7f6espringmvc.xml\u4e2d\u6240\u6709\u7684\u65b9\u6cd5\n\n1.\u914d\u7f6e\u9759\u6001\u8d44\u6e90\u89e3\u6790\u5668\n1.1.\u5728resources\u76ee\u5f55\u4e0b\u521b\u5efastatic\u76ee\u5f55\uff0c\u521b\u5efahello.HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello world&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n1.2\u4fee\u6539SpringMvc\u914d\u7f6e\u7c7b,\u7ee7\u627fWebMvcConfigurationSupport\n@Configuration\n@ComponentScan(basePackages = &quot;com.xuxx&quot;, useDefaultFilters = false,\n        includeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class),@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Configuration.class)})\npublic class SpringMvcConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {    \n        registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);\n\n    }\n}\n\n1.3\u8bbf\u95ee\u9759\u6001\u8d44\u6e90,\u6210\u529f\n\n2.\u914d\u7f6e\u62e6\u622a\u5668\n2.1\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\uff0c\u7ee7\u627fHandlerInterceptor\uff0c\u91cd\u65b0\u5176\u65b9\u6cd5\npackage com.xuxx.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class MyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(&quot;preHandle\u65b9\u6cd5\u6267\u884c\u4e86&quot;);\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        System.out.println(&quot;postHandle\u65b9\u6cd5\u6267\u884c\u4e86&quot;);\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        System.out.println(&quot;afterCompletion\u65b9\u6cd5\u6267\u884c\u4e86&quot;);\n    }\n}\n\n2.2\u914d\u7f6e\n/**\n * spring mvc\u914d\u7f6e\u7c7b\n */\n....\n    @Bean\n    MyInterceptor myInterceptor() {\n        return new MyInterceptor();\n    }\n\n    @Override\n    protected void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(myInterceptor()).addPathPatterns(&quot;/**&quot;);\n    }\n\n2.3\u8bbf\u95ee\u4efb\u610f\u8def\u5f84\n\n3.\u914d\u7f6efastjson\n3.1\u6dfb\u52a0fastjson \u4f9d\u8d56\n&lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;1.2.62&lt;/version&gt;\n&lt;/dependency&gt;\n\n3.2\u7f16\u5199controller\npackage com.xuxx.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\npublic class JsonController {\n    @GetMapping(value = &quot;/data&quot;, produces = &quot;text/html;charset=utf-8&quot;)\n    public List&lt;String&gt; getData() {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 10; i++) {\n            list.add(&quot;xuxx &gt;&gt; &quot; + i);\n        }\n        return list;\n    }\n}\n\n3.3\u914d\u7f6e\n/**\n * spring mvc\u914d\u7f6e\u7c7b\n */\n....\n    @Override\n    protected void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();\n        converters.add(converter);\n    }\n\n3.4\u6d4b\u8bd5\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}]}, {"title": "Spring+Spring MVC\u73af\u5883\uff08Xml\uff09\u642d\u5efa", "date": "2019-12-29T02:33:00-00.00", "path": "/Xuxx_Blogs/archives/bj01/", "text": "1.\u521b\u5efa\u5de5\u7a0b\n1.\u6dfb\u52a0spring-webmvc\u4f9d\u8d56\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.xuxx&lt;/groupId&gt;\n    &lt;artifactId&gt;java_ssm&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n\n2.\u6253\u5f00\u9879\u76ee\u7ed3\u6784\uff0c\u6dfb\u52a0webapp\u76ee\u5f55\u548cweb.xml\u6587\u4ef6\n\n2.\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\n1.spring\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;\n\n    &lt;!--\u5f00\u542f\u5305\u626b\u63cf \u6392\u9664\u52a0\u4e86@Controller\u7684\u7c7b--&gt;\n    &lt;context:component-scan base-package=&quot;com.xuxx&quot; use-default-filters=&quot;true&quot; &gt;\n        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n    &lt;/context:component-scan&gt;\n&lt;/beans&gt;\n\n2.spring-mvc\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans....\n&lt;!--\u5f00\u542f\u5305\u626b\u63cf \u53ea\u626b\u63cf\u5e26\u6709@Controller\u7684\u7c7b--&gt;\n    &lt;context:component-scan base-package=&quot;com.xuxx&quot; use-default-filters=&quot;true&quot;&gt;\n        &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n    &lt;/context:component-scan&gt;\n\n    &lt;!--\u5f00\u542fmvc driven--&gt;\n    &lt;mvc:annotation-driven/&gt;\n&lt;/beans&gt;\n\n3.web.xml\uff08\u7b80\u6613\u7248\uff09\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n    &lt;!--spring\u7684\u914d\u7f6e--&gt;\n    &lt;!--\u52a0\u8f7dspring\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84--&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;!--\u542f\u52a8Web\u5bb9\u5668\u65f6\uff0c\u81ea\u52a8\u88c5\u914dApplicationContext.xml\u7684\u914d\u7f6e\u4fe1\u606f--&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n\n    &lt;!--spring Mvc\u7684\u914d\u7f6e--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;\n        &lt;!--\u524d\u7aef\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u63a7\u5236\u6240\u6709\u8bf7\u6c42--&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n        &lt;!--\u5173\u4e8e\u00a0&lt;url-pattern&gt;&lt;/url-pattern&gt;\u6709\u4e09\u79cd\u914d\u7f6e\u65b9\u5f0f:\n         (1)&lt;url-pattern&gt; / &lt;/url-pattern&gt; \uff0c \u00a0/\uff1a\u914d\u7f6e/\u7684\u8bdd\uff0curl\u4e0d\u4f1a\u62e6\u622a\u8bf8\u5982\uff1ajsp\uff0chtml \uff0c .action\u7684\u8bf7\u6c42\uff0c\u4f7f\u7528\u8be5\u6a21\u5f0f\u7684\u8bdd\uff0c\u90a3\u4e48 \u00a0 \u00a0 \u00a0spring-mvc.xml\u4e2d\u914d\u7f6ename\u4e0d\u80fd\u6709\u6269\u5c55\u540d \uff0c\u5982\u4e0b\uff1a\n         &lt;bean name=&quot;/userController&quot; class=&quot;com.neusoft.springmvc.controller.UserController&quot;&gt;&lt;/bean&gt;\uff08\u6b63\u786e\uff09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n         &lt;bean name=&quot;/userController.action&quot; class=&quot;com.neusoft.springmvc.controller.UserController&quot;&gt;&lt;/bean&gt;\uff08\u9519\u8bef\uff09\n\n         (2)&lt;url-pattern&gt; / *&lt;/url-pattern&gt; \u00a0\uff0c\u00a0/*\uff0c\u56e0\u4e3a\u8fd9\u4e2aurl\u4f1a\u62e6\u622a\u6240\u6709\u8bf7\u6c42\uff0c\u5305\u62ec\uff1a.jsp \u00a0.html \u00a0.action .do .css\n             \u5982\u679c\u8bbf\u95ee\u4ee5\u4e0a\u7684\u8d44\u6e90\u4f1a\u62a5404\u9519\u8bef\u00a0\uff0c\u6240\u4ee5\u914d\u7f6e\u65f6\uff0c\u4e0d\u8981\u7528/*\uff0c \u8fd9\u4e2a\u4e00\u822c\u662f\u8fc7\u6ee4\u5668\uff0c\u914d\u7f6e\u65f6\u5019\u624d\u7528\u7684\u3002\n\n         (3)&lt;url-pattern&gt; *.action&lt;/url-pattern&gt; \u00a0 \u4e0d\u4f1a\u62e6\u622a\u8bf8\u5982 .jsp .html \u7b49\u8d44\u6e90\u8bf7\u6c42\uff0c\u53ea\u4f1a\u62e6\u622a.action\u8bf7\u6c42\uff0c\u6240\u6709\u5728spring-mvc.xml\u4e2d\u914d \u00a0 \u00a0 \u00a0 \u7f6ename\u7684\u65f6\u5019\u5fc5\u987b\u8981\u6709\u6269\u5c55\u540d\uff0c\u5982\u4e0b\uff1a \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;bean name=&quot;/userController&quot; class=&quot;com.neusoft.springmvc.controller.UserController&quot;&gt;&lt;/bean&gt;\uff08\u9519\u8bef\uff09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n          &lt;bean name=&quot;/userController.action&quot; class=&quot;com.neusoft.springmvc.controller.UserController&quot;&gt;&lt;/bean&gt;\uff08\u6b63\u786e\uff09   --&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n\n4.web.xml(\u8be6\u7ec6\u7248)\n&lt;!DOCTYPE web-app PUBLIC\n\u00a0&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;\n\u00a0&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;\n&lt;!--\u6ce8\u610f\u7248\u672c\u2191\u2191\u2191--&gt;\n\u00a0\n&lt;web-app&gt;\n\u00a0 &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n\u00a0\n\u00a0 &lt;!--welcome pages--&gt;\n\u00a0 &lt;welcome-file-list&gt;\n\u00a0 \u00a0 &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n\u00a0 &lt;/welcome-file-list&gt;\n\u00a0\n\u00a0 &lt;!--applicationContext.xml\u662f\u5168\u5c40\u7684\uff0c\u5e94\u7528\u4e8e\u591a\u4e2aserverlet\uff0c\u914d\u5408listener\u4e00\u8d77\u4f7f\u7528--&gt;\n\u00a0 &lt;!-- \u5982\u679c\u662f\u76d1\u542c\u591a\u4e2a\u6587\u4ef6\uff0c\u53ef\u7528\u2018\uff0c\u2019\u9694\u5f00 --&gt;\n\u00a0\n\u00a0 &lt;context-param&gt;\n\u00a0 \u00a0 &lt;description&gt;\u914d\u7f6eSpring\u914d\u7f6e\u6587\u4ef6\u8def\u5f84&lt;/description&gt;\n\u00a0 \u00a0 &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n\u00a0\n\u00a0 \u00a0 &lt;param-value&gt;classpath:spring/applicationContext.xml&lt;/param-value&gt;\n\u00a0 &lt;/context-param&gt;\n\u00a0\n\u00a0 &lt;!-- \u5b9a\u4e49SPRING\u76d1\u542c\u5668\uff0c\u52a0\u8f7dspring --&gt;\n\u00a0 &lt;listener&gt;\n\u00a0 \u00a0 &lt;listener-class&gt;\n\u00a0 \u00a0 \u00a0 org.springframework.web.context.request.RequestContextListener\n\u00a0 \u00a0 &lt;/listener-class&gt;\n\u00a0 &lt;/listener&gt;\n\u00a0\n\u00a0 &lt;listener&gt;\n\u00a0 \u00a0 &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n\u00a0 &lt;/listener&gt;\n\u00a0\n\u00a0 &lt;!--log4j\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d--&gt;\n\u00a0 &lt;context-param&gt;\n\u00a0 \u00a0 &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n\u00a0 \u00a0 &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;\n\u00a0 &lt;/context-param&gt;\n\u00a0 &lt;!--\u542f\u52a8\u4e00\u4e2awatchdog\u7ebf\u7a0b\u6bcf1800\u79d2\u626b\u63cf\u4e00\u4e0blog4j\u914d\u7f6e\u6587\u4ef6\u7684\u53d8\u5316--&gt;\n\u00a0 &lt;context-param&gt;\n\u00a0 \u00a0 &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt;\n\u00a0 \u00a0 &lt;param-value&gt;1800000&lt;/param-value&gt;\n\u00a0 &lt;/context-param&gt;\n\u00a0 &lt;context-param&gt;\n\u00a0 \u00a0 &lt;param-name/&gt;\n\u00a0 \u00a0 &lt;param-value/&gt;\n\u00a0 &lt;/context-param&gt;\n\u00a0\n\u00a0 &lt;!-- \u914d\u7f6eSpring\u5b57\u7b26\u7f16\u7801\u8fc7\u6ee4\u5668 --&gt;\n\u00a0 &lt;filter&gt;\n\u00a0 \u00a0 &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\n\u00a0 \u00a0 &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n\u00a0 \u00a0 &lt;init-param&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-name&gt;encoding&lt;/param-name&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n\u00a0 \u00a0 &lt;/init-param&gt;\n\u00a0 \u00a0 &lt;init-param&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-name&gt;forceEncoding&lt;/param-name&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-value&gt;true&lt;/param-value&gt;\n\u00a0 \u00a0 &lt;/init-param&gt;\n\u00a0 &lt;/filter&gt;\n\u00a0 &lt;filter-mapping&gt;\n\u00a0 \u00a0 &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\n\u00a0 \u00a0 &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n\u00a0 &lt;/filter-mapping&gt;\n\u00a0\n\u00a0 &lt;!-- Spring MVC \u6838\u5fc3\u63a7\u5236\u5668 DispatcherServlet \u914d\u7f6e\u5f00\u59cb --&gt;\n\u00a0 &lt;!--\u914d\u7f6espringmvc DispatcherServlet--&gt;\n\u00a0 &lt;servlet&gt;\n\u00a0 \u00a0 &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;\n\u00a0 \u00a0 &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\u00a0 \u00a0 &lt;init-param&gt;\n\u00a0 \u00a0 \u00a0 &lt;!--Sources\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u4e0b\u9700\u8981\u65b0\u5efa\u4e00\u4e2aspring\u6587\u4ef6\u5939--&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n\u00a0 \u00a0 \u00a0 &lt;!-- \u5982\u679c\u662f\u76d1\u542c\u591a\u4e2a\u6587\u4ef6\uff0c\u53ef\u7528\u2018\uff0c\u2019\u9694\u5f00 --&gt;\n\u00a0 \u00a0 \u00a0 &lt;param-value&gt;classpath:spring/spring-mvc.xml&lt;/param-value&gt;\n\u00a0 \u00a0 &lt;/init-param&gt;\n\u00a0 \u00a0 &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n\u00a0 \u00a0 &lt;async-supported&gt;true&lt;/async-supported&gt;\n\u00a0 &lt;/servlet&gt;\n\u00a0\n\u00a0 &lt;!-- \u62e6\u622a\u8bbe\u7f6e --&gt;\n\u00a0 &lt;servlet-mapping&gt;\n\u00a0 \u00a0 &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;\n\u00a0 \u00a0 &lt;!-- \u6b64\u5904\u53ef\u4ee5\u53ef\u4ee5\u914d\u7f6e\u6210*.do\uff0c\u5bf9\u5e94struts\u7684\u540e\u7f00\u4e60\u60ef --&gt;\n\u00a0 \u00a0 &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n\u00a0 &lt;/servlet-mapping&gt;\n\u00a0 &lt;!-- Spring MVC \u6838\u5fc3\u914d\u7f6e\u7ed3\u675f --&gt;\n\u00a0\n\u00a0 &lt;!-- \u6fc0\u6d3bTomcat\u7684defaultServlet\u6765\u5904\u7406\u9759\u6001\u6587\u4ef6 --&gt;\n\u00a0 &lt;servlet-mapping&gt;\n\u00a0 \u00a0 &lt;servlet-name&gt;default&lt;/servlet-name&gt;\n\u00a0 \u00a0 &lt;url-pattern&gt;/static/*&lt;/url-pattern&gt;\n\u00a0 &lt;/servlet-mapping&gt;\n\u00a0\n\u00a0 &lt;!-- session \u65f6\u95f4 --&gt;\n\u00a0 &lt;session-config&gt;\n\u00a0 \u00a0 &lt;session-timeout&gt;30&lt;/session-timeout&gt;\n\u00a0 &lt;/session-config&gt;\n\u00a0\n&lt;/web-app&gt;\n\n3.\u6d4b\u8bd5web-mvc\u73af\u5883\n1.\u6dfb\u52a0\u672c\u5730Tomcat\n\u6ce8\u610f\uff1a\u8bbf\u95ee\u65f6\u7684\u8def\u5f84\u52a0\u6ca1\u52a0\u9879\u76ee\u540d\uff08\u90fd\u662f\u6ceaimg\uff09\n2.\u65b0\u5efacontroller\u548cservice\ncontroller\n@RestController\npublic class HelloController {\n    @Autowired\n    HelloService helloService;\n\n    @GetMapping(&quot;/hello&quot;)\n    //@GetMapping(value = &quot;/hello&quot;,produces = &quot;text/html;charset=utf-8&quot;) \u53ef\u4ee5\u7b80\u5355\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\n    public String hello() {\n        return helloService.sayHello();\n    }\n}\n\nservice\n@Service\npublic class HelloService {\n    public String sayHello() {\n        return &quot;Hello World&quot;;\n    }\n}\n\n3.\u8bbf\u95ee,\u6210\u529f\n\n", "categories": [{"name": "\u7b14\u8bb0", "slug": "\u7b14\u8bb0", "permalink": "/Xuxx_Blogs/category/\u7b14\u8bb0/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/Xuxx_Blogs/tag/Java/"}, {"name": "Spring", "slug": "Spring", "permalink": "/Xuxx_Blogs/tag/Spring/"}]}, {"title": "\u6211\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0", "date": "2019-12-26T01:55:00-00.00", "path": "/Xuxx_Blogs/archives/my-first/", "text": "\u8fd9\u662f\u6211\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\u3002\u6587\u7ae0\u4f7f\u7528 GitHub \u7ba1\u7406\uff0c\u5e76\u901a\u8fc7 GitHub Actions \u81ea\u52a8\u6784\u5efa\u4e0e\u53d1\u5e03\uff01\n", "categories": [{"name": "\u9ed8\u8ba4\u5206\u7c7b", "slug": "\u9ed8\u8ba4\u5206\u7c7b", "permalink": "/Xuxx_Blogs/category/\u9ed8\u8ba4\u5206\u7c7b/"}], "tags": [{"name": "\u535a\u5ba2", "slug": "\u535a\u5ba2", "permalink": "/Xuxx_Blogs/tag/\u535a\u5ba2/"}, {"name": "GitHub", "slug": "GitHub", "permalink": "/Xuxx_Blogs/tag/GitHub/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2019-12-26T02:26:00-00.00", "path": "/Xuxx_Blogs/about/", "text": "\u8fd9\u91cc\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u901a\u8fc7 GitHub \u7ba1\u7406\u4e0e\u6784\u5efa\u3002  \u2014\u2014Xuxx.\n\u8054\u7cfb\u6211\nEmail: Xuxx3319@gmail.com\n", "categories": [], "tags": []}]}