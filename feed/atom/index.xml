<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/Xuxx_Blogs/</id><title>Xuxx的个人博客。</title><updated>2020-12-22T03:51:17.910594+08:06</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email></author><link href="/Xuxx_Blogs/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><logo>${static_prefix}logo.png</logo><subtitle>坚持有效行动，改变自然发生——致自己。</subtitle><entry><id>/Xuxx_Blogs/archives/bj33/</id><title>Docker Compose笔记</title><updated>2020-12-22T03:51:17.910893+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 &lt;code&gt;OpenStack&lt;/code&gt; 中的 &lt;code&gt;Heat&lt;/code&gt; 十分类似。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。&lt;/p&gt;
&lt;p&gt;通过第一部分中的介绍，知道使用一个 &lt;code&gt;Dockerfile&lt;/code&gt; 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 恰好满足了这样的需求。它允许用户通过一个单独的 &lt;code&gt;docker-compose.yml&lt;/code&gt; 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 中有两个重要的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。&lt;/li&gt;
&lt;li&gt;项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 &lt;code&gt;Compose&lt;/code&gt; 来进行编排管理。&lt;/p&gt;
&lt;h2&gt;安装与卸载&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 支持 Linux、macOS、Windows 10 三大平台。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 可以通过 Python 的包管理工具 &lt;code&gt;pip&lt;/code&gt; 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Docker Desktop for Mac/Windows&lt;/code&gt; 自带 &lt;code&gt;docker-compose&lt;/code&gt; 二进制文件，安装 Docker 之后可以直接使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose --versiondocker-compose version 1.25.5, build 4667896b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Linux 系统请使用以下介绍的方法安装。&lt;/p&gt;
&lt;h3&gt;二进制包安装&lt;/h3&gt;
&lt;p&gt;在 Linux 上的也安装十分简单，从 &lt;a href="https://github.com/docker/compose/releases"&gt;官方 GitHub Release&lt;/a&gt; 处直接下载编译好的二进制文件即可。&lt;/p&gt;
&lt;p&gt;例如，在 Linux 64 位系统上直接下载对应的二进制包。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-&lt;span class="sb"&gt;`&lt;/span&gt;uname -s&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="sb"&gt;`&lt;/span&gt;uname -m&lt;span class="sb"&gt;`&lt;/span&gt; &amp;gt; /usr/local/bin/docker-compose

$ sudo chmod +x /usr/local/bin/docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;PIP 安装&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt; &lt;code&gt;x86_64&lt;/code&gt; 架构的 Linux 建议按照上边的方法下载二进制包进行安装，如果您计算机的架构是 &lt;code&gt;ARM&lt;/code&gt; (例如，树莓派)，再使用 &lt;code&gt;pip&lt;/code&gt; 安装。&lt;/p&gt;
&lt;p&gt;这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。&lt;/p&gt;
&lt;p&gt;执行安装命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install -U docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到类似如下输出，说明安装成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Collecting docker-compose
  Downloading docker-compose-1.25.5.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;149kB&lt;span class="o"&gt;)&lt;/span&gt;: 149kB downloaded
...
Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;bash 补全命令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &amp;gt; /etc/bash_completion.d/docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;卸载&lt;/h3&gt;
&lt;p&gt;如果是二进制包方式安装的，删除二进制文件即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo rm /usr/local/bin/docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是通过 &lt;code&gt;pip&lt;/code&gt; 安装的，则执行如下命令即可删除。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip uninstall docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;术语&lt;/h3&gt;
&lt;p&gt;首先介绍几个术语。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务 (&lt;code&gt;service&lt;/code&gt;)：一个应用容器，实际上可以运行多个相同镜像的实例。&lt;/li&gt;
&lt;li&gt;项目 (&lt;code&gt;project&lt;/code&gt;)：由一组关联的应用容器组成的一个完整业务单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见，一个项目可以由多个服务（容器）关联而成，&lt;code&gt;Compose&lt;/code&gt; 面向项目进行管理。&lt;/p&gt;
&lt;h3&gt;场景&lt;/h3&gt;
&lt;p&gt;最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。&lt;/p&gt;
&lt;p&gt;下面用 &lt;code&gt;Python&lt;/code&gt; 来建立一个能够记录页面访问次数的 web 网站。&lt;/p&gt;
&lt;h4&gt;web 应用&lt;/h4&gt;
&lt;p&gt;新建文件夹，在该目录中编写 &lt;code&gt;app.py&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Redis&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World! 该页面已被访问 &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; 次。&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Dockerfile&lt;/h4&gt;
&lt;p&gt;编写 &lt;code&gt;Dockerfile&lt;/code&gt; 文件，内容为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;python:3.6-alpine&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; . /code
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /code&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install redis flask
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;docker-compose.yml&lt;/h4&gt;
&lt;p&gt;编写 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件，这个是 Compose 使用的主模板文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis:alpine&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;运行 compose 项目&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose up
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时访问本地 &lt;code&gt;5000&lt;/code&gt; 端口，每次刷新页面，计数就会加 1。&lt;/p&gt;
&lt;h2&gt;命令说明&lt;/h2&gt;
&lt;h3&gt;命令对象与格式&lt;/h3&gt;
&lt;p&gt;对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;docker-compose [COMMAND] --help&lt;/code&gt; 或者 &lt;code&gt;docker-compose help [COMMAND]&lt;/code&gt; 可以查看具体某个命令的使用格式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt; 命令的基本的使用格式是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker-compose &lt;span class="o"&gt;[&lt;/span&gt;-f&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;arg&amp;gt;...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;COMMAND&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;ARGS...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;命令选项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f, --file FILE&lt;/code&gt; 指定使用的 Compose 模板文件，默认为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，可以多次指定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p, --project-name NAME&lt;/code&gt; 指定项目名称，默认将使用所在目录名称作为项目名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--x-networking&lt;/code&gt; 使用 Docker 的可拔插网络后端特性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--x-network-driver DRIVER&lt;/code&gt; 指定网络后端的驱动，默认为 &lt;code&gt;bridge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; 输出更多调试信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v, --version&lt;/code&gt; 打印版本并退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;命令使用说明&lt;/h3&gt;
&lt;h4&gt;build&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose build [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;构建（重新构建）项目中的服务容器。&lt;/p&gt;
&lt;p&gt;服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。&lt;/p&gt;
&lt;p&gt;可以随时在项目目录下运行 &lt;code&gt;docker-compose build&lt;/code&gt; 来重新构建服务。&lt;/p&gt;
&lt;p&gt;选项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--force-rm&lt;/code&gt; 删除构建过程中的临时容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-cache&lt;/code&gt; 构建镜像过程中不使用 cache（这将加长构建过程）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pull&lt;/code&gt; 始终尝试通过 pull 来获取更新版本的镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;config&lt;/h4&gt;
&lt;p&gt;验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。&lt;/p&gt;
&lt;h4&gt;down&lt;/h4&gt;
&lt;p&gt;此命令将会停止 &lt;code&gt;up&lt;/code&gt; 命令所启动的容器，并移除网络&lt;/p&gt;
&lt;h4&gt;exec&lt;/h4&gt;
&lt;p&gt;进入指定的容器。&lt;/p&gt;
&lt;h4&gt;help&lt;/h4&gt;
&lt;p&gt;获得一个命令的帮助。&lt;/p&gt;
&lt;h4&gt;images&lt;/h4&gt;
&lt;p&gt;列出 Compose 文件中包含的镜像。&lt;/p&gt;
&lt;h4&gt;kill&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose kill [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过发送 &lt;code&gt;SIGKILL(终止进程)&lt;/code&gt; 信号来强制停止服务容器。&lt;/p&gt;
&lt;p&gt;支持通过 &lt;code&gt;-s&lt;/code&gt; 参数来指定发送的信号，例如通过如下指令发送 &lt;code&gt;SIGINT&lt;/code&gt; 信号。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose kill -s SIGINT&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;logs&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose logs [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 &lt;code&gt;--no-color&lt;/code&gt; 来关闭颜色。&lt;/p&gt;
&lt;p&gt;该命令在调试问题的时候十分有用。&lt;/p&gt;
&lt;h4&gt;pause&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose pause [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;暂停一个服务容器。&lt;/p&gt;
&lt;h4&gt;port&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose port [options] SERVICE PRIVATE_PORT&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;打印某个容器端口所映射的公共端口。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--protocol=proto&lt;/code&gt; 指定端口协议，tcp（默认值）或者 udp。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--index=index&lt;/code&gt; 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ps&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose ps [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;列出项目中目前的所有容器。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt; 只打印容器的 ID 信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;pull&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose pull [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拉取服务依赖的镜像。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ignore-pull-failures&lt;/code&gt; 忽略拉取镜像过程中的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;push&lt;/h4&gt;
&lt;p&gt;推送服务依赖的镜像到 Docker 镜像仓库。&lt;/p&gt;
&lt;h4&gt;restart&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose restart [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;重启项目中的服务。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 指定重启前停止容器的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;rm&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose rm [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;删除所有（停止状态的）服务容器。推荐先执行 &lt;code&gt;docker-compose stop&lt;/code&gt; 命令来停止容器。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f, --force&lt;/code&gt; 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; 删除容器所挂载的数据卷。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;run&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在指定服务上执行一个命令。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose run ubuntu ping docker.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将会启动一个 ubuntu 服务容器，并执行 &lt;code&gt;ping docker.com&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。&lt;/p&gt;
&lt;p&gt;该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。&lt;/p&gt;
&lt;p&gt;两个不同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定命令将会覆盖原有的自动运行命令；&lt;/li&gt;
&lt;li&gt;不会自动创建端口，以避免冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不希望自动启动关联的容器，可以使用 &lt;code&gt;--no-deps&lt;/code&gt; 选项，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose run --no-deps web python manage.py shell
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将不会启动 web 容器所关联的其它容器。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 后台运行容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name NAME&lt;/code&gt; 为容器指定一个名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--entrypoint CMD&lt;/code&gt; 覆盖默认的容器启动指令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e KEY=VAL&lt;/code&gt; 设置环境变量值，可多次使用选项来设置多个环境变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u, --user=""&lt;/code&gt; 指定运行容器的用户名或者 uid。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-deps&lt;/code&gt; 不自动启动关联的服务容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; 运行命令后自动删除容器，&lt;code&gt;d&lt;/code&gt; 模式下将忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p, --publish=[]&lt;/code&gt; 映射容器端口到本地主机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--service-ports&lt;/code&gt; 配置服务端口并映射到本地主机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt; 不分配伪 tty，意味着依赖 tty 的指令将无法运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;scale&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose scale [options] [SERVICE=NUM...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;设置指定服务运行的容器个数。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;service=num&lt;/code&gt; 的参数来设置数量。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose scale &lt;span class="nv"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。&lt;/p&gt;
&lt;p&gt;一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;start&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose start [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;启动已经存在的服务容器。&lt;/p&gt;
&lt;h4&gt;stop&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose stop [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;停止已经处于运行状态的容器，但不删除它。通过 &lt;code&gt;docker-compose start&lt;/code&gt; 可以再次启动这些容器。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;top&lt;/h4&gt;
&lt;p&gt;查看各个服务容器内运行的进程。&lt;/p&gt;
&lt;h4&gt;unpause&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose unpause [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;恢复处于暂停状态中的服务。&lt;/p&gt;
&lt;h4&gt;up&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose up [options] [SERVICE...]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。&lt;/p&gt;
&lt;p&gt;链接的服务都将会被自动启动，除非已经处于运行状态。&lt;/p&gt;
&lt;p&gt;可以说，大部分时候都可以直接通过该命令来启动一个项目。&lt;/p&gt;
&lt;p&gt;默认情况，&lt;code&gt;docker-compose up&lt;/code&gt; 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。&lt;/p&gt;
&lt;p&gt;当通过 &lt;code&gt;Ctrl-C&lt;/code&gt; 停止命令时，所有容器将会停止。&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;docker-compose up -d&lt;/code&gt;，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。&lt;/p&gt;
&lt;p&gt;默认情况，如果服务容器已经存在，&lt;code&gt;docker-compose up&lt;/code&gt; 将会尝试停止容器，然后重新创建（保持使用 &lt;code&gt;volumes-from&lt;/code&gt; 挂载的卷），以保证新启动的服务匹配 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 &lt;code&gt;docker-compose up --no-recreate&lt;/code&gt;。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 &lt;code&gt;docker-compose up --no-deps -d &amp;lt;SERVICE_NAME&amp;gt;&lt;/code&gt; 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 在后台运行服务容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-color&lt;/code&gt; 不使用颜色来区分不同的服务的控制台输出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-deps&lt;/code&gt; 不启动服务所链接的容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force-recreate&lt;/code&gt; 强制重新创建容器，不能与 &lt;code&gt;--no-recreate&lt;/code&gt; 同时使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-recreate&lt;/code&gt; 如果容器已经存在了，则不重新创建，不能与 &lt;code&gt;--force-recreate&lt;/code&gt; 同时使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-build&lt;/code&gt; 不自动构建缺失的服务镜像。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t, --timeout TIMEOUT&lt;/code&gt; 停止容器时候的超时（默认为 10 秒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;version&lt;/h4&gt;
&lt;p&gt;格式为 &lt;code&gt;docker-compose version&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;打印版本信息。&lt;/p&gt;
&lt;h2&gt;Compose 模板文件&lt;/h2&gt;
&lt;p&gt;模板文件是使用 &lt;code&gt;Compose&lt;/code&gt; 的核心，涉及到的指令关键字也比较多。但这里面大部分指令跟 &lt;code&gt;docker run&lt;/code&gt; 相关参数的含义都是类似的。&lt;/p&gt;
&lt;p&gt;默认的模板文件名称为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，格式为 YAML 格式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: "3"

services:
  webapp:
    image: examples/web
    ports:
      - "80:80"
    volumes:
      - "/data"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意每个服务都必须通过 &lt;code&gt;image&lt;/code&gt; 指令指定镜像或 &lt;code&gt;build&lt;/code&gt; 指令（需要 Dockerfile）等来自动构建生成镜像。&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;build&lt;/code&gt; 指令，在 &lt;code&gt;Dockerfile&lt;/code&gt; 中设置的选项(例如：&lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;EXPOSE&lt;/code&gt;, &lt;code&gt;VOLUME&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt; 等) 将会自动被获取，无需在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 中重复设置。&lt;/p&gt;
&lt;p&gt;下面分别介绍各个指令的用法。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;build&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 &lt;code&gt;Compose&lt;/code&gt; 将会利用它自动构建这个镜像，然后使用这个镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: '3'
services:
  webapp:
    build: ./dir&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你也可以使用 &lt;code&gt;context&lt;/code&gt; 指令指定 &lt;code&gt;Dockerfile&lt;/code&gt; 所在文件夹的路径。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;dockerfile&lt;/code&gt; 指令指定 &lt;code&gt;Dockerfile&lt;/code&gt; 文件名。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;arg&lt;/code&gt; 指令指定构建镜像时的变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: '3'
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;cache_from&lt;/code&gt; 指定构建镜像的缓存&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;cap_add, cap_drop&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定容器的内核能力（capacity）分配。&lt;/p&gt;
&lt;p&gt;例如，让容器拥有所有能力可以指定为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cap_add:
  - ALL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;去掉 NET_ADMIN 能力可以指定为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cap_drop:
  - NET_ADMIN&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;command&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;覆盖容器启动后默认执行的命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command: echo "hello world"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;cgroup_parent&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定父 &lt;code&gt;cgroup&lt;/code&gt; 组，意味着将继承该组的资源限制。&lt;/p&gt;
&lt;p&gt;例如，创建了一个 cgroup 组名称为 &lt;code&gt;cgroups_1&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cgroup_parent: cgroups_1&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;container_name&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定容器名称。默认将会使用 &lt;code&gt;项目名称_服务名称_序号&lt;/code&gt; 这样的格式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;container_name: docker-web-container&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;code&gt;devices&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定设备映射关系。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devices:
  - "/dev/ttyUSB1:/dev/ttyUSB0"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;depends_on&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;解决容器的依赖、启动先后的问题。以下例子中会先启动 &lt;code&gt;redis&lt;/code&gt; &lt;code&gt;db&lt;/code&gt; 再启动 &lt;code&gt;web&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: '3'

services:
  web:
    build: .
    depends_on:
      - db
      - redis

  redis:
    image: redis

  db:
    image: postgres&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;注意：&lt;code&gt;web&lt;/code&gt; 服务不会等待 &lt;code&gt;redis&lt;/code&gt; &lt;code&gt;db&lt;/code&gt; 「完全启动」之后才启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;code&gt;dns&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;自定义 &lt;code&gt;DNS&lt;/code&gt; 服务器。可以是一个值，也可以是一个列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dns: 8.8.8.8

dns:
  - 8.8.8.8
  - 114.114.114.114&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;dns_search&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;配置 &lt;code&gt;DNS&lt;/code&gt; 搜索域。可以是一个值，也可以是一个列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dns_search: example.com

dns_search:
  - domain1.example.com
  - domain2.example.com&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;tmpfs&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;挂载一个 tmpfs 文件系统到容器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmpfs: /run
tmpfs:
  - /run
  - /tmp&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;env_file&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;从文件中获取环境变量，可以为单独的文件路径或列表。&lt;/p&gt;
&lt;p&gt;如果通过 &lt;code&gt;docker-compose -f FILE&lt;/code&gt; 方式来指定 Compose 模板文件，则 &lt;code&gt;env_file&lt;/code&gt; 中变量的路径会基于模板文件路径。&lt;/p&gt;
&lt;p&gt;如果有变量名称与 &lt;code&gt;environment&lt;/code&gt; 指令冲突，则按照惯例，以后者为准。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;环境变量文件中每一行必须符合格式，支持 &lt;code&gt;#&lt;/code&gt; 开头的注释行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# common.env: Set development environment
PROG_ENV=development&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;environment&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;设置环境变量。你可以使用数组或字典两种格式。&lt;/p&gt;
&lt;p&gt;只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;environment:
  RACK_ENV: development
  SESSION_SECRET:

environment:
  - RACK_ENV=development
  - SESSION_SECRET&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果变量名称或者值中用到 &lt;code&gt;true|false，yes|no&lt;/code&gt; 等表达 &lt;a href="https://yaml.org/type/bool.html"&gt;布尔&lt;/a&gt; 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;expose&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;暴露端口，但不映射到宿主机，只被连接的服务访问。&lt;/p&gt;
&lt;p&gt;仅可以指定内部端口为参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expose:
 - "3000"
 - "8000"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;external_links&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;&lt;p&gt;注意：不建议使用该指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;链接到 &lt;code&gt;docker-compose.yml&lt;/code&gt; 外部的容器，甚至并非 &lt;code&gt;Compose&lt;/code&gt; 管理的外部容器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;extra_hosts&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;类似 Docker 中的 &lt;code&gt;--add-host&lt;/code&gt; 参数，指定额外的 host 名称映射信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extra_hosts:
 - "googledns:8.8.8.8"
 - "dockerhub:52.1.157.61"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会在启动后的服务容器中 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件中添加如下两条条目。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8.8.8.8 googledns
52.1.157.61 dockerhub&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;healthcheck&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;通过命令检查容器是否健康运行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"]
  interval: 1m30s
  timeout: 10s
  retries: 3&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;image&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定为镜像名称或镜像 ID。如果镜像在本地不存在，&lt;code&gt;Compose&lt;/code&gt; 将会尝试拉取这个镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image: ubuntu
image: orchardup/postgresql
image: a4bc65fd&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;labels:
  com.startupteam.description: "webapp for a startup team"
  com.startupteam.department: "devops department"
  com.startupteam.release: "rc3 for v1.0"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;links&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;&lt;p&gt;注意：不推荐使用该指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;配置日志选项。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;目前支持三种日志驱动类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;driver: "json-file"
driver: "syslog"
driver: "none"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; 配置日志驱动的相关参数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options:
  max-size: "200k"
  max-file: "10"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;network_mode&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;设置网络模式。使用和 &lt;code&gt;docker run&lt;/code&gt; 的 &lt;code&gt;--network&lt;/code&gt; 参数一样的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;network_mode: "bridge"
network_mode: "host"
network_mode: "none"
network_mode: "service:[service name]"
network_mode: "container:[container name/id]"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;networks&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;配置容器连接的网络。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: "3"
services:

  some-service:
    networks:
     - some-network
     - other-network

networks:
  some-network:
  other-network:&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;pid&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pid: "host"&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;ports&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;暴露端口信息。&lt;/p&gt;
&lt;p&gt;使用宿主端口：容器端口 &lt;code&gt;(HOST:CONTAINER)&lt;/code&gt; 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ports:
 - "3000"
 - "8000:8000"
 - "49100:22"
 - "127.0.0.1:8001:8001"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;注意：当使用&lt;/em&gt; &lt;em&gt;HOST:CONTAINER&lt;/em&gt; &lt;em&gt;格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为&lt;/em&gt; &lt;em&gt;YAML&lt;/em&gt; &lt;em&gt;会自动解析&lt;/em&gt; &lt;em&gt;xx:yy&lt;/em&gt; &lt;em&gt;这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;存储敏感数据，例如 &lt;code&gt;mysql&lt;/code&gt; 服务密码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: "3.1"
services:

mysql:
  image: mysql
  environment:
    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
  secrets:
    - db_root_password
    - my_other_secret

secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;security_opt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;security_opt:
    - label:user:USER
    - label:role:ROLE&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;stop_signal&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stop_signal: SIGUSR1&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;sysctls&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;配置容器内核参数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0

sysctls:
  - net.core.somaxconn=1024
  - net.ipv4.tcp_syncookies=0&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;ulimits&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;指定容器的 ulimits 限制值。&lt;/p&gt;
&lt;p&gt;例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ulimits:
    nproc: 65535
    nofile:
      soft: 20000
      hard: 40000&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;volumes&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;数据卷所挂载路径设置。可以设置为宿主机路径(&lt;code&gt;HOST:CONTAINER&lt;/code&gt;)或者数据卷名称(&lt;code&gt;VOLUME:CONTAINER&lt;/code&gt;)，并且可以设置访问模式 （&lt;code&gt;HOST:CONTAINER:ro&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;该指令中路径支持相对路径。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;volumes:
 - /var/lib/mysql
 - cache/:/tmp/cache
 - ~/configs:/etc/configs/:ro&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果路径为数据卷名称，必须在文件中配置数据卷。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: "3"

services:
  my_src:
    image: mysql:8.0
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data:&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;其它指令&lt;/h4&gt;
&lt;p&gt;此外，还有包括 &lt;code&gt;domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir&lt;/code&gt; 等指令，基本跟 &lt;code&gt;docker run&lt;/code&gt; 中对应参数的功能一致。&lt;/p&gt;
&lt;p&gt;指定服务容器启动后执行的入口文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;entrypoint: /code/entrypoint.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定容器中运行应用的用户名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user: nginx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定容器中工作目录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;working_dir: /code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定容器中搜索域名、主机名、mac 地址等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;domainname: your_website.comhostname: testmac_address: 08-00-27-00-0C-0A&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;允许容器中运行一些特权命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;privileged: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 &lt;code&gt;always&lt;/code&gt; 或者 &lt;code&gt;unless-stopped&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;restart: always&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;read_only: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开标准输入，可以接受外部输入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stdin_open: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;模拟一个伪终端。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tty: true&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;读取变量&lt;/h4&gt;
&lt;p&gt;Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 &lt;code&gt;.env&lt;/code&gt; 文件中的变量。&lt;/p&gt;
&lt;p&gt;例如，下面的 Compose 文件将从运行它的环境中读取变量 &lt;code&gt;${MONGO_VERSION}&lt;/code&gt; 的值，并写入执行的指令中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: "3"
services:

db:
  image: "mongo:${MONGO_VERSION}"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果执行 &lt;code&gt;MONGO_VERSION=3.2 docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:3.2&lt;/code&gt; 镜像的容器；如果执行 &lt;code&gt;MONGO_VERSION=2.8 docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:2.8&lt;/code&gt; 镜像的容器。&lt;/p&gt;
&lt;p&gt;若当前目录存在 &lt;code&gt;.env&lt;/code&gt; 文件，执行 &lt;code&gt;docker-compose&lt;/code&gt; 命令时将从该文件中读取变量。&lt;/p&gt;
&lt;p&gt;在当前目录新建 &lt;code&gt;.env&lt;/code&gt; 文件并写入以下内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 支持 # 号注释MONGO_VERSION=3.6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行 &lt;code&gt;docker-compose up&lt;/code&gt; 则会启动一个 &lt;code&gt;mongo:3.6&lt;/code&gt; 镜像的容器。&lt;/p&gt;
&lt;h2&gt;Docker Compose部署应用程序&lt;/h2&gt;
&lt;h3&gt;部署Tomcat&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3.1&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nt"&gt;tomcat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tomcat&lt;/span&gt;
        &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tomcat&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080:8080&lt;/span&gt;
        &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./webapps:/usr/local/tomcat/webapps&lt;/span&gt;
        &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;#时区&lt;/span&gt;
          &lt;span class="nt"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Asia/Shanghai&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;部署MySQL_1&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3.1&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
        &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
        &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;123456&lt;/span&gt;
        &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#默认的身份验证插件&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--default-authentication-plugin=mysql_native_password&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;#字符集&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--character-set-server=utf8mb4&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;#字符集编码规则&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--collation-server=utf8mb4_general_ci&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;#数据行更新时，timestamp类型字段不更新为当前时间&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--explicit_defaults_for_timestamp=true&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;#表名小写,不区分大小写&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--lower_case_table_names=1&lt;/span&gt;
        &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tomcat&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306:3306&lt;/span&gt;
        &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./data:/var/lib/mysql/data&lt;/span&gt;
    &lt;span class="c1"&gt;#MySQL 的Web客户端&lt;/span&gt;
    &lt;span class="nt"&gt;adminer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;adminer&lt;/span&gt;
        &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080:8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;部署MySQL_2&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.1&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
 &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
  &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--lower_case_table_names=1&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--character-set-server=utf8mb4&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--collation-server=utf8mb4_unicode_ci&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--explicit_defaults_for_timestamp=true&lt;/span&gt;
  &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nt"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Asia/Shanghai&lt;/span&gt;
   &lt;span class="nt"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root@123456&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306:3306&lt;/span&gt;
  &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./mysql/data:/var/lib/mysql&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./mysql/config:/etc/mysql/conf.d&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./mysql/log:/var/log/mysql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;部署RabbitMQ&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;rabbitmq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rabbitmq:3.8.3-management&lt;/span&gt;
    &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rabbitmq&lt;/span&gt;
    &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
    &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;myRabbitmq&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;15672:15672&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5672:5672&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./data:/var/lib/rabbitmq&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RABBITMQ_DEFAULT_USER=root&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RABBITMQ_DEFAULT_PASS=root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RABBITMQ_DEFAULT_USER&lt;/code&gt;  和  &lt;code&gt;RABBITMQ_DEFAULT_PASS&lt;/code&gt; 用来设置超级管理员的账号和密码，如果不设置，默认都是 &lt;code&gt;guest&lt;/code&gt; 。&lt;/p&gt;
</content><link href="/Xuxx_Blogs/archives/bj33/" rel="alternate"/><published>2020-09-21T01:10:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj34/</id><title>Docker Compose部署GitLab</title><updated>2020-12-22T03:51:17.910875+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;什么是GitLab&lt;/h2&gt;
&lt;p&gt;GitLab是利用 Ruby on Rails 的一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。&lt;/p&gt;
&lt;h2&gt;部署GitLab&lt;/h2&gt;
&lt;p&gt;使用Docker来安装和运行GitLab中文版，&lt;code&gt;docker-compose.yml&lt;/code&gt;配置如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;twang2218/gitlab-ce-zh&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
        &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;192.168.123.128&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;
            &lt;span class="nt"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
                &lt;span class="no"&gt;external_url = &amp;#39;http://192.168.123.128&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 2222&lt;/span&gt;
                &lt;span class="no"&gt;unicorn[&amp;#39;port&amp;#39;] = 8888&lt;/span&gt;
                &lt;span class="no"&gt;nginx[&amp;#39;listen_port&amp;#39;] = 80&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2222:22&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./config:/etc/gitlab&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./data:/var/opt/gitlab&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./logs:/var/log/gitlab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><link href="/Xuxx_Blogs/archives/bj34/" rel="alternate"/><published>2020-09-22T00:05:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj35/</id><title>动态规划算法</title><updated>2020-12-22T03:51:17.910857+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;动态规划题目特点&lt;/h2&gt;
&lt;h3&gt;1.计数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有多少种方式走到右下角&lt;/li&gt;
&lt;li&gt;有多少种方法选出k个数使得和是Sum&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.求最大最小值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从左上角走到右下角路径的最大数字和&lt;/li&gt;
&lt;li&gt;最长上升子序列长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.求存在性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;取石子游戏，先手是否必胜&lt;/li&gt;
&lt;li&gt;能不能选出k个数使得和是Sum&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;例题1：&lt;/h4&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 114.90066225165563" data-width="1735" data-height="755"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/9247a23d97f2fece3a14fba5ceba4fdb.png" alt="例题" /&gt;&lt;figcaption&gt;例题&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;动态规划四大步骤&lt;/h2&gt;
&lt;h3&gt;1.确定状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态在动态规划中的作用属于定海神针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单的说，解动态规划的时候需要开一个数组，数组的每个元素 f [i] 或者 f [i] [j] 代表什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似数学题中，X , Y , Z代表什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确定状态需要两个意识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后一步&lt;/li&gt;
&lt;li&gt;子问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;例题1：最后一步的分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 115.37515375153751" data-width="1876" data-height="813"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/09d2f09a9ca3fba481809edea9ba2cfd.png" alt="例题1_最后一步的分析" /&gt;&lt;figcaption&gt;例题1_最后一步的分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 108.472553699284" data-width="1818" data-height="838"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/7a5cebdcdc21e3c784211bb6aa6ec8a1.png" alt="例题1_最后一步的分析" /&gt;&lt;figcaption&gt;例题1_最后一步的分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题：子问题的分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 93.01775147928994" data-width="1572" data-height="845"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/c89b14d980f68a3011c590960f5cd894.png" alt="例题1_子问题的分析" /&gt;&lt;figcaption&gt;例题1_子问题的分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 103.06818181818181" data-width="1814" data-height="880"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/92350c2ad5dbfc26f80018d7aee73f57.png" alt="例题1_子问题的分析" /&gt;&lt;figcaption&gt;例题1_子问题的分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;2.转移方程&lt;/h3&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 136.99248120300751" data-width="1822" data-height="665"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/fecb94428d307e8c46fcd2649f66f94d.png" alt="例题1_转移方程" /&gt;&lt;figcaption&gt;例题1_转移方程&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;3.初始条件和边界情况&lt;/h3&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 111.36680613668061" data-width="1597" data-height="717"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/cb6e8d4107e9b234e90d65b5b87e20a8.png" alt="例题1_初始条件和边界情况" /&gt;&lt;figcaption&gt;例题1_初始条件和边界情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;4.计算顺序&lt;/h3&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 159.8330241187384" data-width="1723" data-height="539"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/412f373811cb0c9adcb28d5736669e8e.png" alt="例题1_计算顺序" /&gt;&lt;figcaption&gt;例题1_计算顺序&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例题1_小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 85.68840579710145" data-width="1419" data-height="828"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/e5c27ea6caf5f396d76203ebddf34546.png" alt="例题1_小结" /&gt;&lt;figcaption&gt;例题1_小结&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;例题2：Unique Paths&lt;/h4&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 101.06263982102908" data-width="1807" data-height="894"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/55b4038aea8ab79caff5ff4cc9076838.png" alt="例题2" /&gt;&lt;figcaption&gt;例题2&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 101.34529147982063" data-width="1808" data-height="892"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/3297241f4ef73d1d69385a0d5ac1bcbd.png" alt="例题2_分析" /&gt;&lt;figcaption&gt;例题2_分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 123.85752688172043" data-width="1843" data-height="744"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/208b4691f33eef8274bf7d00fcd97cc1.png" alt="例题2_分析" /&gt;&lt;figcaption&gt;例题2_分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转移方程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 101.83129855715872" data-width="1835" data-height="901"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/8911f4e263f277a09774e4b517d9c343.png" alt="例题2_分析" /&gt;&lt;figcaption&gt;例题2_分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始条件和边界情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 97.75533108866442" data-width="1742" data-height="891"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/e4149e997153756e993b24992e972f5d.png" alt="例题2_分析" /&gt;&lt;figcaption&gt;例题2_分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 108.70083432657925" data-width="1824" data-height="839"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/5b42931b6b5fd32d1518816ee1d6b8af.png" alt="例题2_分析" /&gt;&lt;figcaption&gt;例题2_分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
</content><link href="/Xuxx_Blogs/archives/bj35/" rel="alternate"/><published>2020-09-22T03:10:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj36/</id><title>VMware 16安装CentOS 7 配置静态IP</title><updated>2020-12-22T03:51:17.910839+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;一.安装VMware 16&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/zouhuu/article/details/86530787"&gt;安装VMware 16&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;二.创建虚拟机&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建新的虚拟机 -&amp;gt; 自定义配置，下一步&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 93.97522522522523" data-width="1669" data-height="888"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/31609bb4fcc8c800490b576b117044b1.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择虚拟机硬件兼容性 -&amp;gt; 默认，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装客户机操作系统 -&amp;gt; 稍后安装操作系统，下一步&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 57.621247113163975" data-width="499" data-height="433"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/f6e42c7054d8b36ab5791931fead5536.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择客户机操作系统 -&amp;gt; Linux+CentOS7 64 位，下一步&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 57.621247113163975" data-width="499" data-height="433"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/qq1820582487/Xuxx_Blogs@gh-pages/archives/assets/3919acacad647fe6aa949de6b408ef5a.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命名虚拟机 -&amp;gt; 按需配置，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理器、内存配置 -&amp;gt; 按需分配，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络类型 -&amp;gt; 选择NAT类型，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择I/O控制器类型、选择磁盘类型 -&amp;gt; 默认，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择磁盘、指定磁盘容量 -&amp;gt; 创建新虚拟磁盘，按需分配磁盘大小，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;三.安装虚拟机操作系统&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;点击编辑虚拟机设置，选择ISO映像文件&lt;/li&gt;
&lt;li&gt;点击开启此虚拟机，进入安装步骤&lt;/li&gt;
&lt;li&gt;选择安装语言&lt;/li&gt;
&lt;li&gt;点击安装位置，点击选择刚才创建的20g的虚拟硬盘存储，最后点击完成。&lt;/li&gt;
&lt;li&gt;点击开始安装，Centos7正在安装中。&lt;/li&gt;
&lt;li&gt;设置ROOT账户密码，点击完成（提示：密码简单时需要多点），最后点击完成配置。&lt;/li&gt;
&lt;li&gt;重启，由于是安装Minimal版（最小安装），是命令行形式的，不是安装的桌面版的，只能在黑窗口输入命令操作。&lt;/li&gt;
&lt;li&gt;输入用户名/密码连接CentOS 7，输入密码不显示，所以要细心输入，以访出错。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四.配置网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确认虚拟机与主机的连接方式，编辑 -&amp;gt; 虚拟网络编辑器
 虚拟网络编辑器：去除了DHCP的勾选，然后配置子网和子网掩码。因为使用的子网掩码是 255.255.255.0 ，所以子网IP前两位要与本机的IP一致（win查看ip -&amp;gt; ipconfig ）,第三位随意（别和本机一样），第四位无脑填 0 就行。
 NAT设置：网关IP 前三位要和子网IP 一样，第四位随意就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置Centos 7 静态IP 相关配置文件
 配置网卡配置文件：&lt;code&gt;vi /etc/sysconfig/network-scripts/ifcfg-ens33&lt;/code&gt;
 注意这儿的 IPASSR 不是虚拟网络编辑器的子网 IP！！！（吃过大亏(；´д｀)ゞ....）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#修改和添加的内容如下：&lt;/span&gt;
...
&lt;span class="nv"&gt;BOOTPROTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;
...
&lt;span class="nv"&gt;ONBOOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#注意这儿的 IP 不是虚拟网络编辑器的子网 IP！！！&lt;/span&gt;
&lt;span class="c1"&gt;#就是虚拟网络编辑器中的 子网ip网段（前三位）+ 主机号 &lt;/span&gt;
&lt;span class="nv"&gt;IPADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;192.168.123.128&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#子网掩码，也可换成：NETMASK=&amp;quot;255.255.255.0&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;24&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;GATEWAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;192.168.123.2&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;IPV6_PRIVACY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;DNS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.8.8.8
&lt;span class="nv"&gt;DNS2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.8.4.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置域名解析配置文件：&lt;code&gt;vi /etc/resolv.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Generated by NetworkManager&lt;/span&gt;
nameserver &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8
nameserver &lt;span class="m"&gt;8&lt;/span&gt;.8.4.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以重启网络了, 命令：&lt;code&gt;systemctl restart network&lt;/code&gt;
补充 防火墙命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#关闭防火墙并设置开机不启动&lt;/span&gt;
&lt;span class="c1"&gt;#查看防火墙状态：&lt;/span&gt;
systemctl status firewalld.service
&lt;span class="c1"&gt;#关闭：&lt;/span&gt;
systemctl stop firewalld
&lt;span class="c1"&gt;#开启：&lt;/span&gt;
systemctl start firewalld
&lt;span class="c1"&gt;#开机自动关闭：&lt;/span&gt;
systemctl disable firewalld
&lt;span class="c1"&gt;#开机自动启动：&lt;/span&gt;
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; firewalld
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步修改主机的网络适配器ip
编辑vmnet8如下：
完整的配置已经结束。下载 ssh 客户端连接就好了。
FinalShell：&lt;a href="https://www.hostbuf.com/"&gt;https://www.hostbuf.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content><link href="/Xuxx_Blogs/archives/bj36/" rel="alternate"/><published>2020-11-23T11:35:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj37/</id><title>MySql获取最近日期</title><updated>2020-12-22T03:51:17.910821+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;一、 DATE_ADD()函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DATE_ADD()&lt;/strong&gt; 函数向日期添加指定的时间间隔。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;DATE_ADD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;INTERVAL&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;date&lt;/em&gt; 参数是合法的日期表达式。&lt;em&gt;expr&lt;/em&gt; 参数是您希望添加的时间间隔。&lt;/p&gt;
&lt;p&gt;type 参数可以是下列值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style="text-align:left"&gt;Type 值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;MICROSECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;SECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;MINUTE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;HOUR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;DAY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;WEEK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;MONTH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;QUARTER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;YEAR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;SECOND_MICROSECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;MINUTE_MICROSECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;MINUTE_SECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;HOUR_MICROSECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;HOUR_SECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;HOUR_MINUTE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;DAY_MICROSECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;DAY_SECOND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;DAY_MINUTE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;DAY_HOUR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;YEAR_MONTH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;实例&lt;/h3&gt;
&lt;p&gt;当天的日期&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;DATE_SUB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;curdate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="k"&gt;INTERVAL&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二、查询输出当天的日期&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nf"&gt;DATE_SUB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;curdate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="k"&gt;INTERVAL&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;我所用到的场景：&lt;/h2&gt;
&lt;p&gt;查询近10天某字段的新增情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
&lt;span class="n"&gt;字段名1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;表名&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;（日期）字段名2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nf"&gt;DATE_SUB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;curdate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="k"&gt;INTERVAL&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;字段名1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><link href="/Xuxx_Blogs/archives/bj37/" rel="alternate"/><published>2020-12-01T12:50:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj38/</id><title>JSON、String、Map之间的互转</title><updated>2020-12-22T03:51:17.910802+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;1.使用前置&lt;/h2&gt;
&lt;p&gt;本次演示使用三个常用的工具类,每个工具类对应的依赖如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FastJson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;fastjson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.58&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.code.gson&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.4&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-databind&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.10.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-annotations&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.10.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.10.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类定义&lt;/p&gt;
&lt;p&gt;```java
public class User {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private String userid;
private String username;
private String usersex;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//对象User
User user = new User("001","张三","男");&lt;/p&gt;
&lt;p&gt;//Json对象
String jsonData = "{\"userid\":\"001\",\"username\":\"张三\",\"usersex\":\"男\"}";&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//Json对象(集合)
  String strList = "{ \"data$\":" +
      "[{\"userid\":\"001\",\"username\":\"张三\",\"usersex\":\"男\"}," +
      "{\"userid\":\"002\",\"username\":\"李四\",\"usersex\":\"女\"}," +
      "{\"userid\":\"003\",\"username\":\"王五\",\"usersex\":\"男\"}]" +
                "}";&lt;/p&gt;
&lt;p&gt;//list对象
  User user1 = new User("001","张三","男");
  User user2 = new User("002","李四","女");
  User user3 = new User("003","王五","男");
  List&lt;User&gt; userList = new ArrayList&amp;lt;&amp;gt;();
  userList.add(user1);
  userList.add(user2);
  userList.add(user3);&lt;/p&gt;
&lt;p&gt;//map对象
  Map map = new HashMap();
  map.put("data$",userList);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
## 2.对象与字符串之间的互转

- FastJson

  ```java
//对象--&amp;gt;字符串
  String str = JSON.toJSONString(user);
  //字符串--&amp;gt;对象
  User user_2 = JSON.parseObject(jsonData, User.class);&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//对象 --&amp;gt; 字符串&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//字符串 --&amp;gt; 对象&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//对象--&amp;gt;String&lt;/span&gt;
&lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//String--&amp;gt;对象&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.对象集合与字符串之间的互转&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FastJson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//对象集合--&amp;gt;字符串&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//字符串--&amp;gt;对象集合&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//对象集合 --&amp;gt; 字符串&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//字符串 --&amp;gt; 对象集合&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                 &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TypeToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(){}.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//对象集合 --&amp;gt; 字符串&lt;/span&gt;
&lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//字符串 --&amp;gt; 对象集合&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TypeReference&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4.字符串互转JSON对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fastjson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
&lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Json --&amp;gt; String&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
&lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getAsJsonObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//JsonObject jsonObject_2 = gson.fromJson(jsonString_2, JsonObject.class); 错误方法 返回为空(非null)&lt;/span&gt;
&lt;span class="c1"&gt;//Json对象 --&amp;gt; String&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//jackson&lt;/span&gt;
&lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
&lt;span class="c1"&gt;//暂未知,有知道的大佬请告知&lt;/span&gt;

&lt;span class="c1"&gt;//Json对象 --&amp;gt; String&lt;/span&gt;
&lt;span class="c1"&gt;//用到fastJson格式的JSONObject&lt;/span&gt;
&lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonObject_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5.Map与字符串之间互转&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fastjson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//字符串 --&amp;gt; map&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//map --&amp;gt; 字符串&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//字符串--&amp;gt;map&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//map--&amp;gt;字符串&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//字符串 --&amp;gt; map&lt;/span&gt;
&lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//map --&amp;gt; 字符串&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6.Map 转 JSON对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fastjson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
&lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//json对象转Map &lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Map&amp;lt;String,Object&amp;gt; map_1 = (Map&amp;lt;String,Object&amp;gt;)jsonObject_1; 此方法也行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//JsonObject jsonObject_2 = gson.fromJson(jsonString_2, JsonObject.class); 错误方法 返回为空(非null)&lt;/span&gt;
&lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonString_2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getAsJsonObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//json对象转Map&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jackson&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
&lt;span class="c1"&gt;//暂未知,有知道的大佬请告知&lt;/span&gt;

&lt;span class="c1"&gt;//json对象转Map&lt;/span&gt;
&lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7.测试代码&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;User.class&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;User{&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;userid=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;, username=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;, usersex=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="sc"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;usersex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getUserid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUserid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getUsersex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUsersex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;usersex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usersex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;Test.class&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.alibaba.fastjson.JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.alibaba.fastjson.JSONObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.Gson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.JsonObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.JsonParser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.reflect.TypeToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.rosellete.iescp.cshop.entity.User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.codehaus.jackson.map.ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.codehaus.jackson.type.TypeReference&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.HashMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Assert.assertTrue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Unit test for simple App.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppTest&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StringAndJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;001\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//fastJson&lt;/span&gt;
            &lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
        &lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//Json对象 --&amp;gt; String&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonObject_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Gson&lt;/span&gt;
            &lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
        &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getAsJsonObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//Json对象 --&amp;gt; String&lt;/span&gt;
        &lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonObject_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//jackson&lt;/span&gt;
            &lt;span class="c1"&gt;//String --&amp;gt; Json对象&lt;/span&gt;
            &lt;span class="c1"&gt;//暂未知,有知道的大佬请告知&lt;/span&gt;

        &lt;span class="c1"&gt;//Json对象 --&amp;gt; String&lt;/span&gt;
            &lt;span class="c1"&gt;//用到fastJson格式的JSONObject&lt;/span&gt;
        &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonObject_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StringAndBean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;001\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//fastjson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象--&amp;gt;String&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//String --&amp;gt; 对象&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Gson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象--&amp;gt;String&lt;/span&gt;
        &lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//String --&amp;gt;对象&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//jackson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象--&amp;gt;String&lt;/span&gt;
        &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//String--&amp;gt;对象&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StringAndBeanlist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;002&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;女&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;003&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;strList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[{\&amp;quot;userid\&amp;quot;:\&amp;quot;001\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                         &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;002\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;李四\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;女\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                         &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;王五\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;}]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//fastjson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象集合--&amp;gt;String&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//String--&amp;gt;对象集合&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Gson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象集合 --&amp;gt; 字符串&lt;/span&gt;
        &lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//字符串 --&amp;gt; 对象集合&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TypeToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(){}.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="c1"&gt;//jackson&lt;/span&gt;
            &lt;span class="c1"&gt;//对象集合 --&amp;gt; 字符串&lt;/span&gt;
        &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;users_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//字符串 --&amp;gt; 对象集合&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TypeReference&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MapAndString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;strList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{ \&amp;quot;data$\&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;[{\&amp;quot;userid\&amp;quot;:\&amp;quot;001\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;002\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;李四\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;女\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;王五\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;}]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;002&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;女&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;003&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//fastjson&lt;/span&gt;
            &lt;span class="c1"&gt;//字符串--&amp;gt;map&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//map--&amp;gt;字符串&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Gson&lt;/span&gt;
            &lt;span class="c1"&gt;//字符串--&amp;gt;map&lt;/span&gt;
        &lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//map--&amp;gt;字符串&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//jackson&lt;/span&gt;
            &lt;span class="c1"&gt;//字符串 --&amp;gt; map&lt;/span&gt;
        &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//map --&amp;gt; 字符串&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MapAndJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;002&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;女&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;003&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;strList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{ \&amp;quot;data$\&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;[{\&amp;quot;userid\&amp;quot;:\&amp;quot;001\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;002\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;李四\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;女\&amp;quot;},&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;{\&amp;quot;userid\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;username\&amp;quot;:\&amp;quot;王五\&amp;quot;,\&amp;quot;usersex\&amp;quot;:\&amp;quot;男\&amp;quot;}]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//fastjson&lt;/span&gt;
            &lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
        &lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//json对象转Map&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Map&amp;lt;String,Object&amp;gt; map_1 = (Map&amp;lt;String,Object&amp;gt;)jsonObject_1; 此方法也行&lt;/span&gt;

        &lt;span class="c1"&gt;//Gson&lt;/span&gt;
            &lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
        &lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonString_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//JsonObject jsonObject_2 = gson.fromJson(jsonString_2, JsonObject.class); 是错误方法 返回为空(非null)&lt;/span&gt;
        &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="n"&gt;jsonObject_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonString_2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getAsJsonObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//json对象转Map&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//jackson&lt;/span&gt;
            &lt;span class="c1"&gt;//map转json对象&lt;/span&gt;
            &lt;span class="c1"&gt;//暂未知,有知道的大佬请告知&lt;/span&gt;

            &lt;span class="c1"&gt;//json对象转Map&lt;/span&gt;
        &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;断点&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><link href="/Xuxx_Blogs/archives/bj38/" rel="alternate"/><published>2020-12-02T12:48:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj39/</id><title>SQL语言分类</title><updated>2020-12-22T03:51:17.910784+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;p&gt;SQL语言共分为五大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据查询语言 DQL(Data Query Language)&lt;/li&gt;
&lt;li&gt;数据操纵语言DML(Data Manipulation Language)&lt;/li&gt;
&lt;li&gt;数据定义语言DDL(Data Definition Language)&lt;/li&gt;
&lt;li&gt;数据控制语言DCL(Data Control Language)&lt;/li&gt;
&lt;li&gt;数据事务语言DTL(Data Transaction Language)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DQL&lt;/h2&gt;
&lt;p&gt;数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT &lt;字段名表&gt;FROM &lt;表或视图名&gt;WHERE &lt;查询条件&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DML&lt;/h2&gt;
&lt;p&gt;数据操纵语言DML数据操纵语言DML主要有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入：INSERT&lt;/li&gt;
&lt;li&gt;更新：UPDATE&lt;/li&gt;
&lt;li&gt;删除：DELETE（删除表中的数据不删除表结构，可以回滚）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DDL&lt;/h2&gt;
&lt;p&gt;数据定义语言 DDL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE：创建&lt;/li&gt;
&lt;li&gt;ALTER：修改表结构&lt;/li&gt;
&lt;li&gt;RENAME：修改表名或列名&lt;/li&gt;
&lt;li&gt;DROP：删除表中的数据和结构，删除后不能回滚&lt;/li&gt;
&lt;li&gt;TRUNCATE：删除表中的数据不删除表结构，删除后不能回滚，效率比DELETE高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DCL&lt;/h2&gt;
&lt;p&gt;数据控制语言 DCL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GRANT：授权&lt;/li&gt;
&lt;li&gt;REVOKE ：回收权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DTL&lt;/h2&gt;
&lt;p&gt;数据事务语言 DTL：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SAVEPOINT：保存点&lt;/li&gt;
&lt;li&gt;ROLLBACK：回退到某点&lt;/li&gt;
&lt;li&gt;COMMIT：提交事务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：还有其他的分类方式~~~&lt;/p&gt;
</content><link href="/Xuxx_Blogs/archives/bj39/" rel="alternate"/><published>2020-12-04T12:53:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj40/</id><title>POI相关</title><updated>2020-12-22T03:51:17.910745+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;使用apache poi将单元格内容的一部分设置为下划线？&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://poi.apache.org/components/spreadsheet/quick-guide.htm"&gt;POI 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;differentFontTypeInSameCell&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;Workbook&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HSSFWorkbook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Sheet&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createSheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TestSheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Cell&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;createCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="n"&gt;underlineFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;underlineFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setUnderline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HSSFFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;U_DOUBLE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="n"&gt;boldFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;boldFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBoldweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOLDWEIGHT_BOLD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="n"&gt;italicFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;italicFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setItalic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CellStyle&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createCellStyle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;underlineFont&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCellStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;RichTextString&lt;/span&gt; &lt;span class="n"&gt;richString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HSSFRichTextString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Underline, Bold, Italic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;richString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;applyFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boldFont&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;richString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;applyFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;italicFont&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCellValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;richString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><link href="/Xuxx_Blogs/archives/bj40/" rel="alternate"/><published>2020-12-09T12:55:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj41/</id><title>Liunx常用命令大全</title><updated>2020-12-22T03:51:17.910722+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h3&gt;端口监听查看：&lt;/h3&gt;
&lt;p&gt;ss -tln 查看TCP的listen的端口&lt;/p&gt;
&lt;p&gt;ss -tlnp 查看哪些进程使用了监听端口&lt;/p&gt;
&lt;h3&gt;防火墙&lt;/h3&gt;
&lt;p&gt;systemctl status iptables (或service iptables status) 查看防火墙状态&lt;/p&gt;
&lt;p&gt;systemctl stop iptables(或service iptables stop) 关闭防火墙&lt;/p&gt;
&lt;h3&gt;系统信息&lt;/h3&gt;
&lt;p&gt;curl &lt;a href="https://link.zhihu.com/?target=http%3A//ifconfig.me/"&gt;ifconfig.me&lt;/a&gt; 查找本机公网IP&lt;/p&gt;
&lt;p&gt;arch 显示机器的处理器架构(1)&lt;/p&gt;
&lt;p&gt;uname -m 显示机器的处理器架构(2)&lt;/p&gt;
&lt;p&gt;uname -r 显示正在使用的内核版本&lt;/p&gt;
&lt;p&gt;dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)&lt;/p&gt;
&lt;p&gt;hdparm -i /dev/hda 罗列一个磁盘的架构特性&lt;/p&gt;
&lt;p&gt;hdparm -tT /dev/sda 在磁盘上执行测试性读取操作&lt;/p&gt;
&lt;p&gt;cat /proc/cpuinfo 显示CPU info的信息&lt;/p&gt;
&lt;p&gt;cat /proc/interrupts 显示中断&lt;/p&gt;
&lt;p&gt;cat /proc/meminfo 校验内存使用&lt;/p&gt;
&lt;p&gt;cat /proc/swaps 显示哪些swap被使用&lt;/p&gt;
&lt;p&gt;cat /proc/version 显示内核的版本&lt;/p&gt;
&lt;p&gt;cat /proc/net/dev 显示网络适配器及统计&lt;/p&gt;
&lt;p&gt;cat /proc/mounts 显示已加载的文件系统&lt;/p&gt;
&lt;p&gt;lspci -tv 罗列 PCI 设备&lt;/p&gt;
&lt;p&gt;lsusb -tv 显示 USB 设备&lt;/p&gt;
&lt;p&gt;date 显示系统日期&lt;/p&gt;
&lt;p&gt;cal 2007 显示2007年的日历表&lt;/p&gt;
&lt;p&gt;date 041217002007.00 设置日期和时间 - 月日时分年.秒&lt;/p&gt;
&lt;p&gt;clock -w 将时间修改保存到 BIOS&lt;/p&gt;
&lt;h3&gt;ps 命令常用用法（方便查看系统进程）&lt;/h3&gt;
&lt;p&gt;1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。&lt;/p&gt;
&lt;p&gt;2）ps -A 显示所有进程。&lt;/p&gt;
&lt;p&gt;3）ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。&lt;/p&gt;
&lt;p&gt;4）ps -e 此参数的效果和指定"A"参数相同。&lt;/p&gt;
&lt;p&gt;5）ps e 列出程序时，显示每个程序所使用的环境变量。&lt;/p&gt;
&lt;p&gt;6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。&lt;/p&gt;
&lt;p&gt;7）ps -H 显示树状结构，表示程序间的相互关系。&lt;/p&gt;
&lt;p&gt;8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。&lt;/p&gt;
&lt;p&gt;9）ps s 采用程序信号的格式显示程序状况。&lt;/p&gt;
&lt;p&gt;10）ps S 列出程序时，包括已中断的子程序资料。&lt;/p&gt;
&lt;p&gt;11）ps -t&lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。&lt;/p&gt;
&lt;p&gt;12）ps u 　以用户为主的格式来显示程序状况。&lt;/p&gt;
&lt;p&gt;13）ps x 　显示所有程序，不以终端机来区分。&lt;/p&gt;
&lt;p&gt;常用指令组合 ：ps aux,然后再通过管道使用grep命令过滤查找特定的进程,然后再对特定的进程进行操作。&lt;/p&gt;
&lt;p&gt;ps aux | grep program_filter_word,ps -ef |grep tomcat&lt;/p&gt;
&lt;p&gt;ps -ef|grep java|grep -v grep 显示出所有的java进程，去处掉当前的grep进程。&lt;/p&gt;
&lt;h3&gt;关机 (系统的关机、重启以及登出 )&lt;/h3&gt;
&lt;p&gt;shutdown -h now 关闭系统(1)&lt;/p&gt;
&lt;p&gt;init 0 关闭系统(2)&lt;/p&gt;
&lt;p&gt;telinit 0 关闭系统(3)&lt;/p&gt;
&lt;p&gt;shutdown -h hours:minutes &amp;amp; 按预定时间关闭系统&lt;/p&gt;
&lt;p&gt;shutdown -c 取消按预定时间关闭系统&lt;/p&gt;
&lt;p&gt;shutdown -r now 重启(1)&lt;/p&gt;
&lt;p&gt;reboot 重启(2)&lt;/p&gt;
&lt;p&gt;logout 注销&lt;/p&gt;
&lt;h3&gt;文件和目录&lt;/h3&gt;
&lt;p&gt;cd /home 进入 '/ home' 目录'&lt;/p&gt;
&lt;p&gt;cd .. 返回上一级目录&lt;/p&gt;
&lt;p&gt;cd ../.. 返回上两级目录&lt;/p&gt;
&lt;p&gt;cd 进入个人的主目录&lt;/p&gt;
&lt;p&gt;cd ~user1 进入个人的主目录&lt;/p&gt;
&lt;p&gt;cd - 返回上次所在的目录&lt;/p&gt;
&lt;p&gt;pwd 显示工作路径&lt;/p&gt;
&lt;p&gt;ls 查看目录中的文件&lt;/p&gt;
&lt;p&gt;ls -F 查看目录中的文件&lt;/p&gt;
&lt;p&gt;ls -l 显示文件和目录的详细资料&lt;/p&gt;
&lt;p&gt;ls -a 显示隐藏文件&lt;/p&gt;
&lt;p&gt;ls &lt;em&gt;[0-9]&lt;/em&gt; 显示包含数字的文件名和目录名&lt;/p&gt;
&lt;p&gt;tree 显示文件和目录由根目录开始的树形结构(1)&lt;/p&gt;
&lt;p&gt;lstree 显示文件和目录由根目录开始的树形结构(2)&lt;/p&gt;
&lt;p&gt;mkdir dir1 创建一个叫做 'dir1' 的目录'&lt;/p&gt;
&lt;p&gt;mkdir dir1 dir2 同时创建两个目录&lt;/p&gt;
&lt;p&gt;mkdir -p /tmp/dir1/dir2 创建一个目录树&lt;/p&gt;
&lt;p&gt;rm -f file1 删除一个叫做 'file1' 的文件'&lt;/p&gt;
&lt;p&gt;rmdir dir1 删除一个叫做 'dir1' 的目录'&lt;/p&gt;
&lt;p&gt;rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容&lt;/p&gt;
&lt;p&gt;rm -rf dir1 dir2 同时删除两个目录及它们的内容&lt;/p&gt;
&lt;p&gt;mv dir1 new_dir 重命名/移动 一个目录&lt;/p&gt;
&lt;p&gt;cp file1 file2 复制一个文件&lt;/p&gt;
&lt;p&gt;cp dir/* . 复制一个目录下的所有文件到当前工作目录&lt;/p&gt;
&lt;p&gt;cp -a /tmp/dir1 . 复制一个目录到当前工作目录&lt;/p&gt;
&lt;p&gt;cp -a dir1 dir2 复制一个目录&lt;/p&gt;
&lt;p&gt;ln -s file1 lnk1 创建一个指向文件或目录的软链接&lt;/p&gt;
&lt;p&gt;ln file1 lnk1 创建一个指向文件或目录的物理链接&lt;/p&gt;
&lt;p&gt;touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)&lt;/p&gt;
&lt;p&gt;file file1 outputs the mime type of the file as text&lt;/p&gt;
&lt;p&gt;iconv -l 列出已知的编码&lt;/p&gt;
&lt;p&gt;iconv -f fromEncoding -t toEncoding inputFile &amp;gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.&lt;/p&gt;
&lt;p&gt;find . -maxdepth 1 -name *.jpg -print -exec convert "{}" -resize 80x60 "thumbs/{}" \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)&lt;/p&gt;
&lt;h3&gt;文件搜索&lt;/h3&gt;
&lt;p&gt;find / -name file1 从 '/' 开始进入根文件系统搜索文件和目录&lt;/p&gt;
&lt;p&gt;find / -user user1 搜索属于用户 'user1' 的文件和目录&lt;/p&gt;
&lt;p&gt;find /home/user1 -name *.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件&lt;/p&gt;
&lt;p&gt;find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件&lt;/p&gt;
&lt;p&gt;find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件&lt;/p&gt;
&lt;p&gt;find / -name *.rpm -exec chmod 755 '{}' \; 搜索以 '.rpm' 结尾的文件并定义其权限&lt;/p&gt;
&lt;p&gt;find / -xdev -name *.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备&lt;/p&gt;
&lt;p&gt;locate *.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令&lt;/p&gt;
&lt;p&gt;whereis halt 显示一个二进制文件、源码或man的位置&lt;/p&gt;
&lt;p&gt;which halt 显示一个二进制文件或可执行文件的完整路径&lt;/p&gt;
&lt;h3&gt;挂载一个文件系统&lt;/h3&gt;
&lt;p&gt;mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在&lt;/p&gt;
&lt;p&gt;umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出&lt;/p&gt;
&lt;p&gt;fuser -km /mnt/hda2 当设备繁忙时强制卸载&lt;/p&gt;
&lt;p&gt;umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用&lt;/p&gt;
&lt;p&gt;mount /dev/fd0 /mnt/floppy 挂载一个软盘&lt;/p&gt;
&lt;p&gt;mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom&lt;/p&gt;
&lt;p&gt;mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom&lt;/p&gt;
&lt;p&gt;mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom&lt;/p&gt;
&lt;p&gt;mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件&lt;/p&gt;
&lt;p&gt;mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统&lt;/p&gt;
&lt;p&gt;mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备&lt;/p&gt;
&lt;p&gt;mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享&lt;/p&gt;
&lt;h3&gt;磁盘空间&lt;/h3&gt;
&lt;p&gt;df -h 显示已经挂载的分区列表&lt;/p&gt;
&lt;p&gt;ls -lSr |more 以尺寸大小排列文件和目录&lt;/p&gt;
&lt;p&gt;du -sh dir1 估算目录 'dir1' 已经使用的磁盘空间'&lt;/p&gt;
&lt;p&gt;du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小&lt;/p&gt;
&lt;p&gt;rpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)&lt;/p&gt;
&lt;p&gt;dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)&lt;/p&gt;
&lt;h3&gt;用户和群组&lt;/h3&gt;
&lt;p&gt;groupadd group_name 创建一个新用户组&lt;/p&gt;
&lt;p&gt;groupdel group_name 删除一个用户组&lt;/p&gt;
&lt;p&gt;groupmod -n new_group_name old_group_name 重命名一个用户组&lt;/p&gt;
&lt;p&gt;useradd -c "Name Surname " -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 "admin" 用户组的用户&lt;/p&gt;
&lt;p&gt;useradd user1 创建一个新用户&lt;/p&gt;
&lt;p&gt;userdel -r user1 删除一个用户 ( '-r' 排除主目录)&lt;/p&gt;
&lt;p&gt;usermod -c "User FTP" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性&lt;/p&gt;
&lt;p&gt;passwd 修改口令&lt;/p&gt;
&lt;p&gt;passwd user1 修改一个用户的口令 (只允许root执行)&lt;/p&gt;
&lt;p&gt;chage -E 2005-12-31 user1 设置用户口令的失效期限&lt;/p&gt;
&lt;p&gt;pwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户&lt;/p&gt;
&lt;p&gt;grpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组&lt;/p&gt;
&lt;p&gt;newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组&lt;/p&gt;
&lt;h3&gt;文件的权限 - 使用 "+" 设置权限，使用 "-" 用于取消&lt;/h3&gt;
&lt;p&gt;ls -lh 显示权限&lt;/p&gt;
&lt;p&gt;ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示&lt;/p&gt;
&lt;p&gt;chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限&lt;/p&gt;
&lt;p&gt;chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限&lt;/p&gt;
&lt;p&gt;chown user1 file1 改变一个文件的所有人属性&lt;/p&gt;
&lt;p&gt;chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性&lt;/p&gt;
&lt;p&gt;chgrp group1 file1 改变文件的群组&lt;/p&gt;
&lt;p&gt;chown user1:group1 file1 改变一个文件的所有人和群组属性&lt;/p&gt;
&lt;p&gt;find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件&lt;/p&gt;
&lt;p&gt;chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限&lt;/p&gt;
&lt;p&gt;chmod u-s /bin/file1 禁用一个二进制文件的 SUID位&lt;/p&gt;
&lt;p&gt;chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的&lt;/p&gt;
&lt;p&gt;chmod g-s /home/public 禁用一个目录的 SGID 位&lt;/p&gt;
&lt;p&gt;chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件&lt;/p&gt;
&lt;p&gt;chmod o-t /home/public 禁用一个目录的 STIKY 位&lt;/p&gt;
&lt;h3&gt;文件的特殊属性 - 使用 "+" 设置权限，使用 "-" 用于取消&lt;/h3&gt;
&lt;p&gt;chattr +a file1 只允许以追加方式读写文件&lt;/p&gt;
&lt;p&gt;chattr +c file1 允许这个文件能被内核自动压缩/解压&lt;/p&gt;
&lt;p&gt;chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件&lt;/p&gt;
&lt;p&gt;chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接&lt;/p&gt;
&lt;p&gt;chattr +s file1 允许一个文件被安全地删除&lt;/p&gt;
&lt;p&gt;chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘&lt;/p&gt;
&lt;p&gt;chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件&lt;/p&gt;
&lt;p&gt;lsattr 显示特殊的属性&lt;/p&gt;
&lt;h3&gt;打包和压缩文件&lt;/h3&gt;
&lt;p&gt;bunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件&lt;/p&gt;
&lt;p&gt;bzip2 file1 压缩一个叫做 'file1' 的文件&lt;/p&gt;
&lt;p&gt;gunzip file1.gz 解压一个叫做 'file1.gz'的文件&lt;/p&gt;
&lt;p&gt;gzip file1 压缩一个叫做 'file1'的文件&lt;/p&gt;
&lt;p&gt;gzip -9 file1 最大程度压缩&lt;/p&gt;
&lt;p&gt;rar a file1.rar test_file 创建一个叫做 'file1.rar' 的包&lt;/p&gt;
&lt;p&gt;rar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1'&lt;/p&gt;
&lt;p&gt;rar x file1.rar 解压rar包&lt;/p&gt;
&lt;p&gt;unrar x file1.rar 解压rar包&lt;/p&gt;
&lt;p&gt;tar -cvf archive.tar file1 创建一个非压缩的 tarball&lt;/p&gt;
&lt;p&gt;tar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件&lt;/p&gt;
&lt;p&gt;tar -tf archive.tar 显示一个包中的内容&lt;/p&gt;
&lt;p&gt;tar -xvf archive.tar 释放一个包&lt;/p&gt;
&lt;p&gt;tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下&lt;/p&gt;
&lt;p&gt;tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包&lt;/p&gt;
&lt;p&gt;tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包&lt;/p&gt;
&lt;p&gt;tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包&lt;/p&gt;
&lt;p&gt;tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包&lt;/p&gt;
&lt;p&gt;zip &lt;a href="https://link.zhihu.com/?target=http%3A//file1.zip/"&gt;file1.zip&lt;/a&gt; file1 创建一个zip格式的压缩包&lt;/p&gt;
&lt;p&gt;zip -r &lt;a href="https://link.zhihu.com/?target=http%3A//file1.zip/"&gt;file1.zip&lt;/a&gt; file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包&lt;/p&gt;
&lt;p&gt;unzip &lt;a href="https://link.zhihu.com/?target=http%3A//file1.zip/"&gt;file1.zip&lt;/a&gt; 解压一个zip格式压缩包&lt;/p&gt;
&lt;h3&gt;RPM 包 - （Fedora, Redhat及类似系统）&lt;/h3&gt;
&lt;p&gt;rpm -ivh package.rpm 安装一个rpm包&lt;/p&gt;
&lt;p&gt;rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告&lt;/p&gt;
&lt;p&gt;rpm -U package.rpm 更新一个rpm包但不改变其配置文件&lt;/p&gt;
&lt;p&gt;rpm -F package.rpm 更新一个确定已经安装的rpm包&lt;/p&gt;
&lt;p&gt;rpm -e package_name.rpm 删除一个rpm包&lt;/p&gt;
&lt;p&gt;rpm -qa 显示系统中所有已经安装的rpm包&lt;/p&gt;
&lt;p&gt;rpm -qa | grep httpd 显示所有名称中包含 "httpd" 字样的rpm包&lt;/p&gt;
&lt;p&gt;rpm -qi package_name 获取一个已安装包的特殊信息&lt;/p&gt;
&lt;p&gt;rpm -qg "System Environment/Daemons" 显示一个组件的rpm包&lt;/p&gt;
&lt;p&gt;rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表&lt;/p&gt;
&lt;p&gt;rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表&lt;/p&gt;
&lt;p&gt;rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表&lt;/p&gt;
&lt;p&gt;rpm -q package_name --whatprovides 显示一个rpm包所占的体积&lt;/p&gt;
&lt;p&gt;rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l&lt;/p&gt;
&lt;p&gt;rpm -q package_name --changelog 显示一个rpm包的修改历史&lt;/p&gt;
&lt;p&gt;rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供&lt;/p&gt;
&lt;p&gt;rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表&lt;/p&gt;
&lt;p&gt;rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书&lt;/p&gt;
&lt;p&gt;rpm --checksig package.rpm 确认一个rpm包的完整性&lt;/p&gt;
&lt;p&gt;rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性&lt;/p&gt;
&lt;p&gt;rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间&lt;/p&gt;
&lt;p&gt;rpm -Va 检查系统中所有已安装的rpm包- 小心使用&lt;/p&gt;
&lt;p&gt;rpm -Vp package.rpm 确认一个rpm包还未安装&lt;/p&gt;
&lt;p&gt;rpm2cpio package.rpm | cpio --extract --make-directories &lt;em&gt;bin&lt;/em&gt; 从一个rpm包运行可执行文件&lt;/p&gt;
&lt;p&gt;rpm -ivh /usr/src/redhat/RPMS/&lt;code&gt;arch&lt;/code&gt;/package.rpm 从一个rpm源码安装一个构建好的包&lt;/p&gt;
&lt;p&gt;rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包&lt;/p&gt;
&lt;h3&gt;YUM 软件包升级器 - （Fedora, RedHat及类似系统）&lt;/h3&gt;
&lt;p&gt;yum install package_name 下载并安装一个rpm包&lt;/p&gt;
&lt;p&gt;yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系&lt;/p&gt;
&lt;p&gt;yum update package_name.rpm 更新当前系统中所有安装的rpm包&lt;/p&gt;
&lt;p&gt;yum update package_name 更新一个rpm包&lt;/p&gt;
&lt;p&gt;yum remove package_name 删除一个rpm包&lt;/p&gt;
&lt;p&gt;yum list 列出当前系统中安装的所有包&lt;/p&gt;
&lt;p&gt;yum search package_name 在rpm仓库中搜寻软件包&lt;/p&gt;
&lt;p&gt;yum clean packages 清理rpm缓存删除下载的包&lt;/p&gt;
&lt;p&gt;yum clean headers 删除所有头文件&lt;/p&gt;
&lt;p&gt;yum clean all 删除所有缓存的包和头文件&lt;/p&gt;
&lt;h3&gt;DEB 包 (Debian, Ubuntu 以及类似系统)&lt;/h3&gt;
&lt;p&gt;dpkg -i package.deb 安装/更新一个 deb 包&lt;/p&gt;
&lt;p&gt;dpkg -r package_name 从系统删除一个 deb 包&lt;/p&gt;
&lt;p&gt;dpkg -l 显示系统中所有已经安装的 deb 包&lt;/p&gt;
&lt;p&gt;dpkg -l | grep httpd 显示所有名称中包含 "httpd" 字样的deb包&lt;/p&gt;
&lt;p&gt;dpkg -s package_name 获得已经安装在系统中一个特殊包的信息&lt;/p&gt;
&lt;p&gt;dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表&lt;/p&gt;
&lt;p&gt;dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表&lt;/p&gt;
&lt;p&gt;dpkg -S /bin/ping 确认所给的文件由哪个deb包提供&lt;/p&gt;
&lt;h3&gt;APT 软件工具 (Debian, Ubuntu 以及类似系统)&lt;/h3&gt;
&lt;p&gt;apt-get install package_name 安装/更新一个 deb 包&lt;/p&gt;
&lt;p&gt;apt-cdrom install package_name 从光盘安装/更新一个 deb 包&lt;/p&gt;
&lt;p&gt;apt-get update 升级列表中的软件包&lt;/p&gt;
&lt;p&gt;apt-get upgrade 升级所有已安装的软件&lt;/p&gt;
&lt;p&gt;apt-get remove package_name 从系统删除一个deb包&lt;/p&gt;
&lt;p&gt;apt-get check 确认依赖的软件仓库正确&lt;/p&gt;
&lt;p&gt;apt-get clean 从下载的软件包中清理缓存&lt;/p&gt;
&lt;p&gt;apt-cache search searched-package 返回包含所要搜索字符串的软件包名称&lt;/p&gt;
&lt;h3&gt;查看文件内容&lt;/h3&gt;
&lt;p&gt;cat file1 从第一个字节开始正向查看文件的内容&lt;/p&gt;
&lt;p&gt;tac file1 从最后一行开始反向查看一个文件的内容&lt;/p&gt;
&lt;p&gt;more file1 查看一个长文件的内容&lt;/p&gt;
&lt;p&gt;less file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作&lt;/p&gt;
&lt;p&gt;head -2 file1 查看一个文件的前两行&lt;/p&gt;
&lt;p&gt;tail -2 file1 查看一个文件的最后两行&lt;/p&gt;
&lt;p&gt;tail -f /var/log/messages 实时查看被添加到一个文件中的内容&lt;/p&gt;
&lt;h3&gt;文本处理&lt;/h3&gt;
&lt;p&gt;cat file1 file2 ... | command &amp;lt;&amp;gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT&lt;/p&gt;
&lt;p&gt;cat file1 | command( sed, grep, awk, grep, etc...) &amp;gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中&lt;/p&gt;
&lt;p&gt;cat file1 | command( sed, grep, awk, grep, etc...) &amp;gt;&amp;gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中&lt;/p&gt;
&lt;p&gt;grep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词"Aug"&lt;/p&gt;
&lt;p&gt;grep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以"Aug"开始的词汇&lt;/p&gt;
&lt;p&gt;grep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行&lt;/p&gt;
&lt;p&gt;grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串"Aug"&lt;/p&gt;
&lt;p&gt;sed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 "string1" 替换成 "string2"&lt;/p&gt;
&lt;p&gt;sed '/^$/d' example.txt 从example.txt文件中删除所有空白行&lt;/p&gt;
&lt;p&gt;sed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行&lt;/p&gt;
&lt;p&gt;echo 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容&lt;/p&gt;
&lt;p&gt;sed -e '1d' result.txt 从文件example.txt 中排除第一行&lt;/p&gt;
&lt;p&gt;sed -n '/stringa1/p' 查看只包含词汇 "string1"的行&lt;/p&gt;
&lt;p&gt;sed -e 's/ *$//' example.txt 删除每一行最后的空白字符&lt;/p&gt;
&lt;p&gt;sed -e 's/stringa1//g' example.txt 从文档中只删除词汇 "string1" 并保留剩余全部&lt;/p&gt;
&lt;p&gt;sed -n '1,5p;5q' example.txt 查看从第一行到第5行内容&lt;/p&gt;
&lt;p&gt;sed -n '5p;5q' example.txt 查看第5行&lt;/p&gt;
&lt;p&gt;sed -e 's/00*/0/g' example.txt 用单个零替换多个零&lt;/p&gt;
&lt;p&gt;cat -n file1 标示文件的行数&lt;/p&gt;
&lt;p&gt;cat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行&lt;/p&gt;
&lt;p&gt;echo a b c | awk '{print $1}' 查看一行第一栏&lt;/p&gt;
&lt;p&gt;echo a b c | awk '{print $1,$3}' 查看一行的第一和第三栏&lt;/p&gt;
&lt;p&gt;paste file1 file2 合并两个文件或两栏的内容&lt;/p&gt;
&lt;p&gt;paste -d '+' file1 file2 合并两个文件或两栏的内容，中间用"+"区分&lt;/p&gt;
&lt;p&gt;sort file1 file2 排序两个文件的内容&lt;/p&gt;
&lt;p&gt;sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)&lt;/p&gt;
&lt;p&gt;sort file1 file2 | uniq -u 删除交集，留下其他的行&lt;/p&gt;
&lt;p&gt;sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)&lt;/p&gt;
&lt;p&gt;comm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容&lt;/p&gt;
&lt;p&gt;comm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容&lt;/p&gt;
&lt;p&gt;comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分&lt;/p&gt;
&lt;h3&gt;字符设置和文件格式转换&lt;/h3&gt;
&lt;p&gt;dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX&lt;/p&gt;
&lt;p&gt;unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS&lt;/p&gt;
&lt;p&gt;recode ..HTML &amp;lt; page.txt &amp;gt; page.html 将一个文本文件转换成html&lt;/p&gt;
&lt;p&gt;recode -l | more 显示所有允许的转换格式&lt;/p&gt;
&lt;h3&gt;文件系统分析&lt;/h3&gt;
&lt;p&gt;badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块&lt;/p&gt;
&lt;p&gt;fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性&lt;/p&gt;
&lt;p&gt;fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性&lt;/p&gt;
&lt;p&gt;e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性&lt;/p&gt;
&lt;p&gt;e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性&lt;/p&gt;
&lt;p&gt;fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性&lt;/p&gt;
&lt;p&gt;fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性&lt;/p&gt;
&lt;p&gt;fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性&lt;/p&gt;
&lt;p&gt;dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性&lt;/p&gt;
&lt;h3&gt;初始化一个文件系统&lt;/h3&gt;
&lt;p&gt;mkfs /dev/hda1 在hda1分区创建一个文件系统&lt;/p&gt;
&lt;p&gt;mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统&lt;/p&gt;
&lt;p&gt;mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统&lt;/p&gt;
&lt;p&gt;mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统&lt;/p&gt;
&lt;p&gt;fdformat -n /dev/fd0 格式化一个软盘&lt;/p&gt;
&lt;p&gt;mkswap /dev/hda3 创建一个swap文件系统&lt;/p&gt;
&lt;h3&gt;SWAP文件系统&lt;/h3&gt;
&lt;p&gt;mkswap /dev/hda3 创建一个swap文件系统&lt;/p&gt;
&lt;p&gt;swapon /dev/hda3 启用一个新的swap文件系统&lt;/p&gt;
&lt;p&gt;swapon /dev/hda2 /dev/hdb3 启用两个swap分区&lt;/p&gt;
&lt;h3&gt;备份&lt;/h3&gt;
&lt;p&gt;dump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份&lt;/p&gt;
&lt;p&gt;dump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份&lt;/p&gt;
&lt;p&gt;restore -if /tmp/home0.bak 还原一个交互式备份&lt;/p&gt;
&lt;p&gt;rsync -rogpav --delete /home /tmp 同步两边的目录&lt;/p&gt;
&lt;p&gt;rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync&lt;/p&gt;
&lt;p&gt;rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录&lt;/p&gt;
&lt;p&gt;rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录&lt;/p&gt;
&lt;p&gt;dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作&lt;/p&gt;
&lt;p&gt;dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件&lt;/p&gt;
&lt;p&gt;tar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作&lt;/p&gt;
&lt;p&gt;( cd /tmp/local/ &amp;amp;&amp;amp; tar c . ) | ssh -C user@ip_addr 'cd /home/share/ &amp;amp;&amp;amp; tar x -p' 通过ssh在远程目录中复制一个目录内容&lt;/p&gt;
&lt;p&gt;( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home &amp;amp;&amp;amp; tar x -p' 通过ssh在远程目录中复制一个本地目录&lt;/p&gt;
&lt;p&gt;tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接&lt;/p&gt;
&lt;p&gt;find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录&lt;/p&gt;
&lt;p&gt;find /var/log -name '*.log' | tar cv --files-from=- | bzip2 &amp;gt; log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包&lt;/p&gt;
&lt;p&gt;dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作&lt;/p&gt;
&lt;p&gt;dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容&lt;/p&gt;
&lt;h3&gt;光盘&lt;/h3&gt;
&lt;p&gt;cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容&lt;/p&gt;
&lt;p&gt;mkisofs /dev/cdrom &amp;gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件&lt;/p&gt;
&lt;p&gt;mkisofs /dev/cdrom | gzip &amp;gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件&lt;/p&gt;
&lt;p&gt;mkisofs -J -allow-leading-dots -R -V "Label CD" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件&lt;/p&gt;
&lt;p&gt;cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件&lt;/p&gt;
&lt;p&gt;gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件&lt;/p&gt;
&lt;p&gt;mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件&lt;/p&gt;
&lt;p&gt;cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中&lt;/p&gt;
&lt;p&gt;cd-paranoia -- "-3" 从一个CD光盘转录音轨到 wav 文件中（参数-3）&lt;/p&gt;
&lt;p&gt;cdrecord --scanbus 扫描总线以识别scsi通道&lt;/p&gt;
&lt;p&gt;dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD&lt;/p&gt;
&lt;h3&gt;网络 - （以太网和WIFI无线）&lt;/h3&gt;
&lt;p&gt;ifconfig eth0 显示一个以太网卡的配置&lt;/p&gt;
&lt;p&gt;ifup eth0 启用一个 'eth0' 网络设备&lt;/p&gt;
&lt;p&gt;ifdown eth0 禁用一个 'eth0' 网络设备&lt;/p&gt;
&lt;p&gt;ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址&lt;/p&gt;
&lt;p&gt;ifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)&lt;/p&gt;
&lt;p&gt;dhclient eth0 以dhcp模式启用 'eth0'&lt;/p&gt;
&lt;p&gt;route -n show routing table&lt;/p&gt;
&lt;p&gt;route add -net 0/0 gw IP_Gateway configura default gateway&lt;/p&gt;
&lt;p&gt;route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16'&lt;/p&gt;
&lt;p&gt;route del 0/0 gw IP_gateway remove static route&lt;/p&gt;
&lt;p&gt;echo "1" &amp;gt; /proc/sys/net/ipv4/ip_forward activate ip routing&lt;/p&gt;
&lt;p&gt;hostname show hostname of system&lt;/p&gt;
&lt;p&gt;host &lt;a href="https://link.zhihu.com/?target=http%3A//www.example.com/"&gt;Example Domain&lt;/a&gt; lookup hostname to resolve name to ip address and viceversa(1)&lt;/p&gt;
&lt;p&gt;nslookup &lt;a href="https://link.zhihu.com/?target=http%3A//www.example.com/"&gt;Example Domain&lt;/a&gt; lookup hostname to resolve name to ip address and viceversa(2)&lt;/p&gt;
&lt;p&gt;ip link show show link status of all interfaces&lt;/p&gt;
&lt;p&gt;mii-tool eth0 show link status of 'eth0'&lt;/p&gt;
&lt;p&gt;ethtool eth0 show statistics of network card 'eth0'&lt;/p&gt;
&lt;p&gt;netstat -tup show all active network connections and their PID&lt;/p&gt;
&lt;p&gt;netstat -tupl show all network services listening on the system and their PID&lt;/p&gt;
&lt;p&gt;tcpdump tcp port 80 show all HTTP traffic&lt;/p&gt;
&lt;p&gt;iwlist scan show wireless networks&lt;/p&gt;
&lt;p&gt;iwconfig eth1 show configuration of a wireless network card&lt;/p&gt;
&lt;p&gt;hostname show hostname&lt;/p&gt;
&lt;p&gt;host &lt;a href="https://link.zhihu.com/?target=http%3A//www.example.com/"&gt;Example Domain&lt;/a&gt; lookup hostname to resolve name to ip address and viceversa&lt;/p&gt;
&lt;p&gt;nslookup &lt;a href="https://link.zhihu.com/?target=http%3A//www.example.com/"&gt;Example Domain&lt;/a&gt; lookup hostname to resolve name to ip address and viceversa&lt;/p&gt;
&lt;p&gt;whois &lt;a href="https://link.zhihu.com/?target=http%3A//www.example.com/"&gt;Example Domain&lt;/a&gt; lookup on Whois database&lt;/p&gt;
&lt;h3&gt;JPS工具&lt;/h3&gt;
&lt;p&gt;jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。&lt;/p&gt;
&lt;p&gt;我想很多人都是用过unix系统里的ps命令，这个命令主要是用来显示当前系统的进程情况，有哪些进程，及其 id。 jps 也是一样，它的作用是显示当前系统的java进程情况，及其id号。我们可以通过它来查看我们到底启动了几个java进程（因为每一个java程序都会独占一个java虚拟机实例），和他们的进程号（为下面几个程序做准备），并可通过opt来查看这些进程的详细启动参数。&lt;/p&gt;
&lt;p&gt;使用方法：在当前命令行下打 jps(需要JAVA_HOME，没有的话，到改程序的目录下打) 。&lt;/p&gt;
&lt;p&gt;jps存放在JAVA_HOME/bin/jps，使用时为了方便请将JAVA_HOME/bin/加入到Path.&lt;/p&gt;
&lt;p&gt;$&amp;gt; jps&lt;/p&gt;
&lt;p&gt;23991 Jps&lt;/p&gt;
&lt;p&gt;23789 BossMain&lt;/p&gt;
&lt;p&gt;23651 Resin&lt;/p&gt;
&lt;p&gt;比较常用的参数：&lt;/p&gt;
&lt;p&gt;-q 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数&lt;/p&gt;
&lt;p&gt;$&amp;gt; jps -q&lt;/p&gt;
&lt;p&gt;28680&lt;/p&gt;
&lt;p&gt;23789&lt;/p&gt;
&lt;p&gt;23651&lt;/p&gt;
&lt;p&gt;-m 输出传递给main 方法的参数，在嵌入式jvm上可能是null&lt;/p&gt;
&lt;p&gt;$&amp;gt; jps -m&lt;/p&gt;
&lt;p&gt;28715 Jps -m&lt;/p&gt;
&lt;p&gt;23789 BossMain&lt;/p&gt;
&lt;p&gt;23651 Resin -socketwait 32768 -stdout /data/aoxj/resin/log/stdout.log -stderr /data/aoxj/resin/log/stderr.log&lt;/p&gt;
&lt;p&gt;-l 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名&lt;/p&gt;
&lt;p&gt;$&amp;gt; jps -l&lt;/p&gt;
&lt;p&gt;28729 sun.tools.jps.Jps&lt;/p&gt;
&lt;p&gt;23789 com.asiainfo.aimc.bossbi.BossMain&lt;/p&gt;
&lt;p&gt;23651 com.caucho.server.resin.Resin&lt;/p&gt;
&lt;p&gt;-v 输出传递给JVM的参数&lt;/p&gt;
&lt;p&gt;$&amp;gt; jps -v&lt;/p&gt;
&lt;p&gt;23789 BossMain&lt;/p&gt;
&lt;p&gt;28802 Jps -Denv.class.path=/data/aoxj/bossbi/twsecurity/java/trustwork140.jar:/data/aoxj/bossbi/twsecurity/java/:/data/aoxj/bossbi/twsecurity/java/twcmcc.jar:/data/aoxj/jdk15/lib/rt.jar:/data/aoxj/jd&lt;/p&gt;
&lt;p&gt;k15/lib/tools.jar -Dapplication.home=/data/aoxj/jdk15 -Xms8m&lt;/p&gt;
&lt;p&gt;23651 Resin -Xss1m -Dresin.home=/data/aoxj/resin -Dserver.root=/data/aoxj/resin -Djava.util.logging.manager=com.caucho.log.LogManagerImpl -&lt;/p&gt;
&lt;p&gt;Djavax.management.builder.initial=com.caucho.jmx.MBeanServerBuilderImpl&lt;/p&gt;
&lt;p&gt;sudo jps看到的进程数量最全&lt;/p&gt;
&lt;p&gt;jps 192.168.0.77&lt;/p&gt;
&lt;p&gt;列出远程服务器192.168.0.77机器所有的jvm实例，采用rmi协议，默认连接端口为1099&lt;/p&gt;
&lt;p&gt;（前提是远程服务器提供jstatd服务）&lt;/p&gt;
&lt;p&gt;注：jps命令有个地方很不好，似乎只能显示当前用户的java进程，要显示其他用户的还是只能用unix/linux的ps命令。&lt;/p&gt;
</content><link href="/Xuxx_Blogs/archives/bj41/" rel="alternate"/><published>2020-12-19T22:55:00+08:06</published></entry><entry><id>/Xuxx_Blogs/archives/bj41/</id><title>idea常用快捷键</title><updated>2020-12-22T03:51:17.910644+00:00</updated><author><name>Xuxx</name><email>xuxx3319@gmail.com</email><uri>暂无</uri></author><content>&lt;h2&gt;自动代码&lt;/h2&gt;
&lt;p&gt;Ctrl+Alt+O 优化导入的类和包
Alt+Insert 生成代码(如get,set方法,构造函数等) 或者右键（Generate）
fori/sout/psvm + Tab
Ctrl+Alt+T 生成try catch 或者 Alt+enter
CTRL+ALT+T 把选中的代码放在 TRY{} IF{} ELSE{} 里
Ctrl + O 重写方法
Ctrl + I 实现方法
Ctr+shift+U 大小写转化
ALT+回车 导入包,自动修正
ALT+/ 代码提示
CTRL+J 自动代码
Ctrl+Shift+J，整合两行为一行
CTRL+空格 代码提示
CTRL+SHIFT+SPACE 自动补全代码
CTRL+ALT+L 格式化代码
CTRL+ALT+I 自动缩进
CTRL+ALT+O 优化导入的类和包
ALT+INSERT 生成代码(如GET,SET方法,构造函数等)
CTRL+E 最近更改的代码
CTRL+ALT+SPACE 类名或接口名提示
CTRL+P 方法参数提示
CTRL+Q，可以看到当前方法的声明&lt;/p&gt;
&lt;p&gt;Shift+F6 重构-重命名 (包、类、方法、变量、甚至注释等)
Ctrl+Alt+V 提取变量&lt;/p&gt;
&lt;h2&gt;查询的快捷键&lt;/h2&gt;
&lt;p&gt;Ctrl＋Shift＋Backspace    可以跳转到上次编辑的地
CTRL+ALT+ left/right    前后导航编辑过的地方
ALT+7   靠左窗口显示当前文件的结构
Ctrl+F12    浮动显示当前文件的结构
ALT+F7  找到你的函数或者变量或者类的所有引用到的地方（查看用法）
CTRL+ALT+F7 找到你的函数或者变量或者类的所有引用到的地方
Ctrl+Shift+Alt+N 查找类中的方法或变量
双击SHIFT 在项目的所有目录查找文件
Ctrl+N 查找类
Ctrl+Shift+N 查找文件
CTRL+G 定位行
CTRL+F 在当前窗口查找文本
CTRL+SHIFT+F 在指定窗口查找文本
CTRL+R 在 当前窗口替换文本
CTRL+SHIFT+R 在指定窗口替换文本
ALT+SHIFT+C 查找修改的文件
CTRL+E 最近打开的文件
F3 向下查找关键字出现位置
SHIFT+F3 向上一个关键字出现位置
选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本
F4 查找变量来源&lt;/p&gt;
&lt;p&gt;CTRL+SHIFT+O 弹出显示查找内容&lt;/p&gt;
&lt;p&gt;Ctrl+W 选中代码，连续按会有其他效果
F2 或Shift+F2 高亮错误或警告快速定位
Ctrl+Up/Down 光标跳转到第一行或最后一行下&lt;/p&gt;
&lt;p&gt;Ctrl+B 快速打开光标处的类或方法
CTRL+ALT+B 找所有的子类
CTRL+SHIFT+B 找变量的类&lt;/p&gt;
&lt;p&gt;Ctrl+Shift+上下键 上下移动代码
Ctrl+Alt+ left/right 返回至上次浏览的位置
Ctrl+X 删除行
Ctrl+D 复制行
Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/&lt;em&gt;…&lt;/em&gt;/ ）&lt;/p&gt;
&lt;p&gt;Ctrl+H 显示类结构图
Ctrl+Q 显示注释文档&lt;/p&gt;
&lt;p&gt;Alt+F1 查找代码所在位置
Alt+1 快速打开或隐藏工程面板&lt;/p&gt;
&lt;p&gt;Alt+ left/right 切换代码视图
ALT+ ↑/↓ 在方法间快速移动定位
CTRL+ALT+ left/right 前后导航编辑过的地方
Ctrl＋Shift＋Backspace可以跳转到上次编辑的地
Alt+6 查找TODO&lt;/p&gt;
&lt;h2&gt;其他快捷键&lt;/h2&gt;
&lt;p&gt;SHIFT+ENTER 另起一行
CTRL+Z 倒退(撤销)
CTRL+SHIFT+Z 向前(取消撤销)
CTRL+ALT+F12 资源管理器打开文件夹
ALT+F1 查找文件所在目录位置
SHIFT+ALT+INSERT 竖编辑模式
CTRL+F4 关闭当前窗口
Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义
Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）&lt;/p&gt;
&lt;h2&gt;调试快捷键&lt;/h2&gt;
&lt;p&gt;其实常用的 就是F8 F7 F9 最值得一提的 就是Drop Frame 可以让运行过的代码从头再来&lt;/p&gt;
&lt;p&gt;alt+F8 debug时选中查看值
Alt+Shift+F9，选择 Debug
Alt+Shift+F10，选择 Run
Ctrl+Shift+F9，编译
Ctrl+Shift+F8，查看断点&lt;/p&gt;
&lt;p&gt;F7，步入
Shift+F7，智能步入
Alt+Shift+F7，强制步入
F8，步过
Shift+F8，步出
Alt+Shift+F8，强制步过&lt;/p&gt;
&lt;p&gt;Alt+F9，运行至光标处
Ctrl+Alt+F9，强制运行至光标处
F9，恢复程序
Alt+F10，定位到断点&lt;/p&gt;
&lt;h2&gt;重构&lt;/h2&gt;
&lt;p&gt;Ctrl+Alt+Shift+T，弹出重构菜单
Shift+F6，重命名
F6，移动
F5，复制
Alt+Delete，安全删除&lt;/p&gt;
&lt;p&gt;Ctrl+Alt+N，内联&lt;/p&gt;
&lt;h2&gt;十大Intellij IDEA快捷键&lt;/h2&gt;
&lt;p&gt;Intellij IDEA中有很多快捷键让人爱不释手，stackoverflow上也有一些有趣的讨论。每个人都有自己的最爱，想排出个理想的榜单还真是困难。
以前也整理过Intellij的快捷键，这次就按照我日常开发时的使用频率，简单分类列一下我最喜欢的十大快捷-神-键吧。&lt;/p&gt;
&lt;h3&gt;智能提示:&lt;/h3&gt;
&lt;p&gt;Intellij首当其冲的当然就是Intelligence智能！基本的代码提示用Ctrl+Space，还有更智能地按类型信息提示Ctrl+Shift+Space，但因为Intellij总是随着我们敲击而自动提示，所以很多时候都不会手动敲这两个快捷键(除非提示框消失了)。用F2/ Shift+F2移动到有错误的代码，Alt+Enter快速修复(即Eclipse中的Quick Fix功能)。当智能提示为我们自动补全方法名时，我们通常要自己补上行尾的反括号和分号，当括号嵌套很多层时会很麻烦，这时我们只需敲Ctrl+Shift+Enter就能自动补全末尾的字符。而且不只是括号，例如敲完if/for时也可以自动补上{}花括号。
最后要说一点，Intellij能够智能感知Spring、Hibernate等主流框架的配置文件和类，以静制动，在看似“静态”的外表下，智能地扫描理解你的项目是如何构造和配置的。&lt;/p&gt;
&lt;h3&gt;重构:&lt;/h3&gt;
&lt;p&gt;Intellij重构是另一完爆Eclipse的功能，其智能程度令人瞠目结舌，比如提取变量时自动检查到所有匹配同时提取成一个变量等。尤其看过《重构-改善既有代码设计》之后，有了Intellij的配合简直是令人大呼过瘾！也正是强大的智能和重构功能，使Intellij下的TDD开发非常顺畅。&lt;/p&gt;
&lt;p&gt;切入正题，先说一个无敌的重构功能大汇总快捷键Ctrl+Shift+Alt+T，叫做Refactor This。按法有点复杂，但也符合Intellij的风格，很多快捷键都要双手完成，而不像Eclipse不少最有用的快捷键可以潇洒地单手完成(不知道算不算Eclipse的一大优点)，但各位用过Emacs的话就会觉得也没什么了(非Emacs黑)。此外，还有些最常用的重构技巧，因为太常用了，若每次都在Refactor This菜单里选的话效率有些低。比如Shift+F6直接就是改名，Ctrl+Alt+V则是提取变量。&lt;/p&gt;
&lt;h3&gt;代码生成：&lt;/h3&gt;
&lt;p&gt;这一点类似Eclipse，虽不是独到之处，但因为日常使用频率极高，所以还是罗列在榜单前面。常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码，用Ctrl+J可以查看所有模板。后面“辅助”一节中将会讲到Alt+Insert，在编辑窗口中点击可以生成构造函数、toString、getter/setter、重写父类方法等。这两个技巧实在太常用了，几乎每天都要生成一堆main、System.out和getter/setter。&lt;/p&gt;
&lt;p&gt;另外，Intellij IDEA 13中加入了后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。例如要输入for(User user : users)只需输入user.for+Tab。再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。&lt;/p&gt;
&lt;h3&gt;编辑：&lt;/h3&gt;
&lt;p&gt;编辑中不得不说的一大神键就是能够自动按语法选中代码的Ctrl+W以及反向的Ctrl+Shift+W了。此外，Ctrl+Left/Right移动光标到前/后单词，Ctrl+[/]移动到前/后代码块，这些类Vim风格的光标移动也是一大亮点。以上Ctrl+Left/Right/[]加上Shift的话就能选中跳跃范围内的代码。Alt+Forward/Backward移动到前/后方法。还有些非常普通的像Ctrl+Y删除行、Ctrl+D复制行、Ctrl+&lt;/p&gt;
&lt;h3&gt;查找打开：&lt;/h3&gt;
&lt;p&gt;类似Eclipse，Intellij的Ctrl+N/Ctrl+Shift+N可以打开类或资源，但Intellij更加智能一些，我们输入的任何字符都将看作模糊匹配，省却了Eclipse中还有输入*的麻烦。最新版本的IDEA还加入了Search Everywhere功能，只需按Shift+Shift即可在一个弹出框中搜索任何东西，包括类、资源、配置项、方法等等。&lt;/p&gt;
&lt;p&gt;类的继承关系则可用Ctrl+H打开类层次窗口，在继承层次上跳转则用Ctrl+B/Ctrl+Alt+B分别对应父类或父方法定义和子类或子方法实现，查看当前类的所有方法用Ctrl+F12。&lt;/p&gt;
&lt;p&gt;要找类或方法的使用也很简单，Alt+F7。要查找文本的出现位置就用Ctrl+F/Ctrl+Shift+F在当前窗口或全工程中查找，再配合F3/Shift+F3前后移动到下一匹配处。&lt;/p&gt;
&lt;p&gt;Intellij更加智能的又一佐证是在任意菜单或显示窗口，都可以直接输入你要找的单词，Intellij就会自动为你过滤。&lt;/p&gt;
&lt;h3&gt;其他辅助：&lt;/h3&gt;
&lt;p&gt;以上这些神键配上一些辅助快捷键，即可让你的双手90%以上的时间摆脱鼠标，专注于键盘仿佛在进行钢琴表演。这些不起眼却是至关重要的最后一块拼图有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令：Ctrl+Shift+A 可以查找所有Intellij的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建：Alt+Insert可以新建类、方法等任何东西。&lt;/p&gt;
&lt;p&gt;格式化代码：格式化import列表Ctrl+Alt+O，格式化代码Ctrl+Alt+L。&lt;/p&gt;
&lt;p&gt;切换窗口：Alt+Num，常用的有1-项目结构，3-搜索结果，4/5-运行调试。Ctrl+Tab切换标签页，Ctrl+E/Ctrl+Shift+E打开最近打开过的或编辑过的文件。&lt;/p&gt;
&lt;p&gt;单元测试：Ctrl+Alt+T创建单元测试用例。&lt;/p&gt;
&lt;p&gt;运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。&lt;/p&gt;
&lt;p&gt;调试：F7/F8/F9 分别对应Step into，Step over，Continue。&lt;/p&gt;
&lt;p&gt;此外还有些我自定义的，例如水平分屏Ctrl+|等，和一些神奇的小功能Ctrl+Shift+V粘贴很早以前拷贝过的，Alt+Shift+Insert进入到列模式进行按列选中。&lt;/p&gt;
&lt;p&gt;Top #10切来切去：Ctrl+Tab&lt;/p&gt;
&lt;p&gt;Top #9选你所想：Ctrl+W&lt;/p&gt;
&lt;p&gt;Top #8代码生成：Template/Postfix +Tab&lt;/p&gt;
&lt;p&gt;Top #7发号施令：Ctrl+Shift+A&lt;/p&gt;
&lt;p&gt;Top #6无处藏身：Shift+Shift&lt;/p&gt;
&lt;p&gt;Top #5自动完成：Ctrl+Shift+Enter&lt;/p&gt;
&lt;p&gt;Top #4创造万物：Alt+Insert&lt;/p&gt;
&lt;p&gt;太难割舍，前三名并列吧！&lt;/p&gt;
&lt;p&gt;Top #1智能补全：Ctrl+Shift+Space&lt;/p&gt;
&lt;p&gt;Top #1自我修复：Alt+Enter&lt;/p&gt;
&lt;p&gt;Top #1重构一切：Ctrl+Shift+Alt+T&lt;/p&gt;
&lt;p&gt;CTRL+ALT+ left/right 前后导航编辑过的地方
Ctrl＋Shift＋Backspace可以跳转到上次编辑的地&lt;/p&gt;
</content><link href="/Xuxx_Blogs/archives/bj41/" rel="alternate"/><published>2020-12-22T11:45:00+08:06</published></entry></feed>